<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AHK实现DD驱动按键连发</title>
    <url>/posts/43001/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://www.autohotkey.com/">AutoHotkey</a></p>
<p>Powerful. Easy to learn.The ultimate automation scripting language for Windows.</p>
<p>强大的。简单易学。适用于 Windows 的终极自动化脚本语言。</p>
<span id="more"></span>
<h2 id="按键功能">按键功能</h2>
<p>按压式连发：按下x键开启，松开x键关闭</p>
<p>循环连发：F4开启，F5关闭</p>
<p>按键暂停：F12</p>
<h2 id="源码">源码</h2>
<figure class="highlight ahk"><table><tr><td class="code"><pre><span class="line"><span class="meta">#Include, Class_DD.ahk</span></span><br><span class="line"><span class="meta">#MaxHotkeysPerInterval 1000</span></span><br><span class="line"></span><br><span class="line"><span class="title">~F4::</span>	</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">	SetTimer,</span> Key01, <span class="number">20</span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">Key01:</span></span><br><span class="line">	dd.key(<span class="number">502</span>, <span class="number">1</span>)</span><br><span class="line">	dd.key(<span class="number">502</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="title">~F5::</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">	SetTimer,</span> Key01, Off</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">~x::</span>	</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">	SetTimer,</span> Key02, <span class="number">20</span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">Key02:</span></span><br><span class="line">	dd.key(<span class="number">502</span>, <span class="number">1</span>)</span><br><span class="line">	dd.key(<span class="number">502</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="title">~x UP::</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">	SetTimer,</span> Key02, Off</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">$F12::</span><span class="keyword">suspend</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AHK</category>
      </categories>
      <tags>
        <tag>AHK</tag>
        <tag>DD</tag>
        <tag>按键连发</tag>
      </tags>
  </entry>
  <entry>
    <title>Applications of Convolution in life</title>
    <url>/posts/32109/</url>
    <content><![CDATA[<h2 id="definition-of-convolution">Definition of convolution</h2>
<p>In mathematics, convolution is a mathematical operation on two functions (<span class="math inline">\(f\)</span> and <span class="math inline">\(g\)</span>) that produces a third function (<span class="math inline">\(f*g\)</span>) that expresses how the shape of one is modified by the other. The term convolution refers to both the result function and to the process of computing it. It is defined as the integral of the product of the two functions after one is reversed and shifted. The integral is evaluated for all values of shift, producing the convolution function. <span id="more"></span> Some features of convolution are similar to cross-correlation: for real-valued functions, of a continuous or discrete variable, it differs from cross-correlation (<span class="math inline">\(f*g\)</span>)only in that either <span class="math inline">\(f(x)\)</span> or <span class="math inline">\(g(x)\)</span> is reflected about the y-axis; thus it is a cross-correlation of <span class="math inline">\(\ f(x)\)</span> and <span class="math inline">\(g( - x)\)</span>, or <span class="math inline">\(f( - x)\)</span> and <span class="math inline">\(g(x)\)</span>. For complex-valued functions, the cross-correlation operator is the adjoint of the convolution operator.</p>
<p>Convolution has applications that include probability, statistics, acoustics, spectroscopy, signal processing and image processing, geophysics, engineering, physics, computer vision and differential equations.</p>
<h2 id="applications-of-convolution">Applications of convolution</h2>
<h3 id="image-processing">Image Processing</h3>
<p>Image processing in spatial domain is a visually rich area of study dealing with pixel-manipulation techniques. Different operations are performed over the images, which are treated simply as two-dimensional arrays.</p>
<p>Normally, all these matrix-based operations are performed between a larger matrix (representing the complete image) and a smaller matrix (which is known as a 2D kernel). The kernel size and the associated values determine the impact exerted by it on the image considered.</p>
<p>For example, suppose we have a matrix [0 1;-1 0] and convolve it an image as seen in Figure 1(a); the result will be like the one shown in Figure 1(b). We can see that the convolving operation has led to the determination of edges prevalent in the figure. However, the result obtained is incomplete because we don't yet have the complete set of edges.</p>
<p>In order to get the remaining set of edges, we need to perform the convolution operation once more. But this time our kernel will be [0 -1;1 0] instead of [0 1; -1 0]. The edges resulting from this are as shown in Figure 1(c).</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202112302225263.png" alt="Figure 2-1. Original image (b) First set of edges in the image (c) Second set of edges in the image (d) Edges of the original image." /><figcaption aria-hidden="true">Figure 2-1. Original image (b) First set of edges in the image (c) Second set of edges in the image (d) Edges of the original image.</figcaption>
</figure>
<p>Following this, we need to combine the results of both operations above to attain all of the edges present in the image (Figure 1(d)). The pair of kernels mentioned are named as Roberts' kernels and the entire act performed on the original image is known as Roberts' edge detection.</p>
<h3 id="audio-processing">Audio Processing</h3>
<p>Auditoriums, cinema halls, and other similar constructions heavily rely on the concept of reverberation because it enhances the quality of sound greatly.</p>
<p>The process in which reverberation is digitally simulated is technically termed "convolution reverb". With convolution reverb, you can convolve an area's known impulse response with that of a desired sound in order to simulate the reverberation effect of a particular area.</p>
<p>Convolution reverb uses digital recordings of physical spaces or other reverb effects (impulse responses) to recreate their reverb. Convolution reverb is often used in film production, with sound engineers recording impulse responses of sets and locations so sounds can be added in post-production with realistic reverberation.</p>
<p>One great example of this is in the movie A Star Is Born, where the band recorded live between sets at Coachella and other festivals but played un-amplified to the crowd. The production team took impulse responses of the full sound system in the crowd to emulate what the band would've sounded like if they were amplified, which gave the live performances a live and very authentic feel.</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202112302225265.png" alt="Figure 2-2. Convolution reverb." /><figcaption aria-hidden="true">Figure 2-2. Convolution reverb.</figcaption>
</figure>
<h3 id="optics-processing">Optics Processing</h3>
<p>When collimated light passes through an aperture with a slit in it, the light gets diffracted along the discontinuity. This act results in the formation of a sinc function on the plane placed at infinity which is referred to as the diffraction pattern of light passing through the slit. Likewise, for a circular aperture, the resulting diffraction pattern would be a sombrero function (Introduction to Imaging Spectrometers).</p>
<p>Now, suppose that we have an aperture which is a combination of both of these (slits and circular shapes). we can arrive at the diffraction pattern of this complex structure without actually repeating the process. In fact, the resulting pattern will be the pattern obtained by convoluting the sinc function with that of sombrero.</p>
<p>This indicates that, when we know the diffraction patterns for each kind of aperture, the diffraction pattern of a combination of them can be obtained by convolving these individual patterns. A similar kind of superposition-like behavior is exhibited by most of the linear systems that convolution can help simplify.</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202112302225267.png" alt="Figure 2-3. The optical convolution processor." /><figcaption aria-hidden="true">Figure 2-3. The optical convolution processor.</figcaption>
</figure>
<h2 id="conclusion">Conclusion</h2>
<p>This article discusses the applications of some convolution operations in daily life. We can find convolution and related operations in many applications of science, engineering, and mathematics. So it's very important to learn convolution.</p>
]]></content>
      <categories>
        <category>Leaning</category>
      </categories>
      <tags>
        <tag>Convolution</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Adguardhome</title>
    <url>/posts/3677/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/AdguardTeam/AdGuardHome">AdguardTeam/AdGuardHome</a></p>
<p>免费和开源、强大的全网广告和跟踪器阻止 DNS 服务器。</p>
<span id="more"></span>
<h2 id="adguardhome部署">Adguardhome部署</h2>
<h3 id="拉取-docker-镜像">拉取 Docker 镜像</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull adguard/adguardhome</span><br></pre></td></tr></table></figure>
<h3 id="创建并运行容器">创建并运行容器</h3>
<h4 id="方法一">方法一</h4>
<p>网络为bridge创建一个新容器并运行 AdGuard Home：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd \</span><br><span class="line">    --name adguardhome\</span><br><span class="line">    --restart=always \</span><br><span class="line">    -v /my/own/workdir:/opt/adguardhome/work\</span><br><span class="line">    -v /my/own/confdir:/opt/adguardhome/conf\</span><br><span class="line">    -p 53:53/tcp -p 53:53/udp\</span><br><span class="line">    -p 67:67/udp -p 68:68/udp\</span><br><span class="line">    -p 80:80/tcp -p 443:443/tcp -p 443:443/udp -p 3000:3000/tcp\</span><br><span class="line">    -p 853:853/tcp\</span><br><span class="line">    -p 784:784/udp -p 853:853/udp -p 8853:8853/udp\</span><br><span class="line">    -p 5443:5443/tcp -p 5443:5443/udp\</span><br><span class="line">    -d adguard/adguardhome</span><br></pre></td></tr></table></figure>
<p>现在您可以打开浏览器并导航到http://127.0.0.1:3000/来控制您的 AdGuard Home 服务。</p>
<p>不要忘记使用您自己的<strong>数据</strong>和<strong>配置</strong>目录！</p>
<p>您可能需要的端口映射：</p>
<ul>
<li><code>-p 53:53/tcp -p 53:53/udp</code>: 纯DNS。</li>
<li><code>-p 67:67/udp -p 68:68/tcp -p 68:68/udp</code>: 如果您打算使用 AdGuard Home 作为 DHCP 服务器，请添加。</li>
<li><code>-p 80:80/tcp -p 443:443/tcp -p 443:443/udp -p 3000:3000/tcp</code>：如果您要使用 AdGuard Home 的管理面板以及将 AdGuard Home 作为<a href="https://github.com/AdguardTeam/AdGuardHome/wiki/Encryption">HTTPS/DNS-over-HTTPS</a>服务器运行，请添加。</li>
<li><code>-p 853:853/tcp</code>：如果您要将 AdGuard Home 作为<a href="https://github.com/AdguardTeam/AdGuardHome/wiki/Encryption">DNS-over-TLS</a>服务器运行，请添加。</li>
<li><code>-p 784:784/udp -p 853:853/udp -p 8853:8853/udp</code>：如果您要将 AdGuard Home 作为<a href="https://github.com/AdguardTeam/AdGuardHome/wiki/Encryption">DNS-over-QUIC</a>服务器运行，请添加。你可以只留下其中的一两个。</li>
<li><code>-p 5443:5443/tcp -p 5443:5443/udp</code>：如果您要将 AdGuard Home 作为<a href="https://github.com/AdguardTeam/AdGuardHome/wiki/DNSCrypt">DNSCrypt</a>服务器运行，请添加。</li>
</ul>
<h4 id="方法二">方法二</h4>
<p>网络为host创建一个新容器并运行 AdGuard Home：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd \</span><br><span class="line">    --name adguardhome \</span><br><span class="line">    --network host \</span><br><span class="line">    -v /volume1/docker/adguardhome/work:/opt/adguardhome/work \</span><br><span class="line">    -v /volume1/docker/adguardhome/conf:/opt/adguardhome/conf \</span><br><span class="line">    --restart=always \</span><br><span class="line">adguard/adguardhome</span><br></pre></td></tr></table></figure>
<p>Docker 使用主机的网络而不是 bridged 网络。<code>-p</code>在这种情况下不需要端口映射。</p>
<h4 id="方法三">方法三</h4>
<p>网络为macvlan创建一个新容器并运行 AdGuard Home：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd \</span><br><span class="line">    --name adguardhome \</span><br><span class="line">    --network bridge-host \</span><br><span class="line">    --ip=192.168.1.50 \</span><br><span class="line">    -v /volume1/docker/adguardhome/work:/opt/adguardhome/work \</span><br><span class="line">    -v /volume1/docker/adguardhome/conf:/opt/adguardhome/conf \</span><br><span class="line">    --restart=always \</span><br><span class="line">adguard/adguardhome</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>--network bridge-host</code>: 指定macvlan网络，使用macvlan网络驱动。创建方法见<a href="https://maskbugzero.cf/2018/Ddbj/#docker-%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4">Docker常用命令</a></p></li>
<li><p><code>--ip=192.168.1.50</code>:指定该容器的IP地址。</p></li>
</ul>
<h3 id="控制容器">控制容器</h3>
<ul>
<li>开始： <code>docker start adguardhome</code></li>
<li>停止： <code>docker stop adguardhome</code></li>
<li>删除： <code>docker rm adguardhome</code></li>
</ul>
<h2 id="adguardhome规则">Adguardhome规则</h2>
<p>EasyList —— 去除国际网页中大多数广告，包括不需要的框架、图像和对象</p>
<p>链接：<code>https://easylist-downloads.adblockplus.org/easylist.txt</code></p>
<p>EasyList China —— EasyList针对国内的补充规则</p>
<p>链接：<code>https://easylist-downloads.adblockplus.org/easylistchina.txt</code></p>
<p>EasyPrivacy —— 从网络上上完全删除所有形式的跟踪，包括Web错误、跟踪脚本和信息收集，从而保护您的个人数据</p>
<p>链接：<code>https://easylist-downloads.adblockplus.org/easyprivacy.txt</code></p>
<p>EasyList Cookie List —— 阻止Cookie标语，GDPR覆盖窗口和其他与隐私相关的通知</p>
<p>链接：<code>https://easylist-downloads.adblockplus.org/easylist-cookie.txt</code></p>
<p>乘风去广告</p>
<p>广告规则：<code>https://raw.githubusercontent.com/xinggsf/Adblock-Plus-Rule/master/rule.txt</code></p>
<p>Anti-AD —— 目前中文区命中率最高的广告过滤列表，实现了精确的广告屏蔽和隐私保护。屏蔽广告域名、电视盒子广告、APP内置广告，同时屏蔽了一些日志收集、大数据统计等涉及个人隐私信息的站点，能够保护个人隐私不被偷偷上传</p>
<p>github链接：<code>https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-easylist.txt</code></p>
<p>官网链接：<code>https://anti-ad.net/easylist.txt</code></p>
<p>Adbyby</p>
<p>链接：<code>https://raw.githubusercontent.com/adbyby/xwhyc-rules/master/lazy.txt</code></p>
<p>链接：<code>https://raw.githubusercontent.com/adbyby/xwhyc-rules/master/video.txt</code></p>
<p>过滤自我推广并补充 EasyPrivacy 隐私规则 —— CJX’s Annoyance List (去自推列表)</p>
<p>链接：<code>https://gitee.com/cjx82630/cjxlist/raw/master/cjx-annoyance.txt</code></p>
<p>ADgk —— 适用于 AdGuard for Android 的去广告规则（不保证在其他软件使用的效果）</p>
<p>链接：<code>https://raw.githubusercontent.com/banbendalao/ADgk/master/ADgk.txt</code></p>
<p>百度搜索结果内屏蔽百家号</p>
<p>链接：<code>https://raw.githubusercontent.com/banbendalao/ADgk/master/kill-baidu-ad.txt</code></p>
<p>屏蔽网站的 cookies 相关的警告</p>
<p>链接：<code>https://www.i-dont-care-about-cookies.eu/abp/</code></p>
<p>知乎过滤器 —— 去除开屏、时间轴、首页推荐、回答列表、回答底部及评论区广告，个人中心VIP横幅</p>
<p>标准版：<code>https://raw.githubusercontent.com/zsakvo/AdGuard-Custom-Rule/master/rule/zhihu.txt</code></p>
<p>严格版：<code>https://raw.githubusercontent.com/zsakvo/AdGuard-Custom-Rule/master/rule/zhihu-strict.txt</code></p>
<p>广告终结者使用的拦截规则，基于ChinaList+EasyList修正维护</p>
<p>链接：<code>http://sub.adtchrome.com/adt-chinalist-easylist.txt</code></p>
<p>EasylistChina+EasylistLite+CJX’sAnnoyance —— 由 halflife 维护的拦截规则 ，合并了 EasylistChina、EasylistLite、CJX’sAnnoyance，以及补充的一些规则，每日更新。</p>
<p>链接：<code>https://gitee.com/halflife/list/raw/master/ad.txt</code></p>
<p>大圣净化 - 针对国内视频网站</p>
<p>链接：<code>https://raw.githubusercontent.com/jdlingyu/ad-wars/master/hosts</code></p>
<p><strong>注意</strong>：上述规则不必全部选择，只需挑选合适即可。</p>
<h2 id="adguardhome配置">Adguardhome配置</h2>
<h3 id="开始配置">开始配置</h3>
<p>访问输入ip+端口号（3000），进入网页配置，点击<code>开始配置</code>。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/f8QjTf.jpg" alt="开始配置" /><figcaption aria-hidden="true">开始配置</figcaption>
</figure>
<h3 id="管理端口">管理端口</h3>
<p>选择网页管理端口，默认80，DNS端口，默认53，点击<code>下一步</code>。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/f8QX0P.jpg" alt="选择网页管理端口" /><figcaption aria-hidden="true">选择网页管理端口</figcaption>
</figure>
<h3 id="配置管理员账号">配置管理员账号</h3>
<p>输入管理员用户名和密码，点击<code>下一步</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/f8QOmt.jpg" alt="配置管理员账号" /><figcaption aria-hidden="true">配置管理员账号</figcaption>
</figure>
<h3 id="核实设置">核实设置</h3>
<p>核实设置，没问题就点击<code>下一步</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/f8QqOI.jpg" alt="核实设置" /><figcaption aria-hidden="true">核实设置</figcaption>
</figure>
<h3 id="打开仪表盘">打开仪表盘</h3>
<p>安装已经完成，可以开始使用 AdGuard Home ，点击打开<code>仪表盘</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/f8Qb6A.jpg" alt="仪表盘" /><figcaption aria-hidden="true">仪表盘</figcaption>
</figure>
<h3 id="登录页面">登录页面</h3>
<p>输入管理员账号密码，进入管理页面</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/f8Qxk8.jpg" alt="登录页面" /><figcaption aria-hidden="true">登录页面</figcaption>
</figure>
<h3 id="选择过滤器">选择过滤器</h3>
<p>这里可以查看Adguardhome相关数据，点击<code>过滤器</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/f8QztS.jpg" alt="点击过滤器" /><figcaption aria-hidden="true">点击过滤器</figcaption>
</figure>
<h3 id="选择dns封锁清单">选择DNS封锁清单</h3>
<p>选择<code>DNS封锁清单</code>，添加上述相关规则</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/f8lkmq.jpg" alt="选择DNS封锁清单" /><figcaption aria-hidden="true">选择DNS封锁清单</figcaption>
</figure>
<h3 id="配置设备dns地址">配置设备DNS地址</h3>
<p>配置设备DNS地址为Adguardhome地址</p>
<blockquote>
<p>方法一：修改路由器DHCP分发的DNS地址，重新联网后即可刷新DNS地址</p>
<p>方法二：手动修改设备DNS地址</p>
</blockquote>
<p>即可享用Adguardhome</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Aria2+AriaNg前端面板</title>
    <url>/posts/57736/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/P3TERX/Aria2-Pro-Docker">P3TERX/Aria2-Pro-Docker</a></p>
<p>Aria2 是目前最强大的全能型下载工具，它支持 BT、磁力、HTTP、FTP 等下载协议，常用做离线下载的服务端。</p>
<span id="more"></span>
<h2 id="aria2-pro部署">Aria2-Pro部署</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name aria2-pro \</span><br><span class="line">    --restart always \</span><br><span class="line">    --log-opt max-size=1m \</span><br><span class="line">    --network host \</span><br><span class="line">    -e PUID=0 \</span><br><span class="line">    -e PGID=0 \</span><br><span class="line">    -e UMASK_SET=000 \</span><br><span class="line">    -e RPC_SECRET=12345678qwer \</span><br><span class="line">    -e RPC_PORT=6800 \</span><br><span class="line">    -e IPV6_MODE=true \</span><br><span class="line">    -e SPECIAL_MODE=move \</span><br><span class="line">    -e LISTEN_PORT=55554 \</span><br><span class="line">    -e UPDATE_TRACKERS=true \</span><br><span class="line">    -v /volume1/docker/aria2-pro:/config \</span><br><span class="line">    -v /volume1/downloads:/downloads \</span><br><span class="line">    p3terx/aria2-pro</span><br></pre></td></tr></table></figure>
<h3 id="选项参数说明">选项参数说明</h3>
<ul>
<li><p><code>--name aria2-pro</code> - 容器名称，可自定义以示区分。</p></li>
<li><p><code>--restart always</code> - 设置容器重启策略，详情参见 <a href="https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart">Docker 官方文档</a>。</p></li>
<li><p><code>--network host</code> - 使用 host 网络模式。直接使用宿主机网络，免去端口映射导致的部分性能损失，且灵活性更高，可更方便的配置使用 IPv6 网络。</p></li>
<li><p><code>-v /volume1/docker/aria2-pro</code> - 配置目录映射，配置文件持久化。左边为宿主机路径供自定义，<strong>不要有中文、不要混用配置文件，首次使用请确保目录为空。</strong></p></li>
<li><p><code>-v /volume1/downloads</code> - 下载目录映射。左边为宿主机路径供自定义，<strong>不要有中文</strong>。</p></li>
<li><p><code>-e PUID=$UID</code> - 用户映射。设置文件管理账户的<code>UID</code>(用户 ID)。忽略则默认为<code>nobady</code>用户，并权限最大化。</p></li>
<li><p><code>-e PGID=$GID</code> - 用户组映射。设置文件管理账户的<code>GID</code>(用户组 ID)。忽略则默认为<code>nogroup</code>用户组，并权限最大化。</p>
<p><strong>如果管理文件的账户不是当前登录的账户或者使用 GUI 创建容器请务必执行 <code>id</code> 命令手动获取并填写</strong>。比如我的账户为 <code>root</code>，那么就执行 <code>id root</code></p></li>
<li><p><code>-e RPC_SECRET=&lt;TOKEN&gt;</code> - RPC 密钥设置，即 WebUI 连接时需要填写的密码，只建议使用字母和数字。如果没有设置，配置文件中的默认密码为<code>P3TERX</code>。</p></li>
<li><p><code>-e RPC_PORT=6800</code> - RPC 端口设置。</p></li>
<li><p><code>-e LISTEN_PORT=55554</code> - BT 监听端口（TCP）、DHT 监听端口（UDP）设置，即 Aria2 配置中<code>listen-port</code>与<code>dht-listen-port</code>选项定义的端口。如果没有设置，配置文件中的默认值为<code>6888</code>。</p></li>
<li><p><code>-e IPV6_MODE=true</code> - 开启 IPv6 模式。此变量等同于设定配置文件中的选项<code>disable-ipv6=false</code>与<code>enable-dht6=true</code>。可间接提升 BT 下载速率，但需要网络完整支持 IPv6 ，否则会导致部分功能异常，甚至无法下载。</p></li>
<li><p><code>-e SPECIAL_MODE=move</code> - 开启<strong>文件自动归档/分类</strong>功能，即在文件下载完成后把文件移动到指定目录。默认移动到下载目录下的<code>completed</code>子目录。</p></li>
<li><p><code>-e UPDATE_TRACKERS=true</code> - 禁用自动更新 BT tracker 。PT 下载和想手动填写设置 BT tracker 需求必须禁用。</p></li>
<li><p><code>-e UMASK_SET=022</code> - umask 设置，默认值<code>022</code>。决定你下载下来的文件的权限，对权限不敏感或不理解直接填写<code>000</code>。</p></li>
</ul>
<h3 id="注意事项">注意事项</h3>
<ul>
<li>如果是在本地内网的电脑或者 NAS 上使用 Aria2 下载，需要在路由器上设置端口转发，Aria2 暂不支持 UPnP 功能。</li>
</ul>
<h2 id="ariang-webui部署">AriaNg (WebUI)部署</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> bridge 网络模式</span></span><br><span class="line">docker run -d \</span><br><span class="line">    --name ariang \</span><br><span class="line">    --restart always \</span><br><span class="line">    --log-opt max-size=1m \</span><br><span class="line">    -p 6880:6880 \</span><br><span class="line">    p3terx/ariang</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> host 网络模式（如果你需要使用 IPv6 网络访问，这是最简单的方式）</span></span><br><span class="line">docker run -d \</span><br><span class="line">    --name ariang \</span><br><span class="line">    --log-opt max-size=1m \</span><br><span class="line">    --restart always \</span><br><span class="line">    --network host \</span><br><span class="line">    p3terx/ariang</span><br></pre></td></tr></table></figure>
<h3 id="手动设置">手动设置</h3>
<p>在 <code>AriaNg 设置</code>中填写相关 RPC 信息。<code>RPC 地址</code>对应 IP 或域名， <code>RPC 秘钥</code>对应配置文件 (<code>aria2.conf</code>) 中 <code>rpc-secret</code> 选项后面的参数。如果没有过修改端口，那么默认是 <code>6800</code> 无需修改。</p>
<h3 id="注意事项-1">注意事项</h3>
<ul>
<li>在 AriaNg （或其它前端面板）中对 Aria2 设置的修改只会保存在内存中，不会修改配置文件，即属于临时修改，只在当前运行的进程中有效。Aria2 重启或关闭后会重新读取配置文件。这是 Aria2 的特性决定的并是不 bug ，所以必要的设置需写入到 Aria2 配置文件中。</li>
<li>修改 Aria2 配置文件后，要先关闭 AriaNg 再重启 Aria2 进程，否则 AriaNg 可能会传递之前缓存的配置给 Aria2 ，这可能会导致修改的配置没有生效。理论上其它前端面板也是这样。（待讨论）</li>
<li>HTTP 协议的 <strong>RPC 请求方式</strong>只建议使用<code>POST</code>，否则可能导致 BT 种子无法传递到 Aria2 服务端。</li>
<li>BT 下载多文件时，若想取消部分文件，需先暂停任务后才能进行勾选。</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装qbittorrent</title>
    <url>/posts/54310/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p>Github：<a href="https://github.com/linuxserver/docker-qbittorrent">linuxserver/docker-qbittorrent</a></p>
<p>Docker：<a href="https://registry.hub.docker.com/r/linuxserver/qbittorrent">linuxserver/qbittorrent</a></p>
<p>该<a href="https://www.qbittorrent.org/">Qbittorrent</a>项目旨在提供一个开源软件替代的μTorrent。qBittorrent 基于 Qt 工具包和 libtorrent-rasterbar 库。</p>
<span id="more"></span>
<h2 id="使用docker-compose快速部署">使用Docker-Compose快速部署</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">version: &quot;2.1&quot;</span><br><span class="line">services:</span><br><span class="line">  qbittorrent:</span><br><span class="line">    image: ghcr.io/linuxserver/qbittorrent</span><br><span class="line">    container_name: qbittorrent</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=0</span><br><span class="line">      - PGID=0</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - WEBUI_PORT=8080</span><br><span class="line">    volumes:</span><br><span class="line">      - /volume1/docker/qbittorrent:/config</span><br><span class="line">      - /volume1/downloads/qbittorrent:/downloads</span><br><span class="line">    networks:</span><br><span class="line">      - host</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure>
<h2 id="使用docker部署">使用Docker部署</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=qbittorrent \</span><br><span class="line">  -e PUID=0 \</span><br><span class="line">  -e PGID=0 \</span><br><span class="line">  --restart always \</span><br><span class="line">  --network host \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e WEBUI_PORT=8082 \</span><br><span class="line">  -v /volume1/docker/qbittorrent:/config \</span><br><span class="line">  -v /volume1/downloads/qbittorrent:/downloads \</span><br><span class="line">  linuxserver/qbittorrent:amd64-latest</span><br></pre></td></tr></table></figure>
<ul>
<li>更新： <code>docker pull linuxserver/qbittorrent</code></li>
<li>停止正在运行的容器： <code>docker stop qbittorrent</code></li>
<li>删除容器： <code>docker rm qbittorrent</code></li>
<li>使用与上述相同的 docker run 参数重新创建一个新容器（如果正确映射到主机文件夹，您的<code>/config</code>文件夹和设置将被保留）</li>
</ul>
<h2 id="参数">参数</h2>
<p>例如，<code>-p 8080:80</code>将从<code>80</code>容器内部公开端口，以便从<code>8080</code>容器外部端口上的主机 IP 访问。</p>
<table>
<thead>
<tr class="header">
<th>范围</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>-p 6881</code></td>
<td>tcp连接端口</td>
</tr>
<tr class="even">
<td><code>-p 6881/udp</code></td>
<td>udp连接端口</td>
</tr>
<tr class="odd">
<td><code>-p 8080</code></td>
<td>图形用户界面</td>
</tr>
<tr class="even">
<td><code>-e PUID=1000</code></td>
<td>用户 ID - 见下文解释</td>
</tr>
<tr class="odd">
<td><code>-e PGID=1000</code></td>
<td>对于 GroupID - 请参阅下面的说明</td>
</tr>
<tr class="even">
<td><code>-e TZ=Asia/Shanghai</code></td>
<td>指定时区以使用 Asia/Shanghai</td>
</tr>
<tr class="odd">
<td><code>-e WEBUI_PORT=8080</code></td>
<td>更改webui的端口，见下文说明</td>
</tr>
<tr class="even">
<td><code>-v /config</code></td>
<td>包含所有相关的配置文件。</td>
</tr>
<tr class="odd">
<td><code>-v /downloads</code></td>
<td>磁盘上的下载位置。</td>
</tr>
</tbody>
</table>
<h2 id="用户组标识符">用户/组标识符</h2>
<p>当<code>-v</code>主机操作系统和容器之间可能会出现使用卷（标志）权限问题时，我们通过允许您指定用户<code>PUID</code>和组来避免这个问题<code>PGID</code>。</p>
<p>确保主机上的任何卷目录都归您指定的同一用户所有。</p>
<p>在这种情况下<code>PUID=1000</code>和<code>PGID=1000</code>，找到你的用法<code>id user</code>如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> id 用户名</span></span><br><span class="line">  uid=1000(dockeruser) gid=1000(dockergroup) 组=1000(dockergroup)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装哔哩哔哩（Bilibili）B 站主站助手、直播助手</title>
    <url>/posts/36105/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/lkeme/BiliHelper-personal">lkeme/BiliHelper-personal</a></p>
<p>哔哩哔哩（Bilibili）B 站主站助手、直播助手、直播抽奖、挂机升级、贴心小棉袄脚本、Lv6 离你仅有一步之遥~ - PHP 版（Personal）。</p>
<span id="more"></span>
<h2 id="bilihelper-personal部署">BiliHelper-personal部署</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name bilihelper \</span><br><span class="line">    --restart always \</span><br><span class="line">    -v /volume1/docker/bilihelper/user.ini:/app/conf/user.ini \</span><br><span class="line">    -e MIRRORS=1 \</span><br><span class="line">    lkeme/bilihelper-personal</span><br></pre></td></tr></table></figure>
<h2 id="bilihelper-personal配置">BiliHelper-personal配置</h2>
<p>user.ini如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">version</span> = <span class="number">0.0</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"><span class="comment">#       账户设置       #</span></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"></span><br><span class="line"><span class="section">[login.account]</span></span><br><span class="line"><span class="comment">; 帐号|密码</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 登录模式|[1.账密模式 2.短信验证码模式 3.行为验证码模式(暂未开放)]</span></span><br><span class="line"><span class="section">[login.mode]</span></span><br><span class="line"><span class="attr">mode</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 国家代码|mode=2触发|例：大陆86 澳大利亚61</span></span><br><span class="line"><span class="section">[login.country]</span></span><br><span class="line"><span class="attr">country_code</span> = <span class="number">86</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 校验|mode=2触发|校验国内手机号|国外手机号关闭校验</span></span><br><span class="line"><span class="section">[login.check]</span></span><br><span class="line"><span class="attr">phone</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; UID|CSRF|令牌|(当前区域自动生成)</span></span><br><span class="line"><span class="section">[login.auth]</span></span><br><span class="line"><span class="attr">uid</span> =</span><br><span class="line"><span class="attr">csrf</span> =</span><br><span class="line"><span class="attr">cookie</span> =</span><br><span class="line"><span class="attr">access_token</span> =</span><br><span class="line">refresh_token =</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"><span class="comment">#       功能设置       #</span></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 主站每日任务(每日登录、观看、投币、分享)</span></span><br><span class="line"><span class="section">[main_site]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">; 每日观看</span></span><br><span class="line"><span class="attr">watch</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">; 每日分享</span></span><br><span class="line"><span class="attr">share</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">; 每日视频投币|random(随机热门)/fixed(关注列表)|投币稿件数(每日任务最大5)</span></span><br><span class="line"><span class="attr">add_coin</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">add_coin_mode</span> = random</span><br><span class="line"><span class="attr">add_coin_num</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 日常/周常礼物</span></span><br><span class="line"><span class="section">[daily_bag]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 双端心跳</span></span><br><span class="line"><span class="section">[double_heart]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 友爱社签到</span></span><br><span class="line"><span class="section">[love_club]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 领取心跳礼物</span></span><br><span class="line"><span class="section">[gift_heart]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 直播每日任务|每日签到|每日登录</span></span><br><span class="line"><span class="section">[daily_task]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 直播箱子实物抽奖</span></span><br><span class="line"><span class="section">[live_box]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 每日24个小心心|依赖加密心跳服务器</span></span><br><span class="line"><span class="section">[small_heart]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 直播扭蛋活动抽奖|依赖加密心跳服务器</span></span><br><span class="line"><span class="section">[live_capsule]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 点亮灰色勋章|100亲密度|每日或者只点亮灰色</span></span><br><span class="line"><span class="section">[polish_the_medal]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">everyday</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 主站九宫格抽奖活动助手</span></span><br><span class="line"><span class="section">[main_activity]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 银瓜子兑换硬币</span></span><br><span class="line"><span class="section">[silver2coin]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 直播大乱斗</span></span><br><span class="line"><span class="section">[live_pk]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 直播舰长总督</span></span><br><span class="line"><span class="section">[live_guard]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 直播其他礼物</span></span><br><span class="line"><span class="section">[live_gift]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 直播节奏风暴|丢弃率(0-100)|尝试次数(范围值)</span></span><br><span class="line"><span class="section">[live_storm]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">drop_rate</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">attempt</span> = <span class="string">&quot;5,10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 直播天选时刻|抽取类型(0: 无限制; 1: 关注主播; 2: 粉丝勋章; 3大航海； 4用户等级；5主站等级)|自动取关(测试功能)依赖于award_record|过滤关键词|逗号分隔</span></span><br><span class="line"><span class="section">[live_anchor]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">limit_type</span> = <span class="string">&quot;0,1&quot;</span></span><br><span class="line"><span class="attr">auto_unfollow</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">filter_words</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; 获取最新的中奖纪录</span></span><br><span class="line"><span class="section">[award_record]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 活跃弹幕|弹幕房间(为空则随机)|弹幕内容(为空则随机)</span></span><br><span class="line"><span class="section">[barrage]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">room_id</span> = <span class="number">9522051</span></span><br><span class="line"><span class="attr">content</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; 漫画助手</span></span><br><span class="line"><span class="section">[manga]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 风纪委员投票|需要实名认证|慎用</span></span><br><span class="line"><span class="section">[judgement]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 大会员权益|年度大会员专享</span></span><br><span class="line"><span class="section">[vip_privilege]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; B币券消费|年度大会员专享|每月默认充值数量5B币|消费方式优先级从上到下</span></span><br><span class="line"><span class="section">[bp_consumption]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment"># 消费B币充电|充电的目标UID|可充值自己的UID</span></span><br><span class="line"><span class="attr">bp2charge</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">bp2charge_uid</span> = <span class="number">6580464</span></span><br><span class="line"><span class="comment"># 消费B币充值金瓜子|5000金瓜子</span></span><br><span class="line"><span class="attr">bp2gold</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 自动转发抽奖动态|自动取关未中奖动态|强制清除抽奖组关注|过滤低于多少粉丝|自定义回复|过滤词|逗号分割</span></span><br><span class="line"><span class="section">[dynamic]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">clear_dynamic</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">clear_group_follow</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">min_fans_num</span> = <span class="number">15000</span></span><br><span class="line"><span class="attr">auto_reply_text</span> =</span><br><span class="line"><span class="attr">filter_words</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; 游戏赛事竞猜预测|破产机|每日竞猜次数|每次竞猜硬币(1-10)|下注(1.压大,2.压小,3.随机)</span></span><br><span class="line"><span class="section">[match_forecast]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">max_num</span> = <span class="number">20</span></span><br><span class="line"><span class="attr">max_coin</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">bet</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 休眠时间|时间区间(0-23)|逗号分隔</span></span><br><span class="line"><span class="section">[sleep]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">section</span> = <span class="string">&quot;2,3,4,5,6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"><span class="comment">#       通知设置       #</span></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 消息推送|消息推送过滤词|逗号分割|优先级从上到下</span></span><br><span class="line"><span class="section">[notify]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">filter_words</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; Dingtalk机器人|token|依赖USE_NOTIFY</span></span><br><span class="line"><span class="section">[notify.dingtalk]</span></span><br><span class="line"><span class="attr">token</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; Tele机器人|url(可选)|token|chatid|依赖USE_NOTIFY</span></span><br><span class="line"><span class="section">[notify.telegram]</span></span><br><span class="line"><span class="attr">url</span> =</span><br><span class="line"><span class="attr">bottoken</span> =</span><br><span class="line"><span class="attr">chatid</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; Pushplus酱|token|依赖USE_NOTIFY</span></span><br><span class="line"><span class="section">[notify.pushplus]</span></span><br><span class="line"><span class="attr">token</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; Sever酱(原版)|令牌Key|依赖USE_NOTIFY</span></span><br><span class="line"><span class="section">[notify.sc]</span></span><br><span class="line"><span class="attr">sckey</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; Server酱(Turbo版)|令牌Key|依赖USE_NOTIFY</span></span><br><span class="line"><span class="section">[notify.sct]</span></span><br><span class="line"><span class="attr">sctkey</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; GoCqhttp|url|token|目标qq|依赖USE_NOTIFY</span></span><br><span class="line"><span class="section">[notify.gocqhttp]</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">token</span> =</span><br><span class="line"><span class="attr">target_qq</span> =</span><br><span class="line"></span><br><span class="line"><span class="comment">; Debug|个人调试推送|url|token|</span></span><br><span class="line"><span class="section">[notify.debug]</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">token =</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"><span class="comment">#       基础设置       #</span></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 独立推送服务(主)|主备冲突</span></span><br><span class="line"><span class="section">[alone_monitor]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="string">&quot;tcp://livecmt-1.mudew.com:10088&quot;</span></span><br><span class="line"><span class="attr">server_key</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 分区推送服务(备)|主备冲突</span></span><br><span class="line"><span class="section">[zone_monitor]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="string">&quot;tcp://broadcastlv.chat.bilibili.com:2243/sub&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 加密心跳服务器(开源)|如失效自行搭建</span></span><br><span class="line"><span class="section">[heartbeat_enc]</span></span><br><span class="line"><span class="attr">server</span> = <span class="string">&quot;http://heartbeat-1.mudew.com:3000/enc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"><span class="comment">#       房间设置       #</span></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 直播间ID，全局房间，用于礼物赠送、心跳等等.</span></span><br><span class="line"><span class="section">[global_room]</span></span><br><span class="line"><span class="attr">room_id</span> = <span class="number">9522051</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 弹幕监控房间(为空则随机)</span></span><br><span class="line"><span class="section">[socket]</span></span><br><span class="line"><span class="attr">room_id</span> = <span class="number">9522051</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 勋章亲密度，测试功能，有短位使用短位反之长位，左侧优先，仅支持辣条和亿元</span></span><br><span class="line"><span class="comment">; 当列表中所有ID都已达到每日上限，剩余礼物赠送ROOM_ID指定的直播间</span></span><br><span class="line"><span class="comment">; 是否填满(按时间投喂正常礼物，否则过期礼物)|直播间ID列表|逗号分隔|</span></span><br><span class="line"><span class="section">[intimacy]</span></span><br><span class="line"><span class="attr">feed_fill</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">room_list</span> = <span class="number">9522051</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"><span class="comment">#       网络设置       #</span></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 验证SSL证书|请求时验证SSL证书行为</span></span><br><span class="line"><span class="section">[network.ssl]</span></span><br><span class="line"><span class="attr">verify_ssl</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 是否使用代理|(http\https)</span></span><br><span class="line"><span class="section">[network.proxy]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">proxy</span> = <span class="string">&quot;http://127.0.0.1:8888&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"><span class="comment">#       程序设置       #</span></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 调试模式|采集完整日志</span></span><br><span class="line"><span class="section">[debug]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 记录日志|日志回调地址</span></span><br><span class="line"><span class="section">[log]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">callback</span> = <span class="string">&quot;http://www.example.com/api.send?text=&#123;account&#125;[&#123;level&#125;]: &#123;message&#125;&quot;</span></span><br><span class="line"><span class="comment"># 错误回调级别</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   DEBUG   100</span></span><br><span class="line"><span class="comment">#   INFO    200</span></span><br><span class="line"><span class="comment">#   NOTICE  250</span></span><br><span class="line"><span class="comment">#   WARNING 300</span></span><br><span class="line"><span class="comment">#   ERROR   400</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">callback_level</span> = <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; app设置</span></span><br><span class="line"><span class="section">[print]</span></span><br><span class="line"><span class="comment">; 用户名，可自定义</span></span><br><span class="line"><span class="attr">uname</span> =</span><br><span class="line"><span class="comment">; 账号别名，如果为空则默认使用登录账号作为标示</span></span><br><span class="line"><span class="attr">user_identity</span> =</span><br><span class="line"><span class="comment">; 多账号区别输出</span></span><br><span class="line"><span class="attr">multiple</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/posts/7569/</url>
    <content><![CDATA[<h2 id="docker-基础命令">docker 基础命令</h2>
<ul>
<li>启动docker</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>关闭docker</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>
<ul>
<li>重启docker</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<ul>
<li>查看docker 运行状态 ------如果是在运行中 输入命令后 会看到绿色的active</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>
<ul>
<li>查看docker 版本号信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>
<ul>
<li>查看docker 详细信息 --------此命令可以查看到docker 中容器运行个数 以及镜像个数等等</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>
<ul>
<li>设置开机启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
<ul>
<li>关闭开机启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable docker</span><br></pre></td></tr></table></figure>
<h2 id="docker-镜像命令">docker 镜像命令</h2>
<ul>
<li>查看自己服务器中docker 镜像列表</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<ul>
<li>拉取镜像 不加tag(版本号) 即拉取docker仓库中 该镜像的最新版本latest 加:tag 则是拉取指定版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名 </span><br><span class="line">docker pull 镜像名:tag</span><br></pre></td></tr></table></figure>
<ul>
<li>运行镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run 镜像名</span><br></pre></td></tr></table></figure>
<ul>
<li>删除镜像 ------当前镜像没有被任何容器使用才可以删除</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm [containerID] 删除容器</span><br><span class="line">docker rmi [imageID] 删除镜像</span><br></pre></td></tr></table></figure>
<h2 id="docker-容器命令">docker 容器命令</h2>
<ul>
<li>查看运行中的所有容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a </span><br></pre></td></tr></table></figure>
<ul>
<li>查看正在运行容器列表</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<ul>
<li>停止容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop 容器名/容器ID</span><br></pre></td></tr></table></figure>
<ul>
<li>重启容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart 容器ID/容器名</span><br></pre></td></tr></table></figure>
<ul>
<li>启动容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器ID/容器名</span><br></pre></td></tr></table></figure>
<ul>
<li>kill 容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker kill 容器ID/容器名</span><br></pre></td></tr></table></figure>
<ul>
<li>进入容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器名/容器ID /bin/bash</span><br><span class="line">docker attach 容器名/容器ID</span><br></pre></td></tr></table></figure>
<ul>
<li>退出容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-----直接退出  未添加-d(持久化运行容器)时执行此参数 容器会被关闭</span>  </span><br><span class="line">exit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 优雅退出 --- 无论是否添加-d参数执行此命令容器都不会被关闭</span></span><br><span class="line">Ctrl + p + q</span><br></pre></td></tr></table></figure>
<h2 id="docker-网络命令">docker 网络命令</h2>
<ul>
<li>列所有列表的网络</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network  ls</span><br></pre></td></tr></table></figure>
<ul>
<li>创建macvlan网络</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig # 查看网卡信息</span><br><span class="line"></span><br><span class="line">docker network create -d macvlan \ # 创建macvlan网络，使用macvlan网络驱动</span><br><span class="line">    --subnet=192.168.1.0/24 \      # 指定要桥接的网络地址</span><br><span class="line">    --gateway=192.168.1.1 \        # 指定网关</span><br><span class="line">    -o parent=eth0 \               # 设置要在宿主机上指定网卡</span><br><span class="line">    bridge-host                    # 网络名称</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leaning</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建Emby+JavScraper自动削刮番号整理</title>
    <url>/posts/61641/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://registry.hub.docker.com/r/emby/embyserver">emby/embyserver</a></p>
<p>Emby Server 是建立在其他流行的开源技术（例如 Service Stack、jQuery、jQuery mobile 和 .NET Core）之上的家庭媒体服务器。</p>
<p><a href="https://github.com/JavScraper/Emby.Plugins.JavScraper">JavScraper/Emby.Plugins.JavScraper</a></p>
<p>Emby/Jellyfin 的一个日本电影刮削器插件，可以从某些网站抓取影片信息。</p>
<span id="more"></span>
<h2 id="embyserver部署">Embyserver部署</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name embyserver \</span><br><span class="line">    --volume /volume1/docker/embyserver:/config \</span><br><span class="line">    --volume /volume1/documents:/mnt/share1 \</span><br><span class="line">    --volume /volume1/downloads:/mnt/share2 \</span><br><span class="line">    --network host \</span><br><span class="line">    --publish 8096:8096 \</span><br><span class="line">    --publish 8920:8920 \</span><br><span class="line">    --env UID=0 \</span><br><span class="line">    --env GID=0 \</span><br><span class="line">    --env GIDLIST=0,0 \</span><br><span class="line">    --device /dev/dri:/dev/dri \</span><br><span class="line">    --restart=always \</span><br><span class="line">    emby/embyserver:latest</span><br></pre></td></tr></table></figure>
<h3 id="选项参数说明">选项参数说明</h3>
<p><code>--name embyserver</code>- 容器名称，可自定义以示区分。</p>
<p><code>--volume /volume1/docker/embyserver:/config</code>- 配置目录映射，配置文件持久化。</p>
<p><code>--volume /volume1/documents:/mnt/share1</code>- 媒体目录1。</p>
<p><code>--volume /volume1/downloads:/mnt/share2</code>- 媒体目录2。</p>
<p><code>--network host</code> - 使用 host 网络模式。直接使用宿主机网络。同时支持启用DLNA和Lan唤醒功能。</p>
<p><code>--publish 8096:8096</code>- http端口。</p>
<p><code>--publish 8920:8920</code>- https端口。</p>
<p><code>--env UID=0</code>- 运行emby的UID，详见下文用户/组标识符。</p>
<p><code>--env GID=0-</code>运行emby的GID，同上。</p>
<p><code>--env GIDLIST=0,0</code>-一个以逗号分隔的额外gid列表，以运行emby。</p>
<p><code>--device /dev/dri:/dev/dri</code>- # VAAPI/NVDEC/NVENC渲染节点。</p>
<p><code>--restart=always</code>- 设置容器重启策略，详情参见 <a href="https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart">Docker 官方文档</a>。</p>
<h3 id="用户组标识符">用户/组标识符</h3>
<p>当<code>-v</code>主机操作系统和容器之间可能会出现使用卷（标志）权限问题时，我们通过允许您指定用户<code>PUID</code>和组来避免这个问题<code>PGID</code>。</p>
<p>确保主机上的任何卷目录都归您指定的同一用户所有。</p>
<p>在这种情况下<code>PUID=1000</code>和<code>PGID=1000</code>，找到你的用法<code>id user</code>如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> id dockeruser</span></span><br><span class="line">  uid=1000(dockeruser) gid=1000(dockergroup) 组=1000(dockergroup)</span><br><span class="line"><span class="meta">$</span><span class="bash"> id root</span></span><br><span class="line">  uid=0(root) gid=0(root) 组=0(root)</span><br></pre></td></tr></table></figure>
<h2 id="javscraper插件配置">JavScraper插件配置</h2>
<h3 id="部署修改版-jsproxy">部署修改版 jsproxy</h3>
<p>默认已经配置了一个代理，多人使用会超过免费的额度，建议自己配置；非中国区或全局穿墙用户，可禁用该代理。</p>
<p>目前已经支持 HTTP/HTTPS/SOCKS5 代理方式。</p>
<h4 id="部署方法">部署方法</h4>
<ol type="1">
<li>首页：<a href="https://workers.cloudflare.com/">https://workers.cloudflare.com</a></li>
<li>注册，登陆，<code>Start building</code>，取一个子域名，<code>Create a Worker</code>。</li>
<li>复制 <a href="https://github.com/JavScraper/Emby.Plugins.JavScraper/blob/master/cf-worker/index.js">index.js</a> 到左侧代码框，<code>Save and deploy</code>。如果正常，右侧应显示首页。</li>
<li>收藏地址框中的 <code>https://xxxx.子域名.workers.dev</code>，以后可直接访问。</li>
</ol>
<h4 id="计费">计费</h4>
<ul>
<li><p>后退到 <code>overview</code> 页面可参看使用情况。免费版每天有 10 万次免费请求，对于个人通常足够。</p></li>
<li><p>如果不够用，可注册多个 Worker，在 <code>conf.js</code> 中配置多线路负载均衡。或者升级到 高级版本，每月可用 1000 万次请求（超出部分 $0.5/百万次请求）。</p></li>
</ul>
<h3 id="插件安装">插件安装</h3>
<ol type="1">
<li><p><a href="https://github.com/JavScraper/Emby.Plugins.JavScraper/releases">点击这里下载最新的插件文件</a>，解压出里面的 <strong>JavScraper.dll</strong> 文件</p></li>
<li><p>通过WinScp等方式拷贝到 Emby 的插件目录，目录如下：</p>
<p><code>/volume1/docker/embyserver/plugins</code></p></li>
<li><p>需要<strong>重启Emby服务</strong>，插件才生效。</p></li>
</ol>
<h3 id="插件配置">插件配置</h3>
<ul>
<li><p>在 <strong>服务器</strong> 配置菜单中找到 <strong>Jav Scraper</strong>，或者 <strong>插件</strong> 菜单中找到 <strong>Jav Scraper</strong> 。</p></li>
<li><p>配置你自己的 jsproxy 地址 或者 HTTP/HTTPS/SOCKS5 代理。</p>
<blockquote>
<p>非中国区或全局穿墙用户，可禁用该代理。</p>
</blockquote></li>
<li><p>在<strong>媒体库</strong>中，找到你的<strong>日本电影</strong>的媒体库，并编辑：</p>
<ul>
<li><p>媒体库类型必须是<strong>电影</strong></p></li>
<li><p><strong>显示高级设置</strong></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/f3WZwt.png" alt="显示高级设置" /><figcaption aria-hidden="true">显示高级设置</figcaption>
</figure></li>
<li><p>在 <strong>Movie元数据下载器</strong> 中只 勾选 <strong>JavScraper</strong></p></li>
<li><p>在 <strong>Movie图片获取程序</strong> 中只 勾选 <strong>JavScraper</strong></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/f3WeTP.png" alt="勾选JavScraper" /><figcaption aria-hidden="true">勾选JavScraper</figcaption>
</figure></li>
</ul></li>
</ul>
<h3 id="插件使用">插件使用</h3>
<ul>
<li>添加新影片后：在<strong>媒体库</strong>中点 <strong>扫描媒体库文件</strong>；</li>
<li>如果需要更新全部元数据：在<strong>媒体库</strong>中点 <strong>刷新元数据</strong></li>
<li>如果需要更新某影片元数据：在<strong>影片</strong>中点 <strong>识别</strong> ，并输入番号查找。</li>
</ul>
<h3 id="头像">头像</h3>
<p>已经集成头像采集，可以在 <strong>控制台-高级-计划任务</strong> 中找到 <strong>JavScraper: 采集缺失的女优头像</strong>，并点击右边的三角符号开始启动采集任务。</p>
<h3 id="支持的采集来源">支持的采集来源</h3>
<ul>
<li><a href="https://www.javbus.com/">JavBus</a></li>
<li><a href="https://javdb.com/">JavDB</a></li>
<li><a href="https://www.mgstage.com/">MsgTage</a></li>
<li><a href="https://fc2club.com/">FC2</a></li>
<li><a href="https://avsox.host/">AVSOX</a></li>
<li><a href="https://www.jav321.com/">Jav123</a></li>
<li><a href="https://www.r18.com/">R18</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Emby</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Emby</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建百度贴吧自动签到（Tieba-Cloud-Sign）</title>
    <url>/posts/58593/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/MoeNetwork/Tieba-Cloud-Sign">MoeNetwork/Tieba-Cloud-Sign</a></p>
<p>在服务器上配置好就无需进行任何操作便可以实现贴吧的全自动签到。配合插件使用还可实现云灌水、点赞、封禁、删帖、审查等功能。</p>
<span id="more"></span>
<h2 id="使用docker-compose快速部署">使用Docker-Compose快速部署</h2>
<ol type="1">
<li><p>安装Docker</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure></p></li>
<li><p>安装 Docker Compose</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p></li>
<li><p>下载项目的docker-compose.yml</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/MoeNetwork/Tieba-Cloud-Sign/master/docker/docker-compose.yml</span><br></pre></td></tr></table></figure></p>
<p>docker-compose.yml参数说明</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;2.0&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: moenetwork/tieba-cloud-sign</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=1000  # 可修改为你想以什么用户运行caddy，该用户的UID 可通过 id 用户名 查询</span><br><span class="line">      - PGID=1000  # 可修改为你想以什么用户运行caddy，该用户的GID</span><br><span class="line">      - DB_HOST=db:3306</span><br><span class="line">      - DB_USER=root</span><br><span class="line">      - DB_PASSWD=janejane123456  # 数据库密码</span><br><span class="line">      - DB_NAME=tiebacloud        # 数据库名</span><br><span class="line">      - CSRF=true                 # 默认为true，如安装完成后需要上传插件则需要设置为false 。</span><br><span class="line">    #volumes:                                        # 如果重新创建或更新镜像希望保留之前的所有信息，请解除此两行注释</span><br><span class="line">      #- ./install.lock:/var/www/setup/install.lock  # 在当前目录下自行新建文件install.lock，内容为：1</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080 # 网页访问的端口号可按需修改</span><br><span class="line">    links:</span><br><span class="line">      - db</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line"></span><br><span class="line">  db:</span><br><span class="line">    image: agrozyme/mariadb  #如若此镜像在你的平台上不可用，可以自行在docker hub上搜索你平台可用的mariadb镜像</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_DATABASE=tiebacloud           # 数据库名</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=janejane123456  # 数据库密码</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql:/var/lib/mysqlb             # 数据库存储路径，可自定义</span><br></pre></td></tr></table></figure></p></li>
<li><p>开始部署容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>正确部署返回情况为</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fKzWZD.jpg" alt="返回情况" /><figcaption aria-hidden="true">返回情况</figcaption>
</figure></li>
<li><p>docker容器配置完成，接下来进入网页配置。 ## 网页配置</p></li>
<li><p>访问输入ip+端口号，进入网页配置</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fKgr3q.jpg" alt="返回情况" /><figcaption aria-hidden="true">返回情况</figcaption>
</figure></li>
<li><p>点击<code>前往安装</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fKgsg0.jpg" alt="返回情况" /><figcaption aria-hidden="true">返回情况</figcaption>
</figure></li>
<li><p>点击<code>我接受</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fKgDCn.jpg" alt="返回情况" /><figcaption aria-hidden="true">返回情况</figcaption>
</figure></li>
<li><p>点击<code>确认</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fKg04s.jpg" alt="返回情况" /><figcaption aria-hidden="true">返回情况</figcaption>
</figure></li>
<li><p>点击<code>下一步</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fKgwNj.jpg" alt="返回情况" /><figcaption aria-hidden="true">返回情况</figcaption>
</figure></li>
<li><p>点击<code>是的，我是</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fKgyvV.jpg" alt="返回情况" /><figcaption aria-hidden="true">返回情况</figcaption>
</figure></li>
<li><p>点击<code>下一步</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fMpa4J.jpg" alt="返回情况" /><figcaption aria-hidden="true">返回情况</figcaption>
</figure></li>
<li><p>输入站点创始人信息，完成后点击<code>下一步</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fKgcuT.jpg" alt="返回情况" /><figcaption aria-hidden="true">返回情况</figcaption>
</figure></li>
<li><p>安装完成，点击<code>进入我的云签到</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fKggDU.jpg" alt="返回情况" /><figcaption aria-hidden="true">返回情况</figcaption>
</figure></li>
<li><p>输入第8步中的用户名和密码，也可使用邮箱地址登录，点击 立即登录</p></li>
</ol>
<h2 id="完成效果图">完成效果图</h2>
<p>管理页面： <img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fKgWE4.jpg" alt="管理页面" /></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Voice保号方法和保号教程</title>
    <url>/posts/50930/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>限于谷歌政策，我们需要对Google Voice保号，否则GV号会被回收，即9个月内不使用GV接打电话或收发短信，号码就会被回收。现在，美国虚拟号码 Google Voice 保号方法也发生了变化，有些老方法已经失效，于是我验证并整理出一篇最新的 Google Voice 保号教程。</p>
<span id="more"></span>
<h2 id="gv号回收政策">GV号回收政策</h2>
<p>以下是<a href="https://www.google.com/googlevoice/program-policies.html">Google官方关于 Google Voice 号码的回收政策</a>：</p>
<blockquote>
<p>如果您有Google语音号码，但在9个月内既没有拨出电话或收到来电，也没有发送或收到短信，则Google会收回该号码。不过，Google不会收回已转携至Google语音服务或申请了永久使用权的号码。</p>
</blockquote>
<h2 id="保号方法">保号方法</h2>
<h3 id="gv号定期互发短信">GV号定期互发短信</h3>
<p>手动互发短信是最省钱有效的Google Voice保号方法，但你是不是觉得很麻烦？万一忘记了怎么办？其实，这都不是问题。我们只需要一个手机闹钟App（如时光序），让它每3个月提醒我们一次，自己的多个号互发。如果你只有一枚GV号，那么可以跟亲朋好友的GV号互发短信或跟TG群需要保号的其他小伙伴互发短信保号。</p>
<h3 id="拨打美国免费客服电话">拨打美国免费客服电话</h3>
<p>如果你觉得无聊，也可以拨打一下美国免费客服电话来进行 Google Voice 保号。免费客服号码如下：</p>
<ul>
<li>美国之声：(213)493-0288</li>
<li>Apple 客服： (800)275-2273</li>
<li>微软客服：(800) 642-7676</li>
<li>亚马逊客服：(206)266-2992</li>
</ul>
<h3 id="订阅广告推送短信">订阅广告推送短信</h3>
<p>这个方式是不是很奇葩？你只需要发送短信订阅一些广告服务，那么广告公司会定期向你的GV号发送广告推送短信。具体操作方法如下：</p>
<ol type="1">
<li>发送“auto”至“67135”，然后回复“Y”，订阅广告推送短信；然后，每周会接收4条 Autozone（一家汽车零件品牌）的广告推送短信。</li>
<li>发送“JOIN”到“22122”，每月会接收2条 Starbucks（星巴克）的广告推送短信；如果要停止订阅，发送 “STOP”即可。</li>
<li>发送“code”到“25666”，再回复”PROMO” 每月会接收 Bloomingdale’s 的广告推送短信；如果要停止订阅，发送 “STOP”即可。</li>
</ol>
<h3 id="买断成永久号">买断成永久号</h3>
<p>如果你不喜欢手动互发保号，也不喜欢订阅广告，又担心会忘记进行Google Voice保号，那么我建议你花30刀买断即可，花钱买心安。大致原理和注意事项如下：</p>
<ul>
<li>Google Voice永久号购买分2步，先支付10刀增加一个新号，然后花费20刀买为永久号。</li>
<li>Google Fi 转回 Google Voice 的号是永久的，再加10刀买一个号就是双永久号了。其它实体卡(如t-mobile)转到google voice的号码也是永久号，不会被回收。</li>
<li>永久号不代表可以随便乱来，如发送大量垃圾短信，大量呼出到不同号码等违背 Google Voice 政策条款的行为，Google也会收回你的号码，详见Google官方文档：https://www.google.com/googlevoice/program-policies.html</li>
<li>10刀买的副号是可以转出到其它google voice帐号的，不影响主号的永久使用。</li>
<li>永久号最好是不要转出，因为Google没有条款写明永久号转出也是永久号。</li>
<li>经测试，Google Voice 同时可以接收2个号码的短信，但只有一个能接电话，另一个自动转到语音信箱。</li>
</ul>
<h3 id="实体电话卡号码转入">实体电话卡号码转入</h3>
<p>如果你手上有一些美国的实体电话卡（如Lyca莱卡、Google Fi 电话卡等），觉得月租太贵不想续费了，那么可以将这些号码转入到 Google Voice。这样不仅可以保留原来的号码，而且已注册的网站账号基本不受影响；另外，原实体电话卡号码转入到 Google voice 后，这个号码就是永久号了，也没有月租。</p>
<p><strong>注意事项：</strong>Google Fi 的号码转入到 Google Voice 是免费的，而Lyca莱卡转入到 Google Vocie 需要收取20美元一次性的转入费用。</p>
<h3 id="使用ifttt自动保号">使用IFTTT自动保号</h3>
<p>使用IFTTT保号是最省心又省钱的Google Voice保号方法，具体操作步骤如下：</p>
<ol type="1">
<li>打开<a href="https://ifttt.com/">IFTTT网站</a>，点击右上方“Get start”按钮。</li>
<li>选择“Continue With Google”，登陆自己的登陆账号，登入后点击“Get More”按钮。</li>
<li>搜索框输入 Keep Google Voice，找到有“Keep Google Voice Active”字样的项，然后点击“Connect”按钮，将自己的GV账号连接到此程序。</li>
<li>先将自己的 Google Voice 登陆到网页或手机上，然后在输入框输入要保号的 Google Voice 号码，一定要先登录GV号，否则可能收不到电话。</li>
<li>我们点击“Send PIN”之后会有电话呼入到 Google Voice号码，请接听语音播报4位PIN码，然后将听到的PIN码填入此处。如果接通了电话但未听清，也可以在接听过程中按数字键盘2键，改为短信收PIN验证码，完成后点击“Connect”按钮（我建议你使用短信接收）。</li>
<li>下一步选择时区，可以选择美国当地时区，也可以随意设定一个，然后点击“Connect”按钮。</li>
<li>当显示“Connected”处于启用状态时，表示创建完成了。默认是会每隔一个月发送一条短信；若想修改发送的频率，可以点击右上方的“Settings”修改。具体操作：依次点击“Delete” – “Convert”，就会出现“Edit”，点击“Edit”，这里就可以指定在每月的第几天，几点几分来发送此保号短信了。设定好后，更新定时器，然后保存。</li>
</ol>
<p>至此使用IFTTT每月定时自动发送短信的保号操作就成功了。</p>
<h2 id="推荐方法">推荐方法</h2>
<p>今天，我分享这么多Google Voice保号方法，你最喜欢哪一种？如果你是土豪用户，那么我强烈建议你直接买断，一劳永逸，方便又省心；如果你不想花钱，动手能力还不错，那么我推荐你使用IFTTT保号，一次操作，永久受益；如果你既不想花钱，动手能力又差，那么你最好选择手动互发短信或拨打美国免费客服电话或订阅广告短信了；如果你即是土豪，又有现成的美国实体电话卡，但不想继续续费了，又想要这个实体卡号码，那么转入 Google Voice 是最佳选择了。</p>
<p><strong>温馨提醒：</strong>如果GV号码几个月只接收消息，而不登录发送短信或拨打电话，你仍旧会收到Google官方要回收GV号码的提示邮件。</p>
]]></content>
      <categories>
        <category>Google Voice</category>
      </categories>
      <tags>
        <tag>Google Voice</tag>
      </tags>
  </entry>
  <entry>
    <title>NSFW在线观看与资源搜索</title>
    <url>/posts/10965/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>NSFW！注意营养！</p>
<span id="more"></span>
<h2 id="中文在线">中文在线</h2>
<p><a href="https://jable.tv">https://jable.tv</a></p>
<p><a href="https://7mmtv.tv/zh">https://7mmtv.tv/zh</a></p>
<p><a href="https://www.jav777.xyz/page1.html">https://www.jav777.xyz/page1.html</a></p>
<p><a href="https://www.xvideos.com">https://www.xvideos.com</a></p>
<p><a href="https://www.pornhub.com">https://www.pornhub.com</a></p>
<p><a href="https://avgle.com">https://avgle.com</a></p>
<p>91论坛：<a href="http://www.91porn.com">http://www.91porn.com</a></p>
<p><a href="https://netflav.com/chinese-sub">https://netflav.com/chinese-sub</a></p>
<p><a href="https://pigav.com">https://pigav.com</a></p>
<p>各个国家：<a href="https://xhamster.com">https://xhamster.com</a></p>
<h2 id="资源">资源</h2>
<p><a href="https://www.javbus.com">https://www.javbus.com</a></p>
<p><a href="https://javdb.com">https://javdb.com</a></p>
<p>http://www.javlibrary.com/cn</p>
<p><a href="https://www.141jav.com">https://www.141jav.com</a></p>
<p><a href="http://www.javjunkies.com">http://www.javjunkies.com</a></p>
<p><a href="http://btnets.net">http://btnets.net</a></p>
<p>草榴：<a href="http://t66y.com">http://t66y.com</a></p>
<p>桃花族：<a href="http://thzbt.us">http://thzbt.us</a></p>
<p>色花堂：<a href="https://www.sehuatang.net">https://www.sehuatang.net</a></p>
<p>油猴脚本:</p>
<p><a href="https://sleazyfork.org/zh-CN/scripts/25781">https://sleazyfork.org/zh-CN/scripts/25781</a></p>
<p>开源AV电影管理系统:</p>
<p><a href="https://github.com/guyueyingmu/avbook">https://github.com/guyueyingmu/avbook</a></p>
<p>AV网站大全：</p>
<p><a href="https://theporndude.com/">https://theporndude.com/</a></p>
]]></content>
      <categories>
        <category>NSFW</category>
      </categories>
      <tags>
        <tag>NSFW</tag>
      </tags>
  </entry>
  <entry>
    <title>Netkeeper-OpenWrt——专注闪讯上网</title>
    <url>/posts/56903/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/Maskbugzero/Netkeeper-OpenWrt">Maskbugzero/Netkeeper-OpenWrt</a></p>
<p>使用 GitHub Actions 云编译 带有 闪讯拨号插件（Netkeeper）的OpenWrt编译项目——适用于x86_64。</p>
<span id="more"></span>
<h2 id="固件下载">固件下载</h2>
<p><a href="https://github.com/Maskbugzero/Netkeeper-OpenWrt/releases">Openwrt-x86-64</a></p>
<h3 id="文件说明">文件说明</h3>
<table>
<colgroup>
<col style="width: 56%" />
<col style="width: 43%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">文件名</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">sha256sums</td>
<td style="text-align: left;">固件完整性校验文件</td>
</tr>
<tr class="even">
<td style="text-align: left;">config.buildinfo</td>
<td style="text-align: left;">OpenWrt 编译配置文件</td>
</tr>
<tr class="odd">
<td style="text-align: left;">packages-server.zip</td>
<td style="text-align: left;">IPK 软件包归档</td>
</tr>
<tr class="even">
<td style="text-align: left;">openwrt-x86-64-generic.manifest</td>
<td style="text-align: left;">固件内已集成软件包列表</td>
</tr>
<tr class="odd">
<td style="text-align: left;">openwrt-x86-64-generic-generic-rootfs.tar.gz</td>
<td style="text-align: left;">RootFS 文件</td>
</tr>
<tr class="even">
<td style="text-align: left;">openwrt-x86-64-generic-rootfs-ext4.img.gz</td>
<td style="text-align: left;">不带引导的 RootFS 镜像</td>
</tr>
<tr class="odd">
<td style="text-align: left;">openwrt-toolchain-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.bz2</td>
<td style="text-align: left;">OpenWrt 工具链</td>
</tr>
<tr class="even">
<td style="text-align: left;">openwrt-sdk-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz</td>
<td style="text-align: left;">OpenWrt SDK</td>
</tr>
<tr class="odd">
<td style="text-align: left;">openwrt-imagebuilder-x86-64.Linux-x86_64.tar.xz</td>
<td style="text-align: left;">OpenWrt Image Builder</td>
</tr>
<tr class="even">
<td style="text-align: left;">openwrt-x86-64-generic-squashfs-combined.vdi</td>
<td style="text-align: left;">VDI 虚拟磁盘映像 (Legacy 引导)</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>openwrt-x86-64-generic-squashfs-combined.vmdk</strong></td>
<td style="text-align: left;"><strong>VMDK 虚拟磁盘映像 (Legacy 引导)</strong></td>
</tr>
<tr class="even">
<td style="text-align: left;">openwrt-x86-64-generic-squashfs-combined-efi.vdi</td>
<td style="text-align: left;">VDI 虚拟磁盘映像 (UEFI 引导)</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>openwrt-x86-64-generic-squashfs-combined-efi.vmdk</strong></td>
<td style="text-align: left;"><strong>VMDK 虚拟磁盘映像 (UEFI 引导)</strong></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>openwrt-x86-64-generic-squashfs-combined.img.gz</strong></td>
<td style="text-align: left;"><strong>Squashfs 格式安装 / 升级固件 (Legacy 引导)</strong></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>openwrt-x86-64-generic-squashfs-combined-efi.img.gz</strong></td>
<td style="text-align: left;"><strong>Squashfs 格式安装 / 升级固件 (UEFI 引导)</strong></td>
</tr>
</tbody>
</table>
<h2 id="登录页面">登录页面</h2>
<ul>
<li>用户名：root 密码为空 管理IP：192.168.1.1</li>
</ul>
<h2 id="核心功能">核心功能</h2>
<ol type="1">
<li>Netkeeper插件使用说明</li>
<li>自动获取闪讯密码并填写</li>
</ol>
<h2 id="使用方法">使用方法</h2>
<h4 id="初始配置">初始配置</h4>
<ol type="1">
<li><p>默认Lan管理IP为<code>192.168.1.1</code>，默认第一个网口为 LAN，第二个为 WAN</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108241449923.png" alt="登录页面" /><figcaption aria-hidden="true">登录页面</figcaption>
</figure></li>
<li><p>直接登录，之后至系统 -&gt; 管理权 页面修改默认密码，点击保存应用后立即生效</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108241451530.png" alt="image-20210824145123459" /><figcaption aria-hidden="true">image-20210824145123459</figcaption>
</figure></li>
</ol>
<h3 id="netkeeper插件使用说明">Netkeeper插件使用说明</h3>
<h4 id="普通插件">普通插件</h4>
<p>在 网络 -&gt; 接口 -&gt; WAN编辑 -&gt; 选择闪讯拨号 -&gt; 确认切换 后</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108241455976.png" alt="切换为闪讯拨号" /><figcaption aria-hidden="true">切换为闪讯拨号</figcaption>
</figure>
<p>然后输入 用户名 和 密码 选择对应的 闪讯插件 保存应用即可拨号</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108241455835.png" alt="选择对应的闪讯插件" /><figcaption aria-hidden="true">选择对应的闪讯插件</figcaption>
</figure>
<h4 id="拦截插件">拦截插件</h4>
<p>在 网络 -&gt; 接口 -&gt; WAN编辑 -&gt; 选择闪讯拨号 -&gt; 确认切换 后</p>
<p>选择 闪讯拦截 插件并开启闪讯拦截服务后，在PC端使用闪讯客户端拨号，会自动获取用户名与密码并拨号</p>
<p>可以不用填写 用户名 和 密码</p>
<p>在 服务 -&gt; 闪讯拦截 开启闪讯拦截服务</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108241457718.png" alt="开启闪讯拦截服务" /><figcaption aria-hidden="true">开启闪讯拦截服务</figcaption>
</figure>
<h4 id="特别鸣谢">特别鸣谢</h4>
<p>netkeeper的核心源码来自于miao1007的<a href="https://github.com/miao1007/Openwrt-NetKeeper">Openwrt-NetKeeper</a></p>
<p>编译使用的源码来自于CCnut的<a href="https://github.com/CCnut/feed-netkeeper">feed-netkeeper</a> ### 自动获取闪讯密码并填写</p>
<p>此功能须配合kuretru的<a href="https://github.com/kuretru/SingleNet-Robot">SingleNet-Robot</a>项目。由于本项目编译时以添加luci-mod-rpc，所以可直接使用推荐的LuCI服务端。</p>
<h4 id="简单使用方法">简单使用方法：</h4>
<ol type="1">
<li>去<a href="https://github.com/kuretru/SingleNet-Robot/releases">项目</a>下载编译好的apk文件，并安装至手机</li>
<li>点击<strong>服务器配置</strong>，输入服务端地址'http://192.168.1.1' 及服务端网络接口名称'wan'</li>
<li>服务端类型选择<strong>Luci Rpc</strong>，配置路由用户名密码</li>
<li>点击<strong>测试服务器</strong>，若成功点击保存并退出，若失败请仔细检查服务端地址是否设置正确</li>
<li>在调试面板输入当前的闪讯账号及密码，并点击<strong>手动更新用户名及密码</strong>查看是否自动更新成功</li>
<li>点击<strong>注册定时任务</strong>以开启自动更新密码功能，无需此功能可不点击注册定时任务。若点击注册定时任务，可设置更新时间间隔。</li>
</ol>
<p><strong>PS</strong>：定制系统如MIUI等，需给予app足够的权限，其中设置sim卡时，若未给app <strong>获取手机信息</strong> 权限，将无法测试并造成闪退，且无法保存服务器数据。若未识别到收到的闪讯上网密码，则未给app <strong>读取通知类短信</strong> 权限。</p>
<p><strong>PS</strong>：建议使用较为廉价的备用机，关闭移动数据，打开WIFI开关，只用于更新闪讯密码，可实现无缝更新闪讯密码。</p>
<h4 id="特别鸣谢-1">特别鸣谢</h4>
<p>kuretru的<a href="https://github.com/kuretru/SingleNet-Robot">SingleNet-Robot</a></p>
<h3 id="软路由写盘">软路由写盘</h3>
<ol type="1">
<li>将 img 文件上传</li>
<li>输入命令 <code>dd if=/tmp/op.img of=/dev/sda</code> 回车（op.img 为固件的名称）</li>
<li>最后输入 <code>reboot</code> 重启路由器</li>
</ol>
<h2 id="项目基于">项目基于</h2>
<ul>
<li><a href="https://github.com/CCnut/feed-netkeeper">feed-netkeeper</a></li>
<li><a href="https://github.com/kuretru/SingleNet-Robot">SingleNet-Robot</a></li>
<li><a href="https://github.com/openwrt/openwrt">OpenWrt</a></li>
<li><a href="https://github.com/P3TERX/Actions-OpenWrt">P3TERX/Actions-OpenWrt</a></li>
</ul>
]]></content>
      <categories>
        <category>OpenWr</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows常用软件</title>
    <url>/posts/40062/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>要说Windows 平台有哪些值得推荐的常用软件，我整理了一些自己用后感觉还不错的软件，全文共有八大类，包括：<strong>多媒体类、浏览器类、图形图像类、聊天软件类、办公软件类 、系统必备类、常用工具类、博客相关类</strong> 。</p>
<span id="more"></span>
<h2 id="多媒体">多媒体</h2>
<ul>
<li><p>PotPlayer:</p>
<p>视频播放</p>
<p>官网:https://potplayer.daum.net/</p>
<p>下载地址:https://pan.lanzoui.com/b0f1k59qh</p></li>
<li><p>foobar2000:</p>
<p>音乐播放</p>
<p>官网:https://www.foobar2000.org/</p>
<p>下载地址:http://blog.sina.com.cn/go2spa</p></li>
</ul>
<h2 id="浏览器">浏览器</h2>
<ul>
<li><p>Google Chrome:</p>
<p>官网:https://www.google.com/chrome/</p></li>
<li><p>Microsoft Edge:</p>
<p>官网:https://www.microsoft.com/zh-cn/edge</p></li>
<li><p>Cent Browser:</p>
<p>个人常用</p>
<p>官网:https://www.centbrowser.cn/</p></li>
</ul>
<h2 id="图形图像">图形图像</h2>
<ul>
<li><p>2345看图王:</p>
<p>附带PDF查看器</p>
<p>官网:https://pic.2345.cc/</p>
<p>下载地址:https://pan.lanzoui.com/iUuJ1oeuo6d</p></li>
<li><p>WinSnap:</p>
<p>截图软件</p>
<p>官网:https://www.ntwind.com/software/winsnap.html</p></li>
</ul>
<h2 id="聊天软件">聊天软件</h2>
<ul>
<li><p>微信:</p>
<p>官网:https://weixin.qq.com/</p>
<p>下载地址:https://pc.weixin.qq.com/</p></li>
<li><p>QQ:</p>
<p>官网:https://im.qq.com/index</p>
<p>下载地址:https://im.qq.com/download</p></li>
<li><p>Tim:</p>
<p>官网:https://office.qq.com/</p>
<p>下载地址:https://office.qq.com/download.html</p></li>
<li><p>YY语音:</p>
<p>官网:https://www.yy.com/web/pcyy_download/</p>
<p>下载地址:https://pan.lanzoui.com/ieLQmrqbv9e</p></li>
<li><p>Telegram:</p>
<p>官网:https://telegram.org/</p>
<p>下载地址:https://desktop.telegram.org/</p></li>
</ul>
<h2 id="办公软件">办公软件</h2>
<ul>
<li><p>Microsoft Office:</p>
<p>官网:https://www.office.com/</p>
<p>下载地址:https://otp.landian.vip/zh-cn/download.html</p></li>
<li><p>WPS Office:</p>
<p>官网:https://www.wps.cn/</p>
<ul>
<li><p>WPS Office 2019:</p>
<p>WPS软件政府专用（2019版）石家庄市人力资源和社会保障局：<a href="http://rsj.sjz.gov.cn/col/1515395624617/2019/06/10/1560135309935.html">官方下载</a></p>
<p>WPS Office 2019 海南省直属机关单位专用（11.8.2.8875）：<a href="http://wpspro.support.wps.cn/gov/hainan/installation/WPS%20Office%202019%20海南省直属机关单位专用（11.8.2.8875）.exe">官方下载</a></p>
<p>WPS Office 2019 专业版（潮州市党政机关单位）（11.8.2.8411）：<a href="http://wpspro.support.wps.cn/gov/guangdong/chaozhou/">官方下载</a> 密码：265980</p></li>
<li><p>WPS Office 2016:</p>
<p>WPS Office 2016 云南省直属党政机关专用版：https://pan.baidu.com/s/1xDYRAD6vl911OtxFNDoBQw 密码：9bt3</p></li>
</ul></li>
</ul>
<h2 id="系统必备">系统必备</h2>
<ul>
<li><p>Dism++:</p>
<p>系统优化软件</p>
<p>官网:http://www.chuyu.me/zh-Hans/</p></li>
<li><p>Bandizip:</p>
<p>解压软件</p>
<p>官网:http://www.bandisoft.com/bandizip/</p></li>
<li><p>火绒:</p>
<p>系统安全软件</p>
<p>官网:https://www.huorong.cn/</p></li>
<li><p>Deep Freeze:</p>
<p>系统还原软件</p>
<p>官网:https://www.faronics.com/en-uk/products/deep-freeze/standard</p></li>
<li><p>Everything:</p>
<p>本地文件搜索</p>
<p>官网:https://www.voidtools.com/zh-cn/</p></li>
</ul>
<h2 id="常用工具">常用工具</h2>
<ul>
<li><p>Bandicam:</p>
<p>录屏软件</p>
<p>官网:https://www.bandicam.cn/</p>
<p>下载地址:https://pan.lanzoui.com/b0f197pud</p></li>
<li><p>Clash:</p>
<p>不可描述</p>
<p>官网:https://github.com/Fndroid/clash_for_windows_pkg</p>
<p>下载地址:https://github.com/Fndroid/clash_for_windows_pkg/releases</p></li>
<li><p>FFRenamePro:</p>
<p>批量改名</p>
<p>官网:http://www.ffhome.com/</p>
<p>下载地址:http://www.ffhome.com/works/1406.html</p></li>
<li><p>HiBitUninstaller:</p>
<p>软件卸载</p>
<p>官网:https://hibitsoft.ir/Uninstaller.html</p>
<p>下载地址:https://hibitsoft.ir/Uninstaller.html</p></li>
<li><p>KeePass:</p>
<p>密码管理</p>
<p>官网:https://keepass.info/</p>
<p>下载地址:https://keepass.info/download.html</p></li>
<li><p>MyHash:</p>
<p>文件校验</p>
<p>官网:https://github.com/drag0n-app/MyHash</p></li>
<li><p>Netch:</p>
<p>游戏加速</p>
<p>官网:https://github.com/netchx/Netch</p>
<p>下载地址:https://github.com/netchx/netch/releases</p></li>
<li><p>SumatraPDF:</p>
<p>PDF查看</p>
<p>官网:https://www.sumatrapdfreader.org/free-pdf-reader</p>
<p>下载地址:https://www.sumatrapdfreader.org/download-free-pdf-viewer</p></li>
<li><p>WinSCP:</p>
<p>ssh链接</p>
<p>官网:https://winscp.net/eng/index.php</p>
<p>下载地址:https://winscp.net/eng/download.php</p></li>
</ul>
<h2 id="博客相关">博客相关</h2>
<ul>
<li><p>typora:</p>
<p>博客撰写</p>
<p>官网:https://typora.io/</p>
<p>下载地址:https://typora.io/#windows</p></li>
<li><p>PicGo:</p>
<p>官网:https://picgo.github.io/PicGo-Doc/</p>
<p>下载地址:https://github.com/Molunerfinn/PicGo/releases</p></li>
<li><p>GitHubDesktop:</p>
<p>官网:https://desktop.github.com/</p></li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows部署ArchiSteamFarm挂卡</title>
    <url>/posts/30478/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>ASF 是一个 C# 应用程序，主要目的是同时从多个帐户空闲 Steam 卡。与 Idle Master 在给定时间仅适用于一个帐户不同，同时需要 Steam 客户端在后台运行并启动模拟“游戏”状态的其他进程，ASF 不需要任何 Steam 客户端在后台运行，也不会启动任何额外的过程，并用于一次处理无限的 Steam 帐户。</p>
<span id="more"></span>
<p><a href="https://github.com/JustArchiNET/ArchiSteamFarm">项目地址</a></p>
<h2 id="使用方法">使用方法</h2>
<h3 id="生成-asf-的配置文件">生成 ASF 的配置文件</h3>
<p>首先在 <a href="https://justarchinet.github.io/ASF-WebConfigGenerator">在线配置文件生成器</a> 生成 ASF 运行所需的配置文件，分为全局配置文件 ASF.JSON 和 BOT 配置文件 BOTNAME.JSON。</p>
<h4 id="生成全局配置文件">生成全局配置文件</h4>
<p><strong>ASF.JSON</strong> 的生成结构如下，此处主要配置 ASF 的运行行为，和管理员账户用于通过聊天窗口或 IPC 执行相应指令。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;SteamOwnerID&quot;</span>: xxxxxxxxxxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="生成-bot-配置文件">生成 BOT 配置文件</h4>
<p><strong>BOTNAME.JSON</strong> 的配置在 ASF 运行中是相互独立的，如果你有多个账户请分别为它们设置。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;SteamLogin&quot;</span>: <span class="string">&quot;xxxxxxxxx&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SteamPassword&quot;</span>: <span class="string">&quot;xxxxxxxxxxx&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="安装-asf">安装 ASF</h3>
<p>在 <strong><a href="https://github.com/JustArchiNET/ArchiSteamFarm/releases/latest">ASF 发布页面</a></strong>下载最新版本吗，下载 <code>ASF-win-x64</code> 包。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110012319772.png" alt="Assets" /><figcaption aria-hidden="true">Assets</figcaption>
</figure>
<p>将 ASF 解压到一个<strong>独立的文件夹</strong>中</p>
<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">C:\ASF-win-x64</span><br><span class="line">    ├── config (存放配置文件)</span><br><span class="line">    ├── logs (运行日志)</span><br><span class="line">    ├── plugins (插件目录)</span><br><span class="line">    ├── www (IPC管理网页)</span><br><span class="line">    ├── ArchiSteamFarm.exe (运行文件)</span><br><span class="line">    └── (...)</span><br></pre></td></tr></table></figure>
<h3 id="配置-asf">配置 ASF</h3>
<p>将第一步生成的 ASF.JSON 和 BOT.JSON 复制到 ASF 目录中的 config 文件夹中。</p>
<h3 id="运行-asf">运行 ASF</h3>
<p>双击ArchiSteamFarm.exe</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110161153715.png" alt="首次运行" /><figcaption aria-hidden="true">首次运行</figcaption>
</figure>
<p>输入Steam手机令牌，回车</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110161154341.png" alt="登陆成功" /><figcaption aria-hidden="true">登陆成功</figcaption>
</figure>
<h3 id="使用-asf-ui">使用 ASF-ui</h3>
<blockquote>
<p>ASF-ui 是 ASF 较为友好的 web 交互平台，通过 IPC 进行通讯，可以在 web 页面管理和查看 ASF 的运行。</p>
</blockquote>
<p>要使用 ASF-ui，您需要启用 <code>IPC</code>，自 V5.1.0.0 版本开始，ASF 已经默认启用。 运行 ASF 后，您应该能看到表明 IPC 接口成功启动的确认消息：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110012324530.png" alt="IPC" /><figcaption aria-hidden="true">IPC</figcaption>
</figure>
<p>只要 ASF 还在运行，您就可以在同一台机器上，通过<strong><a href="http://localhost:1242/">这个链接</a></strong>访问 ASF 的 IPC 接口。 您可以使用 ASF-ui 进行各种操作，例如直接编辑配置文件或发送<strong><a href="https://github.com/JustArchiNET/ArchiSteamFarm/wiki/Commands-zh-CN">命令</a></strong>。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110161155782.png" alt="ASF-ui" /><figcaption aria-hidden="true">ASF-ui</figcaption>
</figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>ArchiSteamFarm</tag>
        <tag>ASF</tag>
        <tag>Steam</tag>
      </tags>
  </entry>
  <entry>
    <title>一句命令激活Windows</title>
    <url>/posts/26281/</url>
    <content><![CDATA[<h2 id="服务器地址">服务器地址</h2>
<p>kms.03k.org</p>
<h2 id="项目说明">项目说明</h2>
<p>服务作用：在线激活windows和office</p>
<p>适用对象：VOL版本的windows和office</p>
<p>优点：在线激活 省时省力 无需安装软件 干净环保 命令简单</p>
<p>缺点：服务器不挂的话自动重新授权到服务器</p>
<span id="more"></span>
<h2 id="使用方法">使用方法</h2>
<p>一般来说，只要确保的下载的是VL批量版本并且没有手动安装过任何key，你只需要使用管理员权限运行cmd执行一句命令就足够：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slmgr /skms kms.03k.org</span><br></pre></td></tr></table></figure>
<p>这句命令的意思是，设置kms服务器地址（set kms），设置成功如下：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108291745040.png" alt="kms" /><figcaption aria-hidden="true">kms</figcaption>
</figure>
<p>然后去计算机属性或者控制面板其他的什么的地方点一下激活就好了。</p>
<p>当然，如果你懒得点，可以多打一句命令手动激活：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108291746696.png" alt="slmgr-ato" /><figcaption aria-hidden="true">slmgr-ato</figcaption>
</figure>
<p>这句命令的意思是，马上对当前设置的key和服务器地址等进行尝试激活操作。</p>
<p>kms激活的前提是你的系统是批量授权版本，即VL版，一般企业版都是VL版，专业版有零售和VL版，家庭版旗舰版OEM版等等那就肯定不能默认直接用kms激活。一般建议从<a href="http://www.itellyou.cn/">msdn我告诉你</a>上面下载系统，这里放个图举例说明哪些是VL版本：</p>
<p>VL版本的镜像一般内置GVLK key，用于kms激活。如果你手动输过其他key，那么这个内置的key就会被替换掉，这个时候如果你想用kms，那么就需要把GVLK key输回去。对于Windows，在不太方便找到VL版本的时候，也可以用相同版本的导入gvlk key来代替，比如<a href="https://go.microsoft.com/fwlink/?LinkId=691209">从微软官网下载win10专业版</a>，然后导入gvlk key来启用kms通道。首先，</p>
<p>在下面的列表获取你对应版本产品用于kms激活的gvlk KEY。同样地，位于该列表里的产品都可以用kms激活。</p>
<p>对于下面列表里面含有的产品的VL版本或者能使用key进入kms通道的产品，都支持使用kms激活。另外对于Window7，如果你的bios含有slic表，会有无法使用kms的情况。</p>
<blockquote>
<p>office2016 https://technet.microsoft.com/zh-cn/library/dn385360(v=office.16).aspx</p>
<p>office2013 https://technet.microsoft.com/ZH-CN/library/dn385360.aspx</p>
<p>office2010 https://technet.microsoft.com/ZH-CN/library/ee624355(v=office.14).aspx</p>
<p>Server/Windows https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys</p>
</blockquote>
<p>如果不知道自己的系统是什么版本，可以运行以下命令查看系统版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wmic os get caption</span><br></pre></td></tr></table></figure>
<p>得到对应key之后，使用管理员权限运行cmd执行安装key：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slmgr /ipk xxxxx-xxxxx-xxxxx-xxxxx</span><br></pre></td></tr></table></figure>
<p>然后跟上面说的一样设置kms服务器地址，激活。</p>
<h2 id="如果遇到报错请检查">如果遇到报错，请检查：</h2>
<ol type="1">
<li>你的系统/OFFICE是否是批量VL版本</li>
<li>是否以管理员权限运行CMD</li>
<li>你的系统/OFFICE是否修改过KEY/未安装GVLK KEY</li>
<li>检查你的网络连接</li>
<li>本地的解析不对,或网络问题（点击检查服务器是否能连上）</li>
<li>根据出错代码自己搜索出错原因</li>
<li>0x80070005错误一般是你没用管理员权限运行CMD</li>
</ol>
<h2 id="kms-地址列表">KMS 地址列表</h2>
<p><a href="https://www.coolhub.top/tech-articles/kms_list.html">kms_list</a></p>
<p>列表数据半小时更新一次，点击表头可以进行排序。建议使用成功率高且延迟低的 KMS 主机进行激活。 成功率指成功次数/测试次数，最短、最长、平均时间以及近期成功率均取最近 10 次测试结果计算。 数据仅供参考，实际使用情况会受网络因素影响而不同。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>KMS</tag>
        <tag>激活</tag>
      </tags>
  </entry>
  <entry>
    <title>个人使用的Tampermonkey油猴脚本推荐</title>
    <url>/posts/31876/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>「Tampermonkey」油猴可以通过安装各类脚本对网站进行定制。不过它能定制的不仅仅是网站的样式，还能实现更多更强大的功能，只要经过简单设置，下载一些现成脚本，就可以实现上面提到的实用的功能。Tampermonkey 提供了友好的中文化界面，懒得折腾的用户使用默认设置即可，无需更改任何选项。如果需要更多高级设置选项的话，可自行打开「初学者」或者「高级」配置模式，设置将提供动作菜单、更细致的脚本更新、TESLA、加强版编辑器、安全、黑名单检查等高级选项。</p>
<span id="more"></span>
<h2 id="脚本推荐">脚本推荐</h2>
<h3 id="百度搜索">百度搜索</h3>
<p><a href="https://greasyfork.org/zh-CN/scripts/14178">AC-baidu-重定向优化百度搜狗谷歌必应搜索_favicon_双列</a></p>
<p>1.绕过百度、搜狗、谷歌、好搜搜索结果中的自己的跳转链接，直接访问原始网页-反正都能看懂 2.新增自定义网站拦截功能 3添加Favicon显示 4.页面CSS 5.添加计数 6.开关选择以上功能 7.自动翻页功能</p>
<p>PS：默认相关功能关闭，需要的请手动开启</p>
<h4 id="脚本效果">脚本效果</h4>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109232212454.png" alt="功能设置" /><figcaption aria-hidden="true">功能设置</figcaption>
</figure>
<h3 id="百度云盘">百度云盘</h3>
<p><a href="https://www.baiduyun.wiki/panlinker.user.js">网盘直链下载助手</a></p>
<p>功能：支持多种操作系统、支持多种下载协议、支持多种下载器、支持批量获取网盘文件下载链接、可以通过 JSON-RPC 协议发送下载链接至本地或远程下载、支持更换皮肤，自动更新，新版网盘界面</p>
<h4 id="脚本效果-1">脚本效果</h4>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109232230794.gif" alt="使用变化" /><figcaption aria-hidden="true">使用变化</figcaption>
</figure>
<h3 id="哔哩哔哩">哔哩哔哩</h3>
<p><a href="https://github.com/the1812/Bilibili-Evolved#%E5%AE%89%E8%A3%85">Bilibili-Evolved</a> 强大的哔哩哔哩增强脚本包括功能：下载视频, 音乐, 封面, 弹幕 / 简化直播间, 评论区, 首页 / 自定义顶栏, 删除广告, 夜间模式 / 触屏设备支持</p>
<h4 id="脚本效果-2">脚本效果</h4>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109232217321.png" alt="清爽首页模式" /><figcaption aria-hidden="true">清爽首页模式</figcaption>
</figure>
<h3 id="微博">微博</h3>
<p><a href="https://tiansh.github.io/yawf/">YAWF 药方</a></p>
<p>新浪微博根据关键词、作者、话题、来源等过滤微博，清理版面，以及其他改造功能</p>
<ul>
<li>跳过微博的兴趣导引，避免误关注大量“垃圾帐号”（该功能默认开启，无设置项）；</li>
<li>根据关键字、作者、来源等隐藏、折叠或高亮微博；使用拖拽轻松定义过滤规则；</li>
<li>屏蔽推广、粉丝头条、投票、好友赞过、抢红包、爱问医生等各种微博；</li>
<li>清理版面上的各种模块、图标、小红点，去广告；过滤热门话题；</li>
<li>合并左右边栏的双栏模式，加宽微博宽度和加大微博字号，自定义字体；</li>
<li>去除微博间的空白，调整微博版式，重新安排微博下方按钮顺序</li>
<li>自动检查您的关注列表并告诉您发生的变化，帮您保持关注列表的干净整洁；</li>
<li>设置网页模板，自定义半透明背景色，深色导航栏，经典导航栏布局；</li>
<li>正常大小的微博缩略图尺寸，原生视频播放器；</li>
<li>以及更多功能……</li>
</ul>
<h4 id="脚本效果-3">脚本效果</h4>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109232219779.png" alt="脚本设置" /><figcaption aria-hidden="true">脚本设置</figcaption>
</figure>
<h3 id="csdn">CSDN</h3>
<p><a href="https://greasyfork.org/zh-CN/scripts/378351">持续更新-csdn广告完全过滤-人性化脚本优化-不用再登录了-让你体验令人惊喜的崭新csdn</a></p>
<p>CSDNGreener，一款专为 Tampermonkey 插件打造的 CSDN 绿化脚本。</p>
<h4 id="脚本效果-4">脚本效果</h4>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109232221417.png" alt="文章阅读页面" /><figcaption aria-hidden="true">文章阅读页面</figcaption>
</figure>
<h3 id="知乎">知乎</h3>
<p><a href="https://greasyfork.org/zh-CN/scripts/419081">知乎增强</a></p>
<p>移除登录弹窗、默认收起回答、一键收起回答、收起当前回答/评论（点击两侧空白处）、快捷回到顶部（右键两侧空白处）、屏蔽用户 (发布的内容)、屏蔽关键词（标题/评论）、屏蔽首页视频（视频/文章等类别）、屏蔽盐选内容、净化标题消息、展开问题描述、置顶显示时间、完整问题时间、区分问题文章、直达问题按钮、默认高清原图、默认站外直链</p>
<h4 id="脚本效果-5">脚本效果</h4>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110012221342.png" alt="脚本效果" /><figcaption aria-hidden="true">脚本效果</figcaption>
</figure>
<h3 id="e-站">E 站</h3>
<p><a href="https://github.com/EhTagTranslation/EhSyringe/releases/latest/download/ehsyringe.user.js">EhSyringe</a></p>
<p>E 站注射器，将中文翻译注入到 E 站体内。（中文化）</p>
<p>功能包括 全站翻译（大部分)、TAG 翻译、TAG 介绍、TAG 翻译数据更新、搜索框 TAG 输入提示</p>
<p><a href="https://openuserjs.org/scripts/alexchen/eHunter">eHunter</a></p>
<p>为e-hentai/exhentai/nhentai提供一个滚动模式和书本模式, 提供良好的阅读体验。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Tampermonkey</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cloudflare Pages搭建静态网站</title>
    <url>/posts/58349/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>Cloudflare Pages是一个JAMstack平台，供前端开发人员协作和部署网站。使用 Cloudflare Pages 部署您的动态前端应用程序。页面速度超快，始终保持最新状态，并直接从您的 GitHub 帐户部署。支持常见JS框架，包括React，Vue，Gatsby和Hugo。</p>
<span id="more"></span>
<h2 id="操作步骤">操作步骤</h2>
<h3 id="登录cloudflare-pages">登录Cloudflare Pages</h3>
<p>首先是登录，前往 <a href="https://dash.cloudflare.com/sign-up/pages">pages.cloudflare.com</a> 按照操作。</p>
<h3 id="创建项目">创建项目</h3>
<p>点击<code>创建项目</code>，连接 GitHub 。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110241744843.png" alt="创建项目" /><figcaption aria-hidden="true">创建项目</figcaption>
</figure>
<h3 id="选择存储库">选择存储库</h3>
<p>从 GitHub 中选中项目</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110241751328.png" alt="从 GitHub 存储库创建项目" /><figcaption aria-hidden="true">从 GitHub 存储库创建项目</figcaption>
</figure>
<h3 id="设置构建和部署">设置构建和部署</h3>
<p>构建还算是挺简单的，这里我们如果是传统静态页面直接点保存并部署即可。</p>
<p>如果是比如 Vue、React、angularjs，选择<strong>框架预设</strong>。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110241751330.png" alt="框架预设" /><figcaption aria-hidden="true">框架预设</figcaption>
</figure>
<p>大部分静态网站程序在Cloudflare Pages构建模板里面都有</p>
<p>这里我使用的是 <code>Hexo</code> 搭建的 Blog</p>
<p>Cloudflare目前预设框架中暂不支持，但只需手动填写命令即可。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110241751331.png" alt="手动填写" /><figcaption aria-hidden="true">手动填写</figcaption>
</figure>
<h3 id="部署站点">部署站点</h3>
<p>最后点击保存并部署即可</p>
<h2 id="总结">总结</h2>
<p>Cloudflare Pages 给我的感觉就是可以设置的东西太少了，首先就是必须要绑定 GitHub 才能使用，而且初始的 项目名字.pages.dev 域名，是和项目名字绑定在一起的。</p>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>Cloudflare Pages</category>
      </categories>
      <tags>
        <tag>Cloudflare Pages</tag>
        <tag>Blog</tag>
        <tag>Serverless</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cloudflare Workers加速V2ray等代理</title>
    <url>/posts/1250/</url>
    <content><![CDATA[<p>使用 Cloud­flare 加速梯子，首先梯子必须是用 web­socket 作为传输方式的，比如 v2ray 的 web­socket，gost 的 web­socket 隧道，shad­ow­socks 的 v2ray-plu­gin 等等，关于这些东西的搭建教程有很多，我就不赘述了，只讲如何使用 Cloud­flare，并自选 ip 来达到最好的加速效果，你所需要的只是一个域名。</p>
<span id="more"></span>
<h2 id="使用cloudflare-workers反向代理">使用Cloudflare Workers反向代理</h2>
<p>先创建一个 Cloud­flare 账号，然后在主页面右下角点击 Work­ers，进入创建一个 Worker</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fNi3wD.png" alt="创建一个 Worker" /><figcaption aria-hidden="true">创建一个 Worker</figcaption>
</figure>
<p>接着在编辑区域粘贴以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">addEventListener(</span><br><span class="line">    <span class="string">&quot;fetch&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="keyword">new</span> URL(event.request.url);</span><br><span class="line">        url.hostname = <span class="string">&quot;your.domain&quot;</span>;</span><br><span class="line">        url.protocol = <span class="string">&quot;protocol&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> request = <span class="keyword">new</span> Request(url, event.request);</span><br><span class="line">        event.respondWith(</span><br><span class="line">            fetch(request)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>将 <code>your.domain</code> 改成你的域名，<code>protocol</code> 如果后端使用 https 就写 https，http 就写 http，如下图所示</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fNialt.png" alt="修改代码" /><figcaption aria-hidden="true">修改代码</figcaption>
</figure>
<p>然后在左上角自定义你的子域</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fNiwOf.png" alt="自定义你的子域" /><figcaption aria-hidden="true">自定义你的子域</figcaption>
</figure>
<p>最后点击保存并部署即可</p>
<p>在左上角点击访问你的应用，如果出现的是你的网站的内容那说明反代成功了，将 v2ray 的客户端的地址改成 Worker 应用的地址即可，客户端没有开启 tls 的要开启，并将连接端口设为 443</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fNirTg.png" alt="访问你的应用" /><figcaption aria-hidden="true">访问你的应用</figcaption>
</figure>
<h2 id="自选cloudflare的ip">自选Cloudflare的ip</h2>
<p>为了实现这一点需要使用这个项目：https://github.com/Spedoske/CloudflareScanner 在 Re­lease 页面下载对应平台的二进制运行即可，参数如下，当然你也可以自定义，但记得 tcping 协程数不要超过一千</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fNi6Yj.png" alt="运行" /><figcaption aria-hidden="true">运行</figcaption>
</figure>
<p>在同目录的result.csv文件中就可以看到筛选出的优质ip，一般第一行的ip就可以使用了</p>
<p>然后修改系统的 hosts 文件加入这一行</p>
<p><code>CF的优质ip Worker应用的域名</code></p>
<p>这时候重启你的代理软件，应该已经使用到了 CF 的自选 ip 了</p>
<p>如果你想要在 CF 前再套一个国内中转机，只需要在中转机上将流量转发到筛选出的 CF 优质 ip，端口为 443，然后在代理软件上将地址和端口修改为中转机的地址和端口，host 设置为 Work­ers 应用的域名</p>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>Cloudflare Workers</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Cloudflare Workers</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cloudflare Workers反代加速任意网站</title>
    <url>/posts/40423/</url>
    <content><![CDATA[<h2 id="cloudflare-workers简介">Cloudflare Workers简介</h2>
<p>Cloudflare 推出了 Workers 服务，在国内一般叫它边缘计算。之前介绍的利用又拍云边缘规则为图片增加水印其实也是这个原理。</p>
<span id="more"></span>
<p>Cloudflare Workers 的名称来自 Web Workers，更具体地说是 Service Workers，一个用于在 web 浏览器后台运行并拦截 HTTP 请求的脚本的 W3C 标准 API。Cloudflare Workers 是针对相同的标准 API 编写的，但是是在 Cloudflare 的服务器上运行，而不是在浏览器中运行。</p>
<h2 id="cloudflare-workers反代加速">Cloudflare Workers反代加速</h2>
<p><a href="https://github.com/fajarFWD/workersproxy">Workers-Proxy</a> 项目，可以通过 Cloudflare Workers 服务搭建一个反向代理服务器，这个反向代理服务器不需要安装在我们自己的 VPS 主机上，而是直接部署在 Cloudflare 节点上，这可以极大的降低我们自身 VPS 主机的性能损耗。</p>
<h2 id="部署步骤">部署步骤</h2>
<ol type="1">
<li>导航至 <a href="https://workers.cloudflare.com/">Cloudflare Workers</a> ，注册并登录你的 Cloudflare 帐户，然后为 worker 设置自定义域名，然后创建一个新的 Worker 。</li>
<li>访问打开 “ <a href="https://github.com/fajarFWD/workersproxy/blob/master/src/index.js">src / index.js</a> ” ，将代码粘贴到 Cloudflare 刚刚新创建的 Worker ，然后在编辑器中以替换默认配置。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理网站</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理网站的目录</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手机用户代理网站</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 屏蔽国家和地区</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [<span class="string">&#x27;CN&#x27;</span>, <span class="string">&#x27;KP&#x27;</span>, <span class="string">&#x27;SY&#x27;</span>, <span class="string">&#x27;PK&#x27;</span>, <span class="string">&#x27;CU&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 屏蔽 IP 地址</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源站是否开启 HTTPS</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否允许浏览器缓存</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本替换</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;$upstream&#x27;</span>: <span class="string">&#x27;$custom_domain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;//google.com&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>更改 Worker 的名称，保存并部署它，最后检查其性能是否满足你的需求。</li>
</ol>
<h3 id="绑定自定义域名">绑定自定义域名</h3>
<ol type="1">
<li>检查域名是否接入 Cloudflare.</li>
<li>跳转到域名的控制面板, 选择 'Workers' 页面, 点击 'Add Route'.</li>
<li>在 <code>Route</code> 中输入 <code>https://&lt;自定义域名&gt;/*</code> 并且选择刚创建的 Worker.</li>
<li>为自定义域名添加 CNAME DNS 记录. 在 DNS 页面中, 在 'Name' 区域输入自定义域名的子域名 (或者 @), 在 'Target' 区域输入 Worker 的<strong>二级域名</strong> (例如 test.workers.dev), 将代理状态选择为 '代理'.</li>
</ol>
<h3 id="部署多个域名">部署多个域名</h3>
<p>如果被反代的网站使用其他域名的静态资源时, 可以部署多个 Workers-Proxy 并配置文本替换.</p>
<ol type="1">
<li><a href="http://www.google.com/">www.google.com</a> 使用位于 <a href="http://www.gstatic.com/">www.gstatic.com</a> 的静态资源</li>
<li>部署 Workers-Proxy A, 用于代理 <a href="http://www.gstatic.com/">www.gstatic.com</a></li>
<li>部署 Workers-Proxy B, 用于代理 <a href="http://www.google.com/">www.google.com</a></li>
<li>配置 Workers-Proxy B 的文本替换:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;$upstream&#x27;</span>: <span class="string">&#x27;$custom_domain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;www.gstatic.com&#x27;</span>: <span class="string">&#x27;&lt;Workers-Proxy A 的域名&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置模板">配置模板</h2>
<h3 id="pornhub">Pornhub</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Website you intended to retrieve for users.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&#x27;www.pornhub.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Website you intended to retrieve for users using mobile devices.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = <span class="string">&#x27;www.pornhub.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Countries and regions where you wish to suspend your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [<span class="string">&#x27;CN&#x27;</span>, <span class="string">&#x27;KP&#x27;</span>, <span class="string">&#x27;SY&#x27;</span>, <span class="string">&#x27;PK&#x27;</span>, <span class="string">&#x27;CU&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP addresses which you wish to block from using your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to disable cache.</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace texts.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;$upstream&#x27;</span>: <span class="string">&#x27;$custom_domain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;//ci.phncdn.com&#x27;</span>: <span class="string">&#x27;//ciphncdncom.pornproxy.workers.dev&#x27;</span>, <span class="comment">// replace this with your other deployment.</span></span><br><span class="line">    <span class="string">&#x27;var scriptText&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// Issue #30</span></span><br><span class="line">    <span class="string">&#x27;trafficjunky.com&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;trafficjunky.net&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;contentabc.com&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Ads By Traffic Junky&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cdn1d-static-shared.phncdn.com/iframe-1.1.5.html&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/ads/iframe-mobile-3.0.0.html&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;iframe&#x27;</span>: <span class="string">&#x27;&lt;!--&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;/iframe&gt;&#x27;</span>: <span class="string">&#x27;--&gt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Remove Ads&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="github">Github</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Website you intended to retrieve for users.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&#x27;github.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Website you intended to retrieve for users using mobile devices.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = <span class="string">&#x27;github.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Countries and regions where you wish to suspend your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [<span class="string">&#x27;CN&#x27;</span>, <span class="string">&#x27;KP&#x27;</span>, <span class="string">&#x27;SY&#x27;</span>, <span class="string">&#x27;PK&#x27;</span>, <span class="string">&#x27;CU&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP addresses which you wish to block from using your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to disable cache.</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace texts.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;$upstream&#x27;</span>: <span class="string">&#x27;$custom_domain&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="google">Google</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Website you intended to retrieve for users.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Website you intended to retrieve for users using mobile devices.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Countries and regions where you wish to suspend your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [<span class="string">&#x27;CN&#x27;</span>, <span class="string">&#x27;KP&#x27;</span>, <span class="string">&#x27;SY&#x27;</span>, <span class="string">&#x27;PK&#x27;</span>, <span class="string">&#x27;CU&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP addresses which you wish to block from using your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to disable cache.</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace texts.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;$upstream&#x27;</span>: <span class="string">&#x27;$custom_domain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;//google.com&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<p><strong>优点：</strong></p>
<ul>
<li>用 Cloudflare Workers加速任意网站, 无需购买或配置服务器；</li>
<li>可以用来做静态资源 CDN..不用把域名接入 Cloudflare ；</li>
<li>可以根据 user-agent 屏蔽部分地区或 IP；</li>
<li>可以绑定自定义域名；</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>workers 一天免费 10 万次请求，注意在workers中可能会提示：“Cannot read property ‘toUpperCase’ of null”的错误，在githun的issue中有人提示说是正常现象。</li>
</ul>
<h2 id="完整代码">完整代码</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理网站</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理网站的目录</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手机用户代理网站</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 屏蔽国家和地区</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [<span class="string">&#x27;CN&#x27;</span>, <span class="string">&#x27;KP&#x27;</span>, <span class="string">&#x27;SY&#x27;</span>, <span class="string">&#x27;PK&#x27;</span>, <span class="string">&#x27;CU&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 屏蔽 IP 地址</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源站是否开启 HTTPS</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否允许浏览器缓存</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本替换</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;$upstream&#x27;</span>: <span class="string">&#x27;$custom_domain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;//google.com&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下无需修改</span></span><br><span class="line">addEventListener(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    event.respondWith(fetchAndApply(event.request));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAndApply</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> region = request.headers.get(<span class="string">&#x27;cf-ipcountry&#x27;</span>).toUpperCase();</span><br><span class="line">    <span class="keyword">const</span> ip_address = request.headers.get(<span class="string">&#x27;cf-connecting-ip&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> user_agent = request.headers.get(<span class="string">&#x27;user-agent&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">    <span class="keyword">let</span> url_hostname = url.hostname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (https == <span class="literal">true</span>) &#123;</span><br><span class="line">        url.protocol = <span class="string">&#x27;https:&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url.protocol = <span class="string">&#x27;http:&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">await</span> device_status(user_agent)) &#123;</span><br><span class="line">        <span class="keyword">var</span> upstream_domain = upstream;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> upstream_domain = upstream_mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url.host = upstream_domain;</span><br><span class="line">    <span class="keyword">if</span> (url.pathname == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        url.pathname = upstream_path;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url.pathname = upstream_path + url.pathname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (blocked_region.includes(region)) &#123;</span><br><span class="line">        response = <span class="keyword">new</span> Response(<span class="string">&#x27;Access denied: WorkersProxy is not available in your region yet.&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">403</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blocked_ip_address.includes(ip_address)) &#123;</span><br><span class="line">        response = <span class="keyword">new</span> Response(<span class="string">&#x27;Access denied: Your IP address is blocked by WorkersProxy.&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">403</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> method = request.method;</span><br><span class="line">        <span class="keyword">let</span> request_headers = request.headers;</span><br><span class="line">        <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> Headers(request_headers);</span><br><span class="line"></span><br><span class="line">        new_request_headers.set(<span class="string">&#x27;Host&#x27;</span>, upstream_domain);</span><br><span class="line">        new_request_headers.set(<span class="string">&#x27;Referer&#x27;</span>, url.protocol + <span class="string">&#x27;//&#x27;</span> + url_hostname);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> original_response = <span class="keyword">await</span> fetch(url.href, &#123;</span><br><span class="line">            <span class="attr">method</span>: method,</span><br><span class="line">            <span class="attr">headers</span>: new_request_headers</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        connection_upgrade = new_request_headers.get(<span class="string">&quot;Upgrade&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (connection_upgrade &amp;&amp; connection_upgrade.toLowerCase() == <span class="string">&quot;websocket&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> original_response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> original_response_clone = original_response.clone();</span><br><span class="line">        <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> response_headers = original_response.headers;</span><br><span class="line">        <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> Headers(response_headers);</span><br><span class="line">        <span class="keyword">let</span> status = original_response.status;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (disable_cache) &#123;</span><br><span class="line">			new_response_headers.set(<span class="string">&#x27;Cache-Control&#x27;</span>, <span class="string">&#x27;no-store&#x27;</span>);</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">        new_response_headers.set(<span class="string">&#x27;access-control-allow-origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        new_response_headers.set(<span class="string">&#x27;access-control-allow-credentials&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        new_response_headers.delete(<span class="string">&#x27;content-security-policy&#x27;</span>);</span><br><span class="line">        new_response_headers.delete(<span class="string">&#x27;content-security-policy-report-only&#x27;</span>);</span><br><span class="line">        new_response_headers.delete(<span class="string">&#x27;clear-site-data&#x27;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (new_response_headers.get(<span class="string">&quot;x-pjax-url&quot;</span>)) &#123;</span><br><span class="line">            new_response_headers.set(<span class="string">&quot;x-pjax-url&quot;</span>, response_headers.get(<span class="string">&quot;x-pjax-url&quot;</span>).replace(<span class="string">&quot;//&quot;</span> + upstream_domain, <span class="string">&quot;//&quot;</span> + url_hostname));</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">const</span> content_type = new_response_headers.get(<span class="string">&#x27;content-type&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (content_type != <span class="literal">null</span> &amp;&amp; content_type.includes(<span class="string">&#x27;text/html&#x27;</span>) &amp;&amp; content_type.includes(<span class="string">&#x27;UTF-8&#x27;</span>)) &#123;</span><br><span class="line">            original_text = <span class="keyword">await</span> replace_response_text(original_response_clone, upstream_domain, url_hostname);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            original_text = original_response_clone.body</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        response = <span class="keyword">new</span> Response(original_text, &#123;</span><br><span class="line">            status,</span><br><span class="line">            <span class="attr">headers</span>: new_response_headers</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">replace_response_text</span>(<span class="params">response, upstream_domain, host_name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> replace_dict) &#123;</span><br><span class="line">        j = replace_dict[i]</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="string">&#x27;$upstream&#x27;</span>) &#123;</span><br><span class="line">            i = upstream_domain</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;$custom_domain&#x27;</span>) &#123;</span><br><span class="line">            i = host_name</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j == <span class="string">&#x27;$upstream&#x27;</span>) &#123;</span><br><span class="line">            j = upstream_domain</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="string">&#x27;$custom_domain&#x27;</span>) &#123;</span><br><span class="line">            j = host_name</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(i, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">        text = text.replace(re, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">device_status</span>(<span class="params">user_agent_info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> agents = [<span class="string">&quot;Android&quot;</span>, <span class="string">&quot;iPhone&quot;</span>, <span class="string">&quot;SymbianOS&quot;</span>, <span class="string">&quot;Windows Phone&quot;</span>, <span class="string">&quot;iPad&quot;</span>, <span class="string">&quot;iPod&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; agents.length; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (user_agent_info.indexOf(agents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>Cloudflare Workers</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Cloudflare Workers</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cloudflare Workers实现V2ray节点加速</title>
    <url>/posts/59199/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>假如你已经按之前教程 搭建了一个免费的 v2ray 服务器，但觉得速度有些慢，可以尝试使用 cloudflare 的 workers 给节点 CDN 加速一下。虽然有不少人感觉 cloudflare 的 CDN 就是一个减速器，但从个人体验来说，加速效果还是很明显的，尤其是在使用一些国外小水管服务器的时候。</p>
<span id="more"></span>
<h2 id="操作步骤">操作步骤</h2>
<p>登录 cloudflare，新建一个 worker。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fNFJBT.png" alt="workers.png" /><figcaption aria-hidden="true">workers.png</figcaption>
</figure>
<p>然后把下面的 JS 代码粘贴到对应区域，记得把 <strong>url.hostname</strong> 替换成想要加速的 v2ray 节点域名（只是域名，不要添加前面的 http 和后面的路径那些）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">addEventListener(</span><br><span class="line">  <span class="string">&quot;fetch&quot;</span>,<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">let</span> url=<span class="keyword">new</span> URL(event.request.url);</span><br><span class="line">     url.hostname = <span class="string">&quot;your.domain&quot;</span>;</span><br><span class="line">     <span class="keyword">let</span> request=<span class="keyword">new</span> Request(url,event.request);</span><br><span class="line">     event. respondWith(</span><br><span class="line">       fetch(request)</span><br><span class="line">     )</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>然后点击保存，会看到一个 workers 的服务器域名，类似： <strong>https://xxxxxx.xxxx.workers.dev</strong> ，这就是我们所需要的 CDN 域名。</p>
<h2 id="使用方法">使用方法</h2>
<p>把客户端中被加速节点的信息复制一份，然后把域名换成 workers 服务器的域名（xxxxxx.xxxx.workers.dev）即可。</p>
<p>例如，原来被加速的节点信息为： &gt; vmess=xxxx-xxxxxx.cloud.okteto.net:443, method=aes-128-gcm, password=fc784596-c17d-46da-bbb4-7d5142b8866a, obfs=wss, obfs-uri=/elecV2, fast-open=false, udp-relay=false, tag=EVOKTETO</p>
<p>那么可以直接复制上面的信息，修改一下域名，然后添加一个新的节点： &gt; vmess=xxxxxx.xxxx.workers.dev:443, method=aes-128-gcm, password=fc784596-c17d-46da-bbb4-7d5142b8866a, obfs=wss, obfs-uri=/elecV2, fast-open=false, udp-relay=false, tag=EVOKTETO-CDN</p>
<p>这个操作完全不影响原来节点的使用，只是多了一个 CDN 的加速节点，很值得尝试一下。</p>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>Cloudflare Workers</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Cloudflare Workers</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cloudflare Workers部署个人导航页</title>
    <url>/posts/19846/</url>
    <content><![CDATA[<h2 id="项目说明">项目说明</h2>
<p>CF-Worker-Dir是一款适用于Cloudflare Worker平台上的云函数程序，可以使用它在一分钟内搭建属于自己的导航页面。CF-Worker-Dir提供丰富的自定义配置，同时它还可以预留了接口帮助你售出自己域名。如果你的域名还没有搭建网站，不如先利用CF-Worker-Dir让你的域名不再浪费。</p>
<span id="more"></span>
<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/sleepwood/CF-Worker-Dir">sleepwood/CF-Worker-Dir</a></p>
<h2 id="程序安装">程序安装</h2>
<h3 id="快速安装">快速安装</h3>
<ol type="1">
<li>在 <a href="https://workers.cloudflare.com/">Cloudflare Worker</a> 管理页面创建一个新的 <strong>Worker</strong> 。</li>
<li>在Worker编辑页面左边粘贴 <code>index.js</code> 中的代码。</li>
<li>根据自身需要修改 <code>config</code> 的配置内容</li>
</ol>
<h3 id="进阶安装">进阶安装</h3>
<h4 id="如何绑定自己的域名">如何绑定自己的域名</h4>
<ol type="1">
<li>根据上文快速安装完成，回到域名管理面板</li>
<li>点击 <code>Workers</code> 进入Workers管理页面</li>
<li>点击 <code>Add route</code> 设置新的路由</li>
<li><code>Route</code> 可以输入自己想使用的子域名，如果在根域名上使用直接把当前域名输入即可，<code>Worker</code> 选择上文快速安装好的Worker</li>
</ol>
<p><code>Route</code> 所使用的域名地址<strong>必须已经解析好A记录</strong>，如果没有能绑定的IP地址，可以输入8.8.8.8占位</p>
<h2 id="系统配置">系统配置</h2>
<p>CF-Worker-Dir允许用户自定义导航页面，配置内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;自定义导航&quot;</span>,                 <span class="comment">//自定义网站标题</span></span><br><span class="line">  <span class="attr">subtitle</span>: <span class="string">&quot;Cloudflare Workers Nav&quot;</span>, <span class="comment">//自定义网站副标题</span></span><br><span class="line">  <span class="attr">logo_icon</span>: <span class="string">&quot;sitemap&quot;</span>,               <span class="comment">//选择网站logo icon 暂时只支持 (eg:https://semantic-ui.com/elements/icon.html)</span></span><br><span class="line">  <span class="attr">hitokoto</span>: <span class="literal">true</span>,                     <span class="comment">//开启 一言 插件</span></span><br><span class="line">  <span class="attr">search</span>:<span class="literal">true</span>,                        <span class="comment">//开启 搜索 功能  </span></span><br><span class="line">  <span class="attr">search_engine</span>:[                     <span class="comment">//搜索引擎列表</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;百度一下&quot;</span>,                   <span class="comment">//搜索引擎名称</span></span><br><span class="line">      <span class="attr">template</span>:<span class="string">&quot;https://www.baidu.com/s?wd=$s&quot;</span>  <span class="comment">//搜索引擎模板（含关键词$s）</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">selling_ads</span>: <span class="literal">true</span>,                  <span class="comment">//是否要开启网址推广</span></span><br><span class="line">  <span class="attr">sell_info</span>:&#123;</span><br><span class="line">    <span class="attr">domain</span>:<span class="string">&quot;example.com&quot;</span>,             <span class="comment">//当前域名</span></span><br><span class="line">    <span class="attr">price</span>:<span class="number">500</span>,                        <span class="comment">//价格</span></span><br><span class="line">    <span class="attr">mon_unit</span>:<span class="string">&quot;yen sign&quot;</span>,              <span class="comment">//货币单位 (eg:https://semantic-ui.com/elements/icon.html#computers)</span></span><br><span class="line">    <span class="attr">contact</span>:[                         <span class="comment">//联系方式</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;envelope&quot;</span>,              <span class="comment">//通讯工具 (&quot;weixin&quot;,&quot;qq&quot;,&quot;telegram plane&quot;,&quot;envelope&quot; or &quot;phone&quot;)</span></span><br><span class="line">        <span class="attr">content</span>:<span class="string">&quot;info@example.com&quot;</span>    <span class="comment">//号码/地址</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]                        </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">lists</span>: [                            <span class="comment">//网址信息</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;技术&quot;</span>,                    <span class="comment">//网址类别</span></span><br><span class="line">      <span class="attr">icon</span>:<span class="string">&quot;code&quot;</span>,                    <span class="comment">//网址类别icon 暂时只支持 (eg:https://semantic-ui.com/elements/icon.html)</span></span><br><span class="line">      <span class="attr">list</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">url</span>:<span class="string">&quot;https://oschina.net/&quot;</span>, <span class="comment">//网站url</span></span><br><span class="line">          <span class="attr">name</span>:<span class="string">&quot;开源中国&quot;</span>,             <span class="comment">//网站名称</span></span><br><span class="line">          <span class="attr">desc</span>:<span class="string">&quot;领先的中文开源技术社区&quot;</span> <span class="comment">//网站描述</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>Cloudflare Workers</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Cloudflare Workers</tag>
        <tag>CFWorkerDir</tag>
        <tag>个人导航页</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cloudflare Workers部署GDIndex实现的Google Drive上传下载直链索引</title>
    <url>/posts/63001/</url>
    <content><![CDATA[<h2 id="项目说明">项目说明</h2>
<p>GDIndex 是一个类似 <a href="https://github.com/donwa/goindex">GOIndex</a> 的东西，可以在 CloudFlare Workers 上架设 Google Drive 的目录，并提供许多功能且<code>支持上传文件</code>。配合Google Drive可以轻松打造无限容量的<code>个人网盘</code>或<code>离线下载网盘</code>。</p>
<span id="more"></span>
<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/maple3142/GDIndex">maple3142/GDIndex</a></p>
<h2 id="和-goindex-不同之处">和 GOIndex 不同之处</h2>
<ul>
<li>前端使用 Vue 完成</li>
<li>查看图片不用另开新窗口</li>
<li>视频播放器支持字幕(目前只支持 srt)</li>
<li>支持在线阅读 PDF, EPUB</li>
<li>不支持目录加密(.password)</li>
<li>支持 Http Basic Auth</li>
<li>无需修改程序，即可接入多个云端硬盘(个人、团队)</li>
</ul>
<h2 id="安装步骤">安装步骤</h2>
<h3 id="常规部署方法">常规部署方法</h3>
<ol type="1">
<li>安装 <a href="https://rclone.org/">rclone</a></li>
<li>设定 Google Drive: https://rclone.org/drive/</li>
<li>执行 <code>rclone config file</code> 以找到你的 <code>rclone.conf</code></li>
<li>在 <code>rclone.conf</code> 中寻找 <code>refresh_token</code> 以及 <code>root_folder_id</code> (可选)</li>
<li>复制 <a href="https://github.com/maple3142/GDIndex/blob/master/worker/dist/worker.js">worker/dist/worker.js</a> 的内容到 CloudFlare Workers</li>
<li>在脚本顶端填上 <code>refresh_token</code>, <code>root_folder_id</code> 以及其他的选项</li>
<li>部署!</li>
</ol>
<h2 id="使用服务帐户方法">使用服务帐户方法</h2>
<ol type="1">
<li>创建一个服务帐户，一个相应的服务帐户密钥，然后从[Google Cloud Platform控制台]获取JSON（https://cloud.google.com/iam/docs/creating-managing-service-account-keys）</li>
<li>在props对象中，将<code>service_account_json</code>值替换为服务帐户JSON文件的内容，并将<code>service_account</code>设置为<code>true</code>。</li>
<li>确保所涉及的服务帐户有权访问“ root_folder_id”中指定的文件夹</li>
<li>部署！</li>
</ol>
<h3 id="自动部署方法">自动部署方法</h3>
<p>前往 https://gdindex-code-builder.maple3142.net/(英文) 并遵照它的指示。</p>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>Cloudflare Workers</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Cloudflare Workers</tag>
        <tag>GDIndex</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cloudflare Workers部署博客</title>
    <url>/posts/40066/</url>
    <content><![CDATA[<h2 id="项目说明">项目说明</h2>
<p>这是一个运行在Cloudflare Workers 上的博客程序(blog),使用 Cloudflare KV作为数据库,无其他依赖，兼容静态博客的速度,以及动态博客的灵活性,方便搭建不折腾。</p>
<span id="more"></span>
<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/gdtool/cloudflare-workers-blog">gdtool/cloudflare-workers-blog</a></p>
<h2 id="主要特点">主要特点</h2>
<ul>
<li>使用workers提供的KV作为数据库</li>
<li>使用Cloudflare缓存html来降低KV的读写</li>
<li>所有html页面均为缓存,可达到静态博客的速度</li>
<li>使用KV作为数据库,可达到wordpress的灵活性</li>
<li>后台使用markdown语法,方便快捷</li>
<li>一键发布(页面重构+缓存清理)</li>
</ul>
<h2 id="承载能力">承载能力</h2>
<ul>
<li>KV基本不存在瓶颈,因为使用了缓存,读写很少</li>
<li>唯一瓶颈是 workers的日访问量10w,大约能承受2万IP /日</li>
<li>文章数:1G存储空间,几万篇问题不大</li>
</ul>
<h2 id="部署步骤">部署步骤</h2>
<h3 id="创建workers-和kv">创建workers 和KV</h3>
<p>新建一个KV(名字随意)和一个workers,并绑<strong>定新建的KV</strong>到<strong>新建的workers</strong>,变量名称<code>CFBLOG</code>注意大写。</p>
<p>绑定步骤:workers-&gt;点击刚才新建的worker—&gt;设置—&gt;KV 命名空间绑定—&gt;编辑变量—&gt;变量名称:”CFBLOG”—&gt;KV 命名空间:选择刚才的新建的KV</p>
<h3 id="域名设置">域名设置</h3>
<ul>
<li>添加一个域名DNS: 例如<code>blog.gezhong.vip</code>,IP随意,橙色云朵必须打开</li>
<li>域名绑定到workers:域名—&gt; workers —&gt;添加路由 <code>https://blog.gezhong.vip/*</code></li>
<li>获取缓存API token:域名概述—&gt;右下角,记录<code>区域ID</code>,以及<code>获取一个清理缓存的 API 令牌</code>,如图</li>
</ul>
<h3 id="粘贴源码并修改">粘贴源码并修改</h3>
<p>粘贴源码中index.js内容到workers,根据需求修改参数</p>
<h3 id="设置和发布文章">设置和发布文章</h3>
<p>进入<code>/admin</code>进行设置 和发布文章</p>
<h2 id="主题扩展性">主题扩展性</h2>
<p>可以用任意主题为参照,快速开发出新主题,默认主题在<a href="https://themonic.com/iconic-one/">Iconic One</a>基础上做的,回头补充专题</p>
<h2 id="关于评论系统">关于评论系统</h2>
<p>由于本博客的缓存效果类似静态博客,评论依4赖于第三方,这里推荐<code>Valine</code></p>
<h2 id="valine申请">Valine申请</h2>
<p>国内版需要绑定手机,+实名认证</p>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>Cloudflare Workers</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Cloudflare Workers</tag>
        <tag>CFBlog</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github Actions自动部署Hexo博客</title>
    <url>/posts/13671/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文将介绍利用 Github Actions 实现自动部署 hexo 到 Github Pages，在之前我们需要写完文章执行 <code>hexo generate --deploy</code> 来部署，当你文章比较多的时候，可能还需要等待很久，而且还可能会遇到本地安装的 Node.js 版本与 Hexo 不兼容的问题，目前我就是因为电脑的 Node.js 版本升到 v14 版本导致与 Hexo 不兼容部署不了，才来捣腾 Github Actions 功能的。利用 Github Actions 你将会没有这些烦恼。</p>
<span id="more"></span>
<p>Github Actions 可以很方便实现 CI/CD 工作流，类似 Travis 的用法，来帮我们完成一些工作，比如实现自动化测试、打包、部署等操作。当我们运行 Jobs 时，它会创建一个容器 (runner)，容器支持：Ubuntu、Windows 和 MacOS 等系统，在容器中我们可以安装软件，利用安装的软件帮我们处理一些数据，然后把处理好的数据推送到某个地方。</p>
<h2 id="前提">前提</h2>
<h3 id="创建所需仓库">创建所需仓库</h3>
<ol type="1">
<li>创建 <code>blog</code> 仓库用来存放 Hexo 项目</li>
<li>创建 <code>your.github.io</code> 仓库用来存放静态博客页面</li>
</ol>
<h3 id="生成部署密钥">生成部署密钥</h3>
<p>一路按回车直到生成成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -f github-deploy-key</span></span><br></pre></td></tr></table></figure>
<p>当前目录下会有 <code>github-deploy-key</code> 和 <code>github-deploy-key.pub</code> 两个文件。</p>
<h3 id="配置部署密钥">配置部署密钥</h3>
<p>复制 <code>github-deploy-key</code> 文件内容，在 <code>blog</code> 仓库 <code>Settings -&gt; Secrets -&gt; Add a new secret</code> 页面上添加。</p>
<ol type="1">
<li>在 <code>Name</code> 输入框填写 <code>HEXO_DEPLOY_PRI</code>。</li>
<li>在 <code>Value</code> 输入框填写 <code>github-deploy-key</code> 文件内容。</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108281718228.png" alt="Key" /><figcaption aria-hidden="true">Key</figcaption>
</figure>
<p>复制 <code>github-deploy-key.pub</code> 文件内容，在 <code>your.github.io</code> 仓库 <code>Settings -&gt; Deploy keys -&gt; Add deploy key</code> 页面上添加。</p>
<ol type="1">
<li>在 <code>Title</code> 输入框填写 <code>HEXO_DEPLOY_PUB</code>。</li>
<li>在 <code>Key</code> 输入框填写 <code>github-deploy-key.pub</code> 文件内容。</li>
<li>勾选 <code>Allow write access</code> 选项。</li>
</ol>
<figure>
<img src="https:\cdn.jsdelivr.net\gh\VivianWestwood\image01\img\202108281722804.png" alt="add-key" /><figcaption aria-hidden="true">add-key</figcaption>
</figure>
<h2 id="编写-github-actions">编写 Github Actions</h2>
<h3 id="workflow-模版">Workflow 模版</h3>
<p>在 <code>blog</code> 仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，目录结构如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure>
<p>在 <code>deploy.yml</code> 文件中粘贴以下内容。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">Sanonz</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">sanonz@126.com</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">sanonz/hexo-theme-concise</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">sanonz/sanonz.github.io</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">12.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/concise</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string">          cp _config.theme.yml themes/concise/_config.yml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>
<h3 id="模版参数说明">模版参数说明</h3>
<ul>
<li><p><em>name</em> 为此 Action 的名字</p></li>
<li><p><em>on</em> 触发条件，当满足条件时会触发此任务，这里的 <code>on.push.branches.$.master</code> 是指当 <code>master</code> 分支收到 <code>push</code> 后执行任务。</p></li>
<li><p>env</p>
<p>为环境变量对象</p>
<ul>
<li><em>env.GIT_USER</em> 为 Hexo 编译后使用此 git 用户部署到仓库。</li>
<li><em>env.GIT_EMAIL</em> 为 Hexo 编译后使用此 git 邮箱部署到仓库。</li>
<li><em>env.THEME_REPO</em> 为您的 Hexo 所使用的主题的仓库，这里为 <code>sanonz/hexo-theme-concise</code>。</li>
<li><em>env.THEME_BRANCH</em> 为您的 Hexo 所使用的主题仓库的版本，可以是：branch、tag 或者 SHA。</li>
<li><em>env.DEPLOY_REPO</em> 为 Hexo 编译后要部署的仓库，例如：<code>sanonz/sanonz.github.io</code>。</li>
<li><em>env.DEPLOY_BRANCH</em> 为 Hexo 编译后要部署到的分支，例如：master。</li>
</ul></li>
<li><p>jobs</p>
<p>为此 Action 下的任务列表</p>
<ul>
<li><p><em>jobs.{job}.name</em> 任务名称</p></li>
<li><p><em>jobs.{job}.runs-on</em> 任务所需容器，可选值：<code>ubuntu-latest</code>、<code>windows-latest</code>、<code>macos-latest</code>。</p></li>
<li><p><em>jobs.{job}.strategy</em> 策略下可以写 <code>array</code> 格式，此 job 会遍历此数组执行。</p></li>
<li><p>jobs.{job}.steps</p>
<p>一个步骤数组，可以把所要干的事分步骤放到这里。</p>
<ul>
<li><em>jobs.{job}.steps.$.name</em> 步骤名，编译时会会以 LOG 形式输出。</li>
<li><em>jobs.{job}.steps.$.uses</em> 所要调用的 Action，可以到 https://github.com/actions 查看更多。</li>
<li><em>jobs.{job}.steps.$.with</em> 一个对象，调用 Action 传的参数，具体可以查看所使用 Action 的说明。</li>
</ul></li>
</ul></li>
</ul>
<h3 id="第三方-actions">第三方 Actions</h3>
<p>使用第三方 Actions 语法 <code>&#123;owner&#125;/&#123;repo&#125;@&#123;ref&#125;</code> 或者 <code>&#123;owner&#125;/&#123;repo&#125;/&#123;path&#125;@&#123;ref&#125;</code> 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v2</span><br></pre></td></tr></table></figure>
<p>一、调用 <code>actions/checkout@v2</code> 可以实现 Checkout 一个 git 仓库到容器。</p>
<p>例如 Checkout 当前仓库到本地，<code>with.repo</code> 不填写默认为当前仓库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v2</span><br><span class="line">        # with:</span><br><span class="line">          # repository: $&#123;&#123; github.repository &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>例如 Checkout 第三方仓库 <code>git@github.com:sanonz/hexo-theme-concise.git</code> 的 <code>master</code> 分支到容器 <code>themes/concise</code> 目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v2</span><br><span class="line">      - with:</span><br><span class="line">          repository: sanonz/hexo-theme-concise</span><br><span class="line">          ref: master</span><br><span class="line">          path: themes/concise</span><br></pre></td></tr></table></figure>
<p>二、调用 <code>actions/setup-node@v1</code> 可以配置容器 Node.js 环境。</p>
<p>例如安装 Node.js 版本 v12 到容器中，<code>with.node-version</code> 可以指定 Node.js 版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/setup-node@v1</span><br><span class="line">      - with:</span><br><span class="line">          node-version: v12</span><br></pre></td></tr></table></figure>
<p>可以在这里查找更多 Actions 以及使用方式 <a href="https://github.com/marketplace?type=actions&amp;query=checkout">官方 Actions 市场</a>。</p>
<h3 id="配置文件">配置文件</h3>
<p>复制一份 https://github.com/sanonz/hexo-theme-concise/blob/master/_config.example.yml，放到 <code>blog</code> 根目录下，名为 <code>_config.theme.yml</code>，如果您已经配置过此文件，只需要把您的复制过来就行。</p>
<p>最终目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">├── _config.theme.yml</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure>
<p>把 <code>_config.theme.yml</code> 与 <code>deploy.yml</code> 文件推送到 <code>blog</code> 仓库，在此仓库 <code>Actions</code> 页面可以看到一个名字为 <code>CI</code> 的 Action。</p>
<h3 id="执行任务">执行任务</h3>
<p>写一篇文章，<code>push</code> 到 <code>blog</code> 仓库的 <code>master</code> 分支，在此仓库 <code>Actions</code> 页面查看当前 task。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108281724234.png" alt="运行图" /><figcaption aria-hidden="true">运行图</figcaption>
</figure>
<p>当任务完成后查看您的博客 <code>https://your.github.io</code>，如果不出意外的话已经可以看到新添加的文章了。</p>
<h2 id="小结">小结</h2>
<p>偷懒是人类发展的动力，人都有偷懒的想法，目的就是为了让自己能够活得更好，经过几千年的不断发展，现在人偷懒的方式无疑更加的先进。</p>
<p>至此结束，感谢阅读。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>CI</tag>
        <tag>Github Actions</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Navicat连接群晖的PostgreSQL套件数据库</title>
    <url>/posts/23557/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>群晖的类似 Moments、Audio station、Video Station 等套件都是使用群晖内置的一个 PostgreSQL 数据库，记录一下连接这个数据库的方法。温馨提示： 群晖多个套件均依赖此数据库，没有一定基础的同学，请做好备份，自行评估操作风险。</p>
<span id="more"></span>
<h2 id="创建数据库用户并授权">创建数据库用户并授权</h2>
<p>　　打开ssh 连接并群晖获取 root 权限，切换到 posgres 用户，进入 <code>psql</code> 交互命令行，创建新用户并授权：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到postgres用户</span></span><br><span class="line">su - postgres</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入posql交互</span></span><br><span class="line">psql</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建用户</span></span><br><span class="line">CREATE USER 用户名 PASSWORD &#x27;密码&#x27;;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权所有权限</span></span><br><span class="line">ALTER USER 用户名 WITH SUPERUSER CREATEDB;</span><br><span class="line">ALTER USER 用户名 WITH CREATEDB;</span><br><span class="line">ALTER USER 用户名 WITH CREATEROLE;</span><br><span class="line">ALTER USER 用户名 WITH REPLICATION;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看用户列表 看是否执行成功</span></span><br><span class="line">\du</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出psql</span></span><br><span class="line">\q</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出postgres用户，回到root下</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>　　修改 <code>pg_hba.conf</code>，将新建的用户授权登陆：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/postgresql/pg_hba.conf</span><br></pre></td></tr></table></figure>
<p>　　原始内容为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> TYPE  DATABASE        USER            ADDRESS                 METHOD</span></span><br><span class="line"></span><br><span class="line">local   all             postgres                                peer map=pg_root</span><br><span class="line">local   all             all                                     peer</span><br></pre></td></tr></table></figure>
<p>　　我们新增一行，<code>host all 用户名 127.0.0.1/0 md5</code>，修改之后内容为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> TYPE  DATABASE        USER            ADDRESS                 METHOD</span></span><br><span class="line">host    all             用户名           127.0.0.1/0             md5</span><br><span class="line">local   all             postgres                                peer map=pg_root</span><br><span class="line">local   all             all                                     peer</span><br></pre></td></tr></table></figure>
<p>　　重新载入配置文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su -l postgres -c &quot;exec /usr/bin/pg_ctl reload&quot;</span><br></pre></td></tr></table></figure>
<h2 id="修改群晖sshd配置允许端口转发">修改群晖sshd配置，允许端口转发</h2>
<p>　　不进行此步操作，后面使用 ssh 隧道连接数据库的时候，终端会出现类似 <code>channel 4: open failed: administratively prohibited: open failed</code> 的报错。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>　　在约 86 行（Alliot的是DSM6.2版本），找到<code>AllowTcpForwarding no</code> 将其改为 <code>AllowTcpForwarding yes</code>,保存退出（<code>i</code> 为编辑，编辑完后，按一下 <code>ESC</code>，依次输入<code>:wq</code>即可保存退出）。 直接登陆网页的 DSM 控制台，依次进入 控制面板——终端机和SNMP——终端机，将“启动SSH功能”取消勾选，应用之后，重新勾选并应用，即可重启 <code>sshd</code> 服务。（<code>synoservice</code>没找到<code>sshd</code>服务，直接用控制台吧=.=!）</p>
<h2 id="使用navicat连接数据库">使用Navicat连接数据库</h2>
<p>　　新建——PostgreSQL，连接名随意，主机填写127.0.0.1，端口填写 PostgreSQL 监听的端口 5432，初始数据库填写 <code>postgres</code>，用户名、密码为前面新建数据库用户设置的，在 “SSH” 页选择使用 SSH 通道，IP、用户名、密码使用群晖的 ssh 连接信息即可。 　　使用 macOS 的同学如果 Navicat 自带的 SSH 通道兼容性有问题的，可以本地使用SSH隧道进行端口转发：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1234为本地监听的端口，5432 为群晖上postgreSQL的监听端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> root@192.168.1.2 -p 22 表示Alliot的群晖用户名为root，IP为192.168.1.2，sshd端口为22</span></span><br><span class="line">ssh -L 5432:127.0.0.1:5432 root@192.168.1.2 -p 22</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看macOS本地监听的端口，出现1234端口的监听则OK</span></span><br><span class="line">netstat -AaLlnW</span><br></pre></td></tr></table></figure>
<p>之后 Navicat 连接时，端口填 5432 。</p>
<h2 id="删除用户回收权限">删除用户，回收权限</h2>
<p>　　操作完成后，如果需要回收权限，恢复到原样。只需要删除我们新增的那行 <code>pg_hba.conf</code> 配置文件的内容。进入 <code>psql</code> 交互命令中，执行即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drop user 用户名;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Nas</category>
        <category>Synology</category>
      </categories>
      <tags>
        <tag>Nas</tag>
        <tag>群晖</tag>
        <tag>Synology</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Vercel搭建Hexo博客</title>
    <url>/posts/57271/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>也许你想拥有一套自己的博客，方便面试的时候想展示自我，或者想记录自己的生活，但是一直没有找到合适的平台。</p>
<p>也许你有一些自己的小玩意想部署到服务器，但是服务器有有点小贵，打工人又舍不得。</p>
<p>那么 Vercel平台可能是你不错的选择，免费且访问速度快，支持自定义域名！</p>
<p>本文的主要目的是帮助想拥有自己的博客的朋友，提供一套完整的博客搭建方案。</p>
<span id="more"></span>
<h2 id="介绍">介绍</h2>
<h3 id="vercel">Vercel</h3>
<p>Vercel提供了一个云平台，可以优化整个项目开发和部署体验，它有很强大的功能值得去探索，个人使用是免费的，提供了域名访问，使用方便快捷。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211934762.jpeg" alt="Vercel" /><figcaption aria-hidden="true">Vercel</figcaption>
</figure>
<h3 id="hexo">Hexo</h3>
<p>Hexo是一个基于 nodejs 的静态博客网站生成器，通过使用脚手架安装后，命令操作简单，直接开箱使用，支持丰富的主题，支持高度的自定义化，主要使用 markdown 语法。你可以自行开发插件，优化你的博客。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211934384.jpeg" alt="Hexo" /><figcaption aria-hidden="true">Hexo</figcaption>
</figure>
<h2 id="搭建步骤">搭建步骤</h2>
<h3 id="注册vercel">注册Vercel</h3>
<p>首先，在 Vercel官网（<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fvercel.com%2F">https://vercel.com/</a>）注册一个新账户，注册新用户必须使用 Github、Gitlab 或者 Bitbucket 的账户进行授权，并绑定手机号。注册完成后，可以在配置页面修改自己的邮箱地址。这里建议使用 Github 进行授权登陆，后续可以选择 Github 上的项目直接部署也会很方便的。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211935533.jpeg" alt="Vercel" /><figcaption aria-hidden="true">Vercel</figcaption>
</figure>
<h3 id="登陆系统">登陆系统</h3>
<p>注册成功后，就可以登陆系统，查看和设置相关的东西啦。</p>
<h3 id="创建项目">创建项目</h3>
<p>Vercel平台中支持选择多种项目模版，包括但不限于 Next.js，Nuxt.js，Hexo，Angular 等多种类型，这里我们选择的当然是 Hexo 模版。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211939824.png" alt="创建项目" /><figcaption aria-hidden="true">创建项目</figcaption>
</figure>
<p>登陆系统后点击<code>new project</code>，创建新项目</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211940032.png" alt="创建新项目" /><figcaption aria-hidden="true">创建新项目</figcaption>
</figure>
<p>进入到项目选择，可以选择 git 仓库中已存在的项目，也可以选择系统提供的模版项目，这里我们选择系统提供的模版项目，点击右方下面的<code>Browse All Templates</code>找到 Hexo 模版项目。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211941072.png" alt="找到 Hexo 模版项目" /><figcaption aria-hidden="true">找到 Hexo 模版项目</figcaption>
</figure>
<p>选择模版后，进入创建项目位置选择，目前团队项目是需要专业版的，是需要收费的，选择个人，点击<code>PERSONAL ACCOUNT</code>后面的 select 按钮。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211943529.png" alt="选择个人" /><figcaption aria-hidden="true">选择个人</figcaption>
</figure>
<p>进入到创建仓库位置，可以选择 Github、Gitlab、Bitbucket，根据自己的需要选择仓库保存地址。这里我选择 Github。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211943378.png" alt="选择 Github" /><figcaption aria-hidden="true">选择 Github</figcaption>
</figure>
<p>选择 Github 后，因为我登陆的时候时使用了 Github 了授权，这里也就直接显示了我的 GitHub 名称，我们填入仓库名称为 hexo，你也可以填入其他的仓库名称，比如 blog、myblog 等。Create private Git Repository 可以勾选，也可以不勾选，勾选的话会创建私人仓库，这样别人看你的 Github 的时候不会看到这个仓库。选择好后，点击 create进入下一步。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211944860.png" alt="建仓库" /><figcaption aria-hidden="true">建仓库</figcaption>
</figure>
<p>进入下一步后，这里需要配置项目名称 PROJECT NAME，即在项目生成后的 package.json 中的 name 字段，这里我们保持默认就好，也可以填自己喜欢的名字；FRAMEWORK PRESET 默认选择 Hexo 不变，因为我们要创建的是 hexo 的博客；Build and Output Seettings 中可以配置自定义打包命令，打开后面的 override 选项后，可以设置我们的自定义打包命令和打包后输出的文件夹名字。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211945021.png" alt="配置项目" /><figcaption aria-hidden="true">配置项目</figcaption>
</figure>
<p>这里我们可以先不设置，保持默认，如果有需要后续可以在设置中进行更改，比如我的项目中打包之后使用了 gulp 进行了代码压缩，所以这里的命令进行了自定义</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211945160.jpeg" alt="自定义命令" /><figcaption aria-hidden="true">自定义命令</figcaption>
</figure>
<p>设置完毕后，点击 Depoly 进行项目创建，部署即可。等待大概不到 1 分钟，项目就部署好了。会跳转到恭喜你，项目创建成功的页面。这时就可以点击 visit 按钮进行访问了，因为 Vercel提供了免费的域名，所以直接访问即可。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211945260.png" alt="直接访问" /><figcaption aria-hidden="true">直接访问</figcaption>
</figure>
<p>至此，我们的 Hexo 博客就搭建完成了，在 GitHub 中也已经自动创建了这个博客项目，整个过程的操作还是很简单、很友好的。</p>
<h3 id="基本使用">基本使用</h3>
<p>在 GitHub 中将我们创建好的博客项目 clone 到本地，打开后会有以下文件目录：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">│  package.json</span><br><span class="line">│  _config.yml</span><br><span class="line">├─scaffolds</span><br><span class="line">│      draft.md</span><br><span class="line">│      page.md</span><br><span class="line">│      post.md</span><br><span class="line">├─source</span><br><span class="line">│  └─_posts</span><br><span class="line">│          文章存放处.md</span><br><span class="line">└─themes</span><br></pre></td></tr></table></figure>
<p>主要有三个文件夹：scaffolds（模版文件夹）、source（源文件夹）、themes（主题文件夹），以及最外层的_config.yml 项目配置文件。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202109211946521.png" alt="浏览器访问" /><figcaption aria-hidden="true">浏览器访问</figcaption>
</figure>
<h3 id="基本命令">基本命令</h3>
<ul>
<li><code>hexo s</code> 启动本地服务</li>
<li><code>hexo clean</code> 清除缓存</li>
<li><code>hexo g</code> 打包</li>
<li><code>hexo new post article</code> 创建一个名称为 article 的文章</li>
<li><code>hexo new page about</code> 创建一个名称为 about 的路由页面</li>
</ul>
<h3 id="配置主题">配置主题</h3>
<p>目前 hexo 官方有 330 套主题可供选择，另外 GitHub 上也有许多个人开发的主题可以使用，部分主题支持了使用 npm 包的方式进行安装配置。默认的主题配置方式是将主题仓库中的内容直接 clone 下来放到 themes 文件夹下，并根据主题名称在_config.yml 中进行配置。具体的博客主题配置方式需要根据主题中的设置项进行。还有一种是通过安装 npm 包的方式，这时候就不需要 themes 这个文件夹了，在 package.json 中安装了主题包以后，根据主题开发者的指导进行配置即可。</p>
<h2 id="总结">总结</h2>
<p>  至此，我们的博客就成功搭建并可供外部访问啦。Vercel中也支持自定义域名，如果你有自己的域名也可以在其中配置使用自己的域名进行访问。另外你也无需关注部署发布的问题，只要你在 GitHub 中将你新建的文章进行了 git 提交，Vercel会自触发打包部署，完事还可以给你发邮件通知。</p>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>Vercel</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Hexo</tag>
        <tag>Vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Vercel搭建一个高颜值的第三方网易云播放器</title>
    <url>/posts/64236/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p><a href="https://github.com/qier222/YesPlayMusic">qier222/YesPlayMusic</a></p>
<p>高颜值的第三方网易云播放器，支持 Windows / macOS / Linux</p>
<span id="more"></span>
<h2 id="项目特点">项目特点</h2>
<ul>
<li>✅ 使用 Vue.js 全家桶开发</li>
<li>🔴 网易云账号登录（扫码/手机/邮箱登录）</li>
<li>📺 支持 MV 播放</li>
<li>📃 支持歌词显示</li>
<li>📻 支持私人 FM / 每日推荐歌曲</li>
<li>🚫🤝 无任何社交功能</li>
<li>🌎️ 海外用户可直接播放（需要登录网易云账号）</li>
<li>🔐 支持 UnblockNeteaseMusic（使用 revincx 修复的 npm 包），自动使用 QQ/酷狗/酷我音源替换变灰歌曲链接 （网页版不支持）</li>
<li>✔️ 每日自动签到（手机端和电脑端同时签到）</li>
<li>🌚 Light/Dark Mode 自动切换</li>
<li>👆 支持 Touch Bar</li>
<li>🖥️ 支持 PWA，可在 Chrome/Edge 里点击地址栏右边的 ➕ 安装到电脑</li>
<li>🗯支持 Last.fm Scrobble</li>
<li>☁️ 支持音乐云盘</li>
<li>⌨️ 自定义快捷键和全局快捷键</li>
<li>🛠 更多特性开发中</li>
</ul>
<h2 id="截图">截图</h2>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092341294.png" alt="主页" /><figcaption aria-hidden="true">主页</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092342367.png" alt="歌词页面" /><figcaption aria-hidden="true">歌词页面</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092345049.png" alt="专辑页面" /><figcaption aria-hidden="true">专辑页面</figcaption>
</figure>
<h2 id="安装步骤">安装步骤</h2>
<h3 id="部署网易云-api">部署网易云 API</h3>
<p>详情参见 <a href="https://neteasecloudmusicapi.vercel.app/#/?id=安装">Binaryify/NeteaseCloudMusicApi</a> 。</p>
<p>你也可以将 API 部署到 Vercel，请点击<a href="https://blog.5772447.xyz/2021/VeAp/">教程</a>。</p>
<h3 id="fork项目">Fork项目</h3>
<p>打开 <a href="https://github.com/qier222/YesPlayMusic">Github 项目</a>，点击本仓库右上角的 Fork，复制本仓库到你的 GitHub 账号。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092050768.png" alt="打开Github项目" /><figcaption aria-hidden="true">打开Github项目</figcaption>
</figure>
<h3 id="使用-github-登录">使用 GitHub 登录</h3>
<p>打开 <a href="https://vercel.com/">Vercel.com</a>，使用 GitHub 登录。</p>
<h3 id="点击-new-project">点击 New Project</h3>
<p>在 Vercel 官网点击 New Project。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092332356.png" alt="新建项目" /><figcaption aria-hidden="true">新建项目</figcaption>
</figure>
<h3 id="导入项目">导入项目</h3>
<p>点击 Import Git Repository 并选择你刚刚复制的仓库并点击 Import。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092333241.png" alt="点击 Import" /><figcaption aria-hidden="true">点击 Import</figcaption>
</figure>
<h3 id="点击-skip">点击 Skip</h3>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092053328.png" alt="选择Skip" /><figcaption aria-hidden="true">选择Skip</figcaption>
</figure>
<h3 id="点击-environment-variables">点击 Environment Variables</h3>
<p>填写 Name 为 <code>VUE_APP_NETEASE_API_URL</code>，Value 为你刚刚部署的网易云 API 地址，点击 Add。最后点击底部的 Deploy 就可以部署到 Vercel 了。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092347180.png" alt="填写环境变量" /><figcaption aria-hidden="true">填写环境变量</figcaption>
</figure>
<h3 id="添加域名">添加域名</h3>
<p>如果你想绑定自己域名，可以在Project Settings -&gt; Domains 添加域名，CNAME解析有些慢要等很久。</p>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>Vercel</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Vercel部署网易云音乐API</title>
    <url>/posts/49698/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>Vercel 之前叫Zeit，是一家提供静态网站托管的云平台，支持从 Github, GitLab, Bitbucket 等代码仓库中自动拉取代码 然后进行项目打包和部署等功能。这里将使用Vercel平台部署网易云音乐API，Vercel 部署项目真的是0配置，无脑部署。在国内的访问速度也还可以。</p>
<span id="more"></span>
<h2 id="部署步骤">部署步骤</h2>
<h3 id="使用github登录">使用Github登录</h3>
<p>打开<a href="https://vercel.com/">Vercel官网</a>，使用Github登录。</p>
<h3 id="打开github项目">打开Github项目</h3>
<p>打开<a href="https://github.com/Binaryify/NeteaseCloudMusicApi">Github项目</a>，点击右上角的 fork</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092050768.png" alt="打开Github项目" /><figcaption aria-hidden="true">打开Github项目</figcaption>
</figure>
<h3 id="新建项目">新建项目</h3>
<p>在Vercel里面点 <strong>New Project</strong> 新建一个项目</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092050293.png" alt="新建项目" /><figcaption aria-hidden="true">新建项目</figcaption>
</figure>
<h3 id="导入项目">导入项目</h3>
<p>Import Git Repository 中选择你刚才fork的项目点击<strong>import</strong></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092051613.png" alt="导入项目" /><figcaption aria-hidden="true">导入项目</figcaption>
</figure>
<h3 id="选择skip">选择Skip</h3>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092053328.png" alt="选择Skip" /><figcaption aria-hidden="true">选择Skip</figcaption>
</figure>
<h3 id="点击deploy">点击Deploy</h3>
<p>PROJECT NAME内填写项目名称，然后直接点击Deploy。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092055025.png" alt="image-20211009205518962" /><figcaption aria-hidden="true">image-20211009205518962</figcaption>
</figure>
<h3 id="部署完成">部署完成</h3>
<p>耐心等待一小会，看到这样就已经部署完成了。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202110092057964.png" alt="部署完成" /><figcaption aria-hidden="true">部署完成</figcaption>
</figure>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>Vercel</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>关于群晖优化可以用的一键命令</title>
    <url>/posts/55612/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文是关于群晖优化可以用的一键命令，适用于DSM6.1X和6.2X。</p>
<span id="more"></span>
<h2 id="食用方法">食用方法</h2>
<ol type="1">
<li>用管理员登录群晖，控制面板，终端机和SNMP，在“启用SSH功能”打勾，并设置一个端口号，应用</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/1-8.jpg" alt="启用SSH功能" /><figcaption aria-hidden="true">启用SSH功能</figcaption>
</figure>
<ol start="2" type="1">
<li>在Win系统，打开Xshell软件，用admin用户以SSH的方式登录群晖；</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/2-8.jpg" alt="登录群晖" /><figcaption aria-hidden="true">登录群晖</figcaption>
</figure>
<ol start="3" type="1">
<li>输入 sudo-i 回车，并输入admin用户的密码（输入密码的时候，屏幕上是没有任何显示的，输完密码直接回车），即可进入临时的root权限状态下；</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/3-8.jpg" alt="进入临时的root权限" /><figcaption aria-hidden="true">进入临时的root权限</figcaption>
</figure>
<ol start="4" type="1">
<li>根据需要复制上面的一键命令到这里面运行，有些需要重启才生效的命令，需要重启群晖。</li>
</ol>
<h2 id="命令内容">命令内容</h2>
<ul>
<li>一键开启DSM6.1X的root权限，命令行最后面的123456是设置root的密码，可以自己修改再运行，重启后生效。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">synouser --setpw root 123456</span><br></pre></td></tr></table></figure>
<ul>
<li>一键开启DSM6.2X的root权限，命令行最后面的123456是设置root的密码，可以自己修改再运行，重启后生效。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 /etc/ssh/sshd_config &amp;&amp; sed -i &#x27;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config &amp;&amp; synouser --setpw root 123456</span><br></pre></td></tr></table></figure>
<ul>
<li>一键恢复Video、Emby、Plex等多媒体套件的刮削，无需重启立即生效。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;13.225.143.127 image.tmdb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;13.225.143.3 image.tmdb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;13.225.103.26 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;13.225.103.45 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;13.225.103.51 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;13.225.103.110 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;13.227.73.103 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;13.226.238.82 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;13.266.238.82 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;13.227.73.103 image.tmdb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;54.230.62.121 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;99.84.216.21 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;99.84.216.37 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;99.84.216.80 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;99.84.216.118 api.themoviedb.org&quot;&gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>
<ul>
<li>一键修复Moments人脸识别（运行命令之前先把Moments套件停用，运行命令后把套件开启，电脑登录Moments，在Moments左下角菜单进去点重建索引，索引完成后生效）。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -SLO https://wp.gxnas.com/wp-content/uploads/2019/10/libsynophoto-plugin-detection.so &amp;&amp; mv -f /root/libsynophoto-plugin-detection.so /var/packages/SynologyMoments/target/usr/lib/</span><br></pre></td></tr></table></figure>
<ul>
<li>一键解决DSM6.2非二合一系统升级到最新版会报错的问题，运行命令后重启群晖再升级就不会报错了。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -SLO https://wp.gxnas.com/wp-content/uploads/2020/07/FixSynoboot.sh &amp;&amp; mv /volume1/docker/FixSynoboot.sh /usr/local/etc/rc.d/ &amp;&amp; chmod 755 /usr/local/etc/rc.d/FixSynoboot.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>一键去除桌面小红点并屏蔽升级（仅限DSM6.22以之前的版本，不包括DSM6.23及以上版本），运行后生效。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_badge_num.png /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_badge_num_bak.png &amp;&amp; mv /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_badge_num.png /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_badge_num_bak.png &amp;&amp; wget -O /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_badge_num.png https://wp.gxnas.com/wp-content/uploads/2020/05/transparent.png &amp;&amp; wget -O /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_badge_num.png https://wp.gxnas.com/wp-content/uploads/2020/05/transparent.png &amp;&amp; echo &quot;127.0.0.1 update.synology.com&quot; &gt; /etc/hosts</span><br></pre></td></tr></table></figure>
<ul>
<li>一键显示正确的CPU型号（运行后选择菜单1），重启后生效。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -SLO https://wp.gxnas.com/wp-content/uploads/2019/08/ch_cpuinfo &amp;&amp; chmod 755 ch_cpuinfo &amp;&amp; ./ch_cpuinfo</span><br></pre></td></tr></table></figure>
<ul>
<li>一键给黑群晖DS918+开启M.2 Nvme固态硬盘做缓存（只支持6.21/6.22版本），重启后生效。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -SLO https://wp.gxnas.com/wp-content/uploads/2020/02/libNVMEpatch.sh &amp;&amp; mv -f /root/libsynonvme.so.1 /usr/local/etc/rc.d/ &amp;&amp; chmod 755 /usr/local/etc/rc.d/libNVMEpatch.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>一键给黑群晖DS918+开启M.2 Nvme固态硬盘做缓存（只支持6.23/6.23up2/6.23up3版本），重启后生效。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -SLO https://wp.gxnas.com/wp-content/uploads/2020/02/libsynonvme.so.1 &amp;&amp; mv -f /root/libsynonvme.so.1 /usr/lib64/ &amp;&amp; chmod 755 /usr/lib64/libsynonvme.so.1 &amp;&amp; rm /usr/local/etc/rc.d/libNVMEpatch.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>一键预防DS3617出现“抱歉，您所指定的页面不存在”现象（只支持DS3617-6.17-15284版本。出现该问题之前，在“群晖控制面板—任务计划—新增—计划的任务—用户定义的脚本—任务设置”中添加以下命令，并设置每天0点运行，并非在SSH下运行）。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -SLO https://wp.gxnas.com/wp-content/uploads/2020/02/libsynopkg.so.1 &amp;&amp; curl -SLO https://wp.gxnas.com/wp-content/uploads/2020/02/libsynoshare.so.6 &amp;&amp; mv -f /root/libsynopkg.so.1 /lib/ &amp;&amp; mv -f /root/libsynoshare.so.6 /lib/ &amp;&amp; chmod 644 /lib/libsynopkg.so.1 &amp;&amp; chmod 644 /lib/libsynoshare.so.6</span><br></pre></td></tr></table></figure>
<ul>
<li>一键对Windows通过SMB协议访问群晖的无权限用户隐藏群晖根目录：正常情况下，在群晖的控制面板—共享文件夹勾选【在“网上邻居”隐藏此共享文件夹】以后，在Windows通过SMB协议用非管理员账号访问群晖，依然会看到该文件夹，只不过双击进去会弹出登录的窗口；设置好以下的参数，重启群晖后，非管理员通过SMB协议访问群晖，就看不到该文件夹了。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;mapto guest=never&quot;&gt;&gt; /etc/samba/smb.conf &amp;&amp; echo &quot;accessbased share enum=yes&quot;&gt;&gt; /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/QQ20210309225514.jpg" alt="隐藏此共享文件夹" /><figcaption aria-hidden="true">隐藏此共享文件夹</figcaption>
</figure>
]]></content>
      <categories>
        <category>Nas</category>
        <category>Synology</category>
      </categories>
      <tags>
        <tag>Nas</tag>
        <tag>群晖</tag>
        <tag>Synology</tag>
      </tags>
  </entry>
  <entry>
    <title>可远程开户的美国银行合集</title>
    <url>/posts/35209/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>远程开什么美国银行？只有身份证？只有护照？你可能需要这篇教程</p>
<p>本文通过多角度综合对比分析打表方式来比较主流的美国的借记卡、信用卡开户条件和成本</p>
<p>本文的前提条件是无大额成本&amp;不出境开美国银行、金融机构的银行账户、借记卡信用卡</p>
<p>本文没提到的大多数是意义不大，大同小异，成功率低，风控高，成本高，不好用，不适合的，不代表没有</p>
<span id="more"></span>
<h2 id="总表">总表</h2>
<table>
<thead>
<tr class="header">
<th>银行/机构名字</th>
<th>卡类型</th>
<th>基础成本</th>
<th>月费</th>
<th>材料</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>信用记录</td>
<td>地址证明</td>
<td>税号ITIN/SSN</td>
<td>身份证件</td>
<td>签证/居留</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>AMEX</td>
<td>信用卡副卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>X</td>
<td>二选一</td>
<td>X</td>
<td></td>
</tr>
<tr class="odd">
<td>AMEX</td>
<td>信用卡</td>
<td>0</td>
<td>0</td>
<td>要</td>
<td>X</td>
<td>要</td>
<td>可能不用</td>
<td>X</td>
</tr>
<tr class="even">
<td>AMEX</td>
<td>信用卡</td>
<td>0</td>
<td>0</td>
<td>要</td>
<td>X</td>
<td>X</td>
<td>可能不用</td>
<td>X</td>
</tr>
<tr class="odd">
<td>Capital One</td>
<td>押金信用卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>可能不用</td>
<td>要</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>Capital One</td>
<td>借记卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>可能不用</td>
<td>要</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="odd">
<td>Discover</td>
<td>借记卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>要</td>
<td>SSN</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>Discover</td>
<td>借记卡</td>
<td>0</td>
<td>0</td>
<td>要</td>
<td>X</td>
<td>ITIN</td>
<td>可能不用</td>
<td>X</td>
</tr>
<tr class="odd">
<td>Discover</td>
<td>信用卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>要</td>
<td>SSN</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>Sable</td>
<td>押金信用/借记卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>要</td>
<td>X</td>
<td>护照</td>
<td>签证</td>
</tr>
<tr class="odd">
<td>Cheese</td>
<td>借记卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>X</td>
<td>和签证二选一</td>
<td>护照</td>
<td>签证</td>
</tr>
<tr class="even">
<td>Revolut</td>
<td>预付信用/借记卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>可能不用</td>
<td>X</td>
<td>可能不用</td>
<td>签证</td>
</tr>
<tr class="odd">
<td>Bank of A</td>
<td>借记卡</td>
<td>几千非法代办</td>
<td>存1500U</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>身份证+护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>AppleCash</td>
<td>预付借记卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>X</td>
<td>要</td>
<td>USID</td>
<td>X</td>
</tr>
<tr class="odd">
<td>AppleCash</td>
<td>预付借记卡</td>
<td>0</td>
<td>0</td>
<td>要</td>
<td>X</td>
<td>要</td>
<td>可能不用</td>
<td>X</td>
</tr>
<tr class="even">
<td>AppleCard</td>
<td>信用卡副卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr class="odd">
<td>Citi</td>
<td>借记卡</td>
<td>0</td>
<td>存1500U</td>
<td>X</td>
<td>可能不用</td>
<td>要</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>Citi</td>
<td>押金信用卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>可能不用</td>
<td>要</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="odd">
<td>Chase</td>
<td>借记卡</td>
<td>0</td>
<td>存500U</td>
<td>X</td>
<td>可能不用</td>
<td>要</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>Usbank</td>
<td>借记卡</td>
<td>0</td>
<td>4.95U</td>
<td>X</td>
<td>可能不用</td>
<td>要</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="odd">
<td>Usbank</td>
<td>借记卡</td>
<td>0</td>
<td>存1000U</td>
<td>X</td>
<td>可能不用</td>
<td>要</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>One Finance</td>
<td>预付信用/借记卡</td>
<td>0</td>
<td>0</td>
<td>要</td>
<td>可能不用</td>
<td>要</td>
<td>可能不用</td>
<td>X</td>
</tr>
<tr class="odd">
<td>Passbook</td>
<td>借记卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>要</td>
<td>X</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>Passbook</td>
<td>借记卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>X</td>
<td>要</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="odd">
<td>GO2bank</td>
<td>押金信用/借记卡</td>
<td>0</td>
<td>5U</td>
<td>X</td>
<td>可能不用</td>
<td>要</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>华美VELO</td>
<td>押金信用/借记卡</td>
<td>2500U首充</td>
<td>存2500U</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>中国大陆身份证</td>
<td>X</td>
</tr>
<tr class="odd">
<td>华美</td>
<td>押金信用/借记卡</td>
<td>三千见证</td>
<td>存1500U</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>国泰</td>
<td>有户无卡</td>
<td>几千见证</td>
<td>不清楚</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>中国大陆身份证</td>
<td>X</td>
</tr>
<tr class="odd">
<td>Bank of Hawaii</td>
<td>不清楚</td>
<td>不清楚</td>
<td>不清楚</td>
<td>可能不用</td>
<td>可能不用</td>
<td>要</td>
<td>护照</td>
<td>X</td>
</tr>
<tr class="even">
<td>GoogleBalance</td>
<td>预付借记卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>可能不用</td>
<td>要</td>
<td>护照/USID</td>
<td>X</td>
</tr>
<tr class="odd">
<td>WISE</td>
<td>预付借记卡</td>
<td>9U</td>
<td>0</td>
<td>X</td>
<td>可能不用</td>
<td>不需要</td>
<td>护照/USID</td>
<td>X</td>
</tr>
<tr class="even">
<td>嘉信国际</td>
<td>证券借记卡</td>
<td>25000U首充</td>
<td>0</td>
<td>X</td>
<td>要</td>
<td>X</td>
<td>身份证/护照</td>
<td>X</td>
</tr>
<tr class="odd">
<td>SehWebUS</td>
<td>证券借记卡</td>
<td>0</td>
<td>0</td>
<td>X</td>
<td>可能不用</td>
<td>要</td>
<td>护照/USID</td>
<td>X</td>
</tr>
</tbody>
</table>
<h2 id="关于开户借记卡个人建议">关于开户（借记卡）个人建议</h2>
<p>首先不建议非法代开（比如代开BOA，代开华美）</p>
<p>原则上推荐没有询问注册外国人RA的银行（比如Sable，Cheese）和支持见证的银行（比如汇丰见证，国泰见证）</p>
<p>大部分美国银行的支票账户（借记卡）都有区分RA和NRA（非注册外国人），而在线开户常常限制RA（个别除外，比如Sable）</p>
<h3 id="只有中国大陆身份证">只有中国大陆身份证</h3>
<p>能开的比较有限，可能VELO是最低门槛的选择，国泰见证也可以考虑，有钱也可搜索嘉信国际，真有钱也可以问问汇丰HSBC，花旗CITI，渣打SCB能不能见证开</p>
<h3 id="只有中国大陆护照但是没签证没itin">只有中国大陆护照但是没签证没ITIN</h3>
<p>首先原则上建议办ITIN，这个是合法的东西，也可以找中介帮忙（总体大概两三千吧）ITIN原理自己查，代办ITIN相对代开BOA还算合法，如果你有ITIN选择面就大大拓广了。</p>
<p>只有中国大陆护照但是没签证没ITIN，可以考虑但不推荐冒着违法风险去代开银行账户（比如BOA），可以开Passbook（目前风控较高），推荐开见证华美银行，其他没有和单身份证太大差距，有钱也可搜索嘉信国际，真有钱也可以问问汇丰HSBC，花旗CITI，渣打SCB能不能见证开</p>
<h3 id="有中国大陆护照美国签证">有中国大陆护照+美国签证</h3>
<p>这个选择会多几个</p>
<ul>
<li>强烈推荐的Sable</li>
<li>可能不支持旅游签证的Revolut</li>
<li>有点灵的Cheese</li>
<li>然后见证的那几家常常需要签证+护照（汇丰HSBC，花旗CITI，渣打SCB）</li>
</ul>
<h3 id="有中国大陆护照itin">有中国大陆护照+ITIN</h3>
<p>这种情况下，大部分都能开了，自己看表格吧</p>
<ul>
<li>首推Capital One，最水，人最多，也方便下卡，虽然他家缺点很多，但是人家比较水，而且开他家的还双免</li>
<li>GO2bank，Usbank，CITI，Chase等能试试，但是因为风控，成本等问题反而不如C1（Capital One）</li>
<li>当然，硬云嘉信美国（SchwebUS）也是可以考虑的，但是上面这几个常常都要求RA，所以你这个属于违规开户，但是没办法，要么开要么不开，而且上面的几个大银行在ACH功能等方便比较完善</li>
<li>当然，最好用的应该还是Discover，但是没信用记录的，用ITIN开的，加上垃圾地址的，常常需要被要求公证地址，那个很难很麻烦（但是也有成功案例）</li>
<li>也可以考虑先搞信用记录，然后开One Finance</li>
<li>GooglePayBalance建议有信用记录再去开（地址证明+护照+ITIN一般可以）</li>
<li>AppleCash建议1年以上记录再用ITIN试，因为只有一次机会，没有一次过就必须拿美国ID了，AppleCard同理</li>
</ul>
<h2 id="关于开信用卡个人建议">关于开信用卡个人建议</h2>
<h3 id="只有中国大陆身份证-1">只有中国大陆身份证</h3>
<p>不考虑那些预付虚拟信用卡的话，选择还是比较少的</p>
<ul>
<li>会喜得SSN的VELO押金信用卡（不推荐）</li>
<li>AppleCard副卡（还是建议有护照）【推荐】</li>
<li>其他品牌信用卡副卡（不推荐，可能要KYC）</li>
</ul>
<h3 id="只有中国大陆护照但是没签证没itin-1">只有中国大陆护照但是没签证没ITIN</h3>
<ul>
<li>AppleCard副卡【推荐】</li>
<li>AMEX副卡【推荐】</li>
<li>AMEX主卡（有信用记录）【推荐】</li>
<li>其他品牌信用卡副卡</li>
<li>见证的华美押金卡</li>
<li>见证的汇丰HSBC，花旗CITI，渣打SCB可能可以</li>
</ul>
<h3 id="有中国大陆护照签证">有中国大陆护照+签证</h3>
<ul>
<li>AppleCard副卡【推荐】、AMEX副卡【推荐】、AMEX主卡（有信用记录）【推荐】、其他品牌信用卡副卡</li>
<li>见证的华美押金卡、见证的汇丰HSBC，花旗CITI，渣打SCB</li>
<li>Sable押金卡【推荐】</li>
<li>Revolut 虚拟卡</li>
</ul>
<h3 id="有中国大陆护照itin-1">有中国大陆护照+ITIN</h3>
<ul>
<li>见证的华美押金卡、见证的汇丰HSBC，花旗CITI，渣打SCB可能可以</li>
<li>有信用记录的话，大部分信用卡都可以了，比如Chase，CITI，Capital One等</li>
<li>没信用记录的话，各种押金卡都可以试试，比如Capital One，CITI，One Finance 预付信用卡等</li>
<li>AppleCard可能会被要USID，所以建议信用记录长一点</li>
<li>各种副卡一般可以（discover等要求SSN的除外）</li>
<li>AMEX主卡（有信用记录）【推荐】</li>
</ul>
]]></content>
      <categories>
        <category>Leaning</category>
      </categories>
      <tags>
        <tag>Credit Card</tag>
      </tags>
  </entry>
  <entry>
    <title>基于STM32的家庭气象站</title>
    <url>/posts/50115/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/Maskbugzero/ESP8266-Weather-2021">Maskbugzero/ESP8266-Weather-2021</a></p>
<p>一个关于STM32+ESP8266+DHT11的家庭气象站。</p>
<span id="more"></span>
<h2 id="硬件资源">硬件资源</h2>
<ol type="1">
<li>战舰V332F103开发板</li>
<li>ALIENTEK 2.8/3.5/4.3/7寸TFTLCD模块(通过FSMC驱动.FSMC_NE4接LCD片选/A10接RS)</li>
<li>按键KEY0(PE4)/KEY1(PE3)/KEY_UP(PA0.也称之为WK_UP)</li>
<li>ESP8266-12S WIFI模块1个</li>
<li>DHT11模块1个</li>
</ol>
<h2 id="实现功能">实现功能</h2>
<ol type="1">
<li>微信小程序配网</li>
<li>室内温湿度测量及显示</li>
<li>室外天气数据获取及显示</li>
<li>时间显示及网络校准</li>
</ol>
<h2 id="连接方式">连接方式</h2>
<ul>
<li>模块与带有无线网卡的电脑或其他wifi设备连接：采用wifi连接</li>
<li>模块与开发板连接：TTL串口方式</li>
</ul>
<h3 id="atk-esp8266-wifi模块与精英板连接方式">ATK-ESP8266 WIFI模块与精英板连接方式</h3>
<p>TXD&lt;------------&gt;PB11</p>
<p>RXD&lt;------------&gt;PB10</p>
<p>GND&lt;------------&gt;GND</p>
<p>VCC&lt;------------&gt;3.3V\5V</p>
<h3 id="dht11模块与精英板连接方式">DHT11模块与精英板连接方式</h3>
<p>Data&lt;------------&gt;PE11</p>
<h2 id="主要代码">主要代码</h2>
<h3 id="外设初始化">外设初始化</h3>
<p>初始化外设时，若DHT11工作不正常则显示屏无法正常显示。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	LED_Init();		  			<span class="comment">//初始化与LED连接的硬件接口</span></span><br><span class="line">KEY_Init();					<span class="comment">//初始化按键</span></span><br><span class="line">LCD_Init();			   		<span class="comment">//初始化LCD   </span></span><br><span class="line">RTC_Init();</span><br><span class="line">	<span class="keyword">while</span>(DHT11_Init())	<span class="comment">//DHT11初始化	</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;DHT11 出错！\r\n&quot;</span>);</span><br><span class="line">		delay_ms(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">W25QXX_Init();				<span class="comment">//初始化W25Q128</span></span><br><span class="line">tp_dev.init();				<span class="comment">//初始化触摸屏</span></span><br><span class="line">usart3_init(<span class="number">115200</span>);		<span class="comment">//初始化串口3 </span></span><br><span class="line">	my_mem_init(SRAMIN);		<span class="comment">//初始化内部内存池</span></span><br><span class="line">exfuns_init();				<span class="comment">//为fatfs相关变量申请内存  </span></span><br><span class="line">	f_mount(fs[<span class="number">0</span>],<span class="string">&quot;0:&quot;</span>,<span class="number">1</span>); 		<span class="comment">//挂载SD卡 </span></span><br><span class="line">	f_mount(fs[<span class="number">1</span>],<span class="string">&quot;1:&quot;</span>,<span class="number">1</span>); 		<span class="comment">//挂载FLASH.</span></span><br></pre></td></tr></table></figure>
<h3 id="微信小程序配网">微信小程序配网</h3>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/RFhd54.png" alt="微信小程序配网" /><figcaption aria-hidden="true">微信小程序配网</figcaption>
</figure>
<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一键配网设置</span></span><br><span class="line"><span class="function">u8 <span class="title">atk_8266_wifi_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(atk_8266_send_cmd(<span class="string">&quot;AT&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">20</span>))<span class="comment">//检查WIFI模块是否在线</span></span><br><span class="line">	&#123;</span><br><span class="line">		atk_8266_quit_trans();<span class="comment">//退出透传</span></span><br><span class="line">		atk_8266_send_cmd(<span class="string">&quot;AT+CIPMODE=0&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">200</span>);  <span class="comment">//关闭透传模式	</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;未检测到模块!!!&quot;</span>);</span><br><span class="line">		delay_ms(<span class="number">800</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;尝试连接模块...&quot;</span>); </span><br><span class="line">	&#125; </span><br><span class="line">	u3_printf(<span class="string">&quot;AT+RESTORE&quot;</span>);		<span class="comment">//恢复出厂设置</span></span><br><span class="line">	delay_ms(<span class="number">1000</span>);      <span class="comment">//延时3S等待恢复成功</span></span><br><span class="line">	delay_ms(<span class="number">1000</span>);</span><br><span class="line">	delay_ms(<span class="number">1000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;恢复出厂设置完成&quot;</span>); </span><br><span class="line">	atk_8266_send_cmd(<span class="string">&quot;AT+RST&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">20</span>);		<span class="comment">//软重启</span></span><br><span class="line">	delay_ms(<span class="number">1000</span>);         <span class="comment">//延时3S等待重启成功</span></span><br><span class="line">	delay_ms(<span class="number">1000</span>);</span><br><span class="line">	delay_ms(<span class="number">1000</span>);</span><br><span class="line">	delay_ms(<span class="number">1000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;软重启完成&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(atk_8266_send_cmd(<span class="string">&quot;ATE0&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">20</span>));<span class="comment">//关闭回显</span></span><br><span class="line">	atk_8266_send_cmd(<span class="string">&quot;AT+CWMODE=1&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">50</span>);		<span class="comment">//设置WIFI STA模式</span></span><br><span class="line">	atk_8266_send_cmd(<span class="string">&quot;AT+CWAUTOCONN=1&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">20</span>);   <span class="comment">//使能上电自动连接AP</span></span><br><span class="line">	delay_ms(<span class="number">300</span>);</span><br><span class="line">	atk_8266_send_cmd(<span class="string">&quot;AT+CWSTARTSMART=3&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">20</span>);		<span class="comment">//支持ESP-Touch和Airkiss智能配网</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;智能配网已开启  等待30s\r\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=<span class="number">30</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	delay_ms(<span class="number">1000</span>);     <span class="comment">//延时30S等待配网成功</span></span><br><span class="line">	i++;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	while(atk_8266_check_cmd(&quot;smartconfig connected wifi&quot;));					//连接目标路由器,并且获得IP</span></span><br><span class="line"><span class="comment">//	delay_ms(300);</span></span><br><span class="line">	atk_8266_send_cmd(<span class="string">&quot;AT+CWSTOPSMART&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">20</span>);		<span class="comment">//释放快连所占的内存</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据解析">数据解析</h3>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/RFh18s.png" alt="数据解析流程图" /><figcaption aria-hidden="true">数据解析流程图</figcaption>
</figure>
<h4 id="天气数据">天气数据</h4>
<p>源码：（以当天天气数据为例，近3天天气数据类似)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析当前天气</span></span><br><span class="line"><span class="function">u8 <span class="title">parse_now_weather</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cJSON *root;</span><br><span class="line">	cJSON *pSub;</span><br><span class="line">	cJSON *arrayItem;</span><br><span class="line">	cJSON *pItem;</span><br><span class="line">	cJSON *pSubItem;</span><br><span class="line">	cJSON *pChildItem;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">char</span> *pr,*utf8str,*gbkstr;</span><br><span class="line">	u8 size = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	u8 res;</span><br><span class="line">	u8 temperature;</span><br><span class="line">	</span><br><span class="line">	root = mymalloc(SRAMIN,<span class="keyword">sizeof</span>(cJSON));</span><br><span class="line">	pSub = mymalloc(SRAMIN,<span class="keyword">sizeof</span>(cJSON));</span><br><span class="line">	pItem = mymalloc(SRAMIN,<span class="keyword">sizeof</span>(cJSON));</span><br><span class="line">	pSubItem = mymalloc(SRAMIN,<span class="keyword">sizeof</span>(cJSON));</span><br><span class="line">	pChildItem = mymalloc(SRAMIN,<span class="keyword">sizeof</span>(cJSON));</span><br><span class="line">	arrayItem = mymalloc(SRAMIN,<span class="keyword">sizeof</span>(cJSON));</span><br><span class="line">	</span><br><span class="line">	pr = mymalloc(SRAMIN,<span class="number">1000</span>);</span><br><span class="line">	utf8str = mymalloc(SRAMIN,<span class="number">50</span>);</span><br><span class="line">	gbkstr = mymalloc(SRAMIN,<span class="number">50</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">memset</span>(pr,<span class="number">0</span>,<span class="number">1000</span>);</span><br><span class="line">	<span class="built_in">memset</span>(gbkstr,<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">	<span class="built_in">memset</span>(utf8str,<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">	</span><br><span class="line">	file = mymalloc(SRAMIN,<span class="keyword">sizeof</span>(FIL));</span><br><span class="line">	res=f_open(file,(<span class="keyword">const</span> TCHAR*)APP_ASCII_5427,FA_READ);<span class="comment">//打开文件</span></span><br><span class="line">	<span class="keyword">if</span>(res==FR_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		asc2_5427 = mymalloc(SRAMIN,file-&gt;fsize);</span><br><span class="line">		<span class="keyword">if</span>(asc2_5427 != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			res = f_read(file,asc2_5427,file-&gt;fsize,&amp;br);</span><br><span class="line">		&#125;</span><br><span class="line">		f_close(file);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;jieshou-&gt;1dayjson = %s\r\n&quot;</span>,USART3_RX_BUF);</span><br><span class="line">	</span><br><span class="line">	root = cJSON_Parse((<span class="keyword">const</span> <span class="keyword">char</span>*)USART3_RX_BUF);</span><br><span class="line">	<span class="keyword">if</span>(root != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		pSub = cJSON_GetObjectItem(root,<span class="string">&quot;results&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(pSub != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line"><span class="comment">//			size = cJSON_GetArraySize(pSub);</span></span><br><span class="line">			arrayItem = cJSON_GetArrayItem(pSub,<span class="number">0</span>);  </span><br><span class="line">			pr = cJSON_Print(arrayItem);   <span class="comment">//获取jsom数组</span></span><br><span class="line">			pItem = cJSON_Parse(pr);       <span class="comment">//对数组，进行升级。</span></span><br><span class="line">			<span class="keyword">if</span>(pItem != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				pSubItem = cJSON_GetObjectItem(pItem,<span class="string">&quot;location&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span>(pSubItem != <span class="literal">NULL</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					pChildItem = cJSON_GetObjectItem(pSubItem,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">					<span class="keyword">if</span>(pChildItem != <span class="literal">NULL</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						utf8str = pChildItem-&gt;valuestring;</span><br><span class="line">						SwitchToGbk((<span class="keyword">const</span> u8*)utf8str,<span class="built_in">strlen</span>(utf8str),(u8 *)gbkstr,&amp;len);  <span class="comment">//获取城市名称转换为gbk文件</span></span><br><span class="line">						Show_Str(<span class="number">0</span>,<span class="number">0</span>,lcddev.width,lcddev.height,(u8 *)gbkstr,<span class="number">16</span>,<span class="number">0</span>);         <span class="comment">//显示城市名称。</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="built_in">memset</span>(utf8str,<span class="number">0</span>,<span class="number">50</span>); <span class="comment">//解决阴华</span></span><br><span class="line">				<span class="built_in">memset</span>(gbkstr,<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">				</span><br><span class="line">				pSubItem = cJSON_GetObjectItem(pItem,<span class="string">&quot;now&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span>(pSubItem != <span class="literal">NULL</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					pChildItem = cJSON_GetObjectItem(pSubItem,<span class="string">&quot;text&quot;</span>);  <span class="comment">//获取天气信息。多云</span></span><br><span class="line">					<span class="keyword">if</span>(pChildItem != <span class="literal">NULL</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						utf8str = pChildItem-&gt;valuestring;</span><br><span class="line">						SwitchToGbk((<span class="keyword">const</span> u8*)utf8str,<span class="built_in">strlen</span>(utf8str),(u8 *)gbkstr,&amp;len);</span><br><span class="line">						Show_Str(<span class="number">220</span>,<span class="number">25</span>,lcddev.width,lcddev.height,(u8 *)gbkstr,<span class="number">16</span>,<span class="number">0</span>);  <span class="comment">//显示多云</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">memset</span>(utf8str,<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">					<span class="built_in">memset</span>(gbkstr,<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">					</span><br><span class="line">					pChildItem = cJSON_GetObjectItem(pSubItem,<span class="string">&quot;code&quot;</span>);              <span class="comment">//获取气象代码</span></span><br><span class="line">					<span class="keyword">if</span>(pChildItem != <span class="literal">NULL</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						gbkstr = pChildItem-&gt;valuestring;</span><br><span class="line">						show_weather_icon((u8 *)gbkstr,<span class="number">0</span>);                           <span class="comment">//根据气象代码，更新图片</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">memset</span>(gbkstr,<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">					</span><br><span class="line">					pChildItem = cJSON_GetObjectItem(pSubItem,<span class="string">&quot;temperature&quot;</span>);     <span class="comment">//获取温度信息</span></span><br><span class="line">					<span class="keyword">if</span>(pChildItem != <span class="literal">NULL</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						gbkstr = pChildItem-&gt;valuestring;</span><br><span class="line">						temperature = str2int((u8 *)gbkstr);</span><br><span class="line">						gui_show_num(<span class="number">140</span>,<span class="number">22</span>,<span class="number">2</span>,RED,<span class="number">54</span>,temperature,<span class="number">0x80</span>);</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;wendu = %d\r\n&quot;</span>,temperature);</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">			pSubItem = cJSON_GetObjectItem(pItem,<span class="string">&quot;last_update&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span>(pSubItem != <span class="literal">NULL</span>)		</span><br><span class="line">				&#123;</span><br><span class="line">				    gbkstr =pSubItem-&gt;valuestring;</span><br><span class="line">					</span><br><span class="line">					 LCD_ShowString(<span class="number">0</span>,<span class="number">92</span>,<span class="number">200</span>,<span class="number">20</span>,<span class="number">12</span>,(u8*)gbkstr);</span><br><span class="line">					 <span class="built_in">printf</span>(<span class="string">&quot;1day_updata_time = %s\r\n&quot;</span>,(u8*)gbkstr);</span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			&#125;</span><br><span class="line">			cJSON_Delete(pItem);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cJSON_Delete(root);</span><br><span class="line">	myfree(SRAMIN,root);</span><br><span class="line">	myfree(SRAMIN,pSub);</span><br><span class="line">	myfree(SRAMIN,pItem);</span><br><span class="line">	myfree(SRAMIN,pSubItem);</span><br><span class="line">	myfree(SRAMIN,pChildItem);</span><br><span class="line">	myfree(SRAMIN,arrayItem);</span><br><span class="line">	myfree(SRAMIN,pr);</span><br><span class="line">	myfree(SRAMIN,utf8str);</span><br><span class="line">	myfree(SRAMIN,gbkstr);</span><br><span class="line">	myfree(SRAMIN,file);</span><br><span class="line">	myfree(SRAMIN,asc2_5427);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="时间数据获取和校准">时间数据获取和校准</h4>
<p>源码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">u8 <span class="title">get_beijing_time</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 *p;</span><br><span class="line">	u8 res;</span><br><span class="line">	</span><br><span class="line">	u8 *resp;</span><br><span class="line">	u8 *p_end;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	u8 ipbuf[16]; 	//IP缓存</span></span><br><span class="line">	p=mymalloc(SRAMIN,<span class="number">40</span>);							<span class="comment">//申请40字节内存</span></span><br><span class="line">	<span class="built_in">sprintf</span>((<span class="keyword">char</span>*)p,<span class="string">&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;%s\&quot;,%s&quot;</span>,TIME_SERVERIP,TIME_PORTNUM);    <span class="comment">//配置目标TCP服务器</span></span><br><span class="line">	res = atk_8266_send_cmd(p,<span class="string">&quot;OK&quot;</span>,<span class="number">200</span>);<span class="comment">//连接到目标TCP服务器</span></span><br><span class="line">	<span class="keyword">if</span>(res==<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		myfree(SRAMIN,p);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	delay_ms(<span class="number">300</span>);</span><br><span class="line">	atk_8266_send_cmd(<span class="string">&quot;AT+CIPMODE=1&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">100</span>);      <span class="comment">//传输模式为：透传	</span></span><br><span class="line"><span class="comment">//	atk_8266_get_wanip(ipbuf);//获取WAN IP</span></span><br><span class="line"></span><br><span class="line">	USART3_RX_STA=<span class="number">0</span>;</span><br><span class="line">	atk_8266_send_cmd(<span class="string">&quot;AT+CIPSEND&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">100</span>);         <span class="comment">//开始透传</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;start trans...\r\n&quot;</span>);</span><br><span class="line">	u3_printf(<span class="string">&quot;GET http://api.k780.com/?app=life.time&amp;appkey=58173&amp;sign=4e67ab8533b30580e584c8b9f0a6cc50&amp;format=json\n\n&quot;</span>);	</span><br><span class="line">	delay_ms(<span class="number">20</span>);<span class="comment">//延时20ms返回的是指令发送成功的状态</span></span><br><span class="line"><span class="comment">//	atk_8266_at_response(1);</span></span><br><span class="line">	USART3_RX_STA=<span class="number">0</span>;	<span class="comment">//清零串口3数据</span></span><br><span class="line">	delay_ms(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//	atk_8266_at_response(0);</span></span><br><span class="line">	<span class="keyword">if</span>(USART3_RX_STA&amp;<span class="number">0X8000</span>)		<span class="comment">//此时再次接到一次数据，为时间的数据</span></span><br><span class="line">	&#123; </span><br><span class="line">		USART3_RX_BUF[USART3_RX_STA&amp;<span class="number">0X7FFF</span>]=<span class="number">0</span>;<span class="comment">//添加结束符</span></span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">             resp=<span class="string">&quot;datetime_2&quot;</span>;</span><br><span class="line">             p_end = (u8*)<span class="built_in">strstr</span>((<span class="keyword">char</span>*)USART3_RX_BUF,(<span class="keyword">char</span>*)resp);</span><br><span class="line">						 p = p_end<span class="number">-11</span>; <span class="comment">//确定串口数据中时间的起止位，如&quot;datetime_1&quot;:&quot;2021-03-31 20:09:07&quot;,&quot;datetime_2&quot;:&quot;2021 中</span></span><br><span class="line">	</span><br><span class="line">					   nwt.hour = ((*p - <span class="number">0x30</span>)*<span class="number">10</span> + (*(p+<span class="number">1</span>) - <span class="number">0x30</span>));			      </span><br><span class="line">					   nwt.min = ((*(p+<span class="number">3</span>) - <span class="number">0x30</span>)*<span class="number">10</span> + (*(p+<span class="number">4</span>) - <span class="number">0x30</span>));</span><br><span class="line">					   nwt.sec = ((*(p+<span class="number">6</span>) - <span class="number">0x30</span>)*<span class="number">10</span> + (*(p+<span class="number">7</span>) - <span class="number">0x30</span>));</span><br><span class="line">					</span><br><span class="line">					   nwt.year = ((*(p<span class="number">-11</span>) - <span class="number">0x30</span>)*<span class="number">1000</span> + (*(p<span class="number">-10</span>) - <span class="number">0x30</span>)*<span class="number">100</span>+ (*(p<span class="number">-9</span>) - <span class="number">0x30</span>)*<span class="number">10</span>+ (*(p<span class="number">-8</span>) - <span class="number">0x30</span>)); </span><br><span class="line">					   nwt.month = ((*(p<span class="number">-6</span>) - <span class="number">0x30</span>)*<span class="number">10</span> + (*(p<span class="number">-5</span>) - <span class="number">0x30</span>));</span><br><span class="line">					   nwt.date = ((*(p<span class="number">-3</span>) - <span class="number">0x30</span>)*<span class="number">10</span> + (*(p<span class="number">-2</span>) - <span class="number">0x30</span>));</span><br><span class="line"><span class="comment">//使用指针方法获取时分秒年月日 				</span></span><br><span class="line">					   RTC_Set(nwt.year,nwt.month ,nwt.date ,nwt.hour ,nwt.min,nwt.sec); <span class="comment">//使用RTC函数设置时间  </span></span><br><span class="line">					</span><br><span class="line">					   <span class="built_in">printf</span>(<span class="string">&quot;nwt.year = %d\r\n&quot;</span>,nwt.year);</span><br><span class="line">					   <span class="built_in">printf</span>(<span class="string">&quot;nwt.month = %d\r\n&quot;</span>,nwt.month);</span><br><span class="line">					   <span class="built_in">printf</span>(<span class="string">&quot;nwt.date = %d\r\n&quot;</span>,nwt.date);</span><br><span class="line">					   <span class="built_in">printf</span>(<span class="string">&quot;nwt.hour = %d\r\n&quot;</span>,nwt.hour);</span><br><span class="line">					   <span class="built_in">printf</span>(<span class="string">&quot;nwt.min = %d\r\n&quot;</span>,nwt.min);</span><br><span class="line">					   <span class="built_in">printf</span>(<span class="string">&quot;nwt.sec = %d\r\n&quot;</span>,nwt.sec);</span><br><span class="line">	 <span class="comment">//		打印时分秒年月日数据</span></span><br><span class="line">     <span class="comment">//		parse_now_time();//	Cjson方法解析时间数据</span></span><br><span class="line">		</span><br><span class="line">	atk_8266_quit_trans();<span class="comment">//退出透传</span></span><br><span class="line">	atk_8266_send_cmd(<span class="string">&quot;AT+CIPCLOSE&quot;</span>,<span class="string">&quot;OK&quot;</span>,<span class="number">50</span>);         <span class="comment">//关闭连接</span></span><br><span class="line">	myfree(SRAMIN,p);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实验现象">实验现象</h2>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/RSEhTJ.png" alt="微信配网实物图" /><figcaption aria-hidden="true">微信配网实物图</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/RSE5k9.jpg" alt="综合调试串口" /><figcaption aria-hidden="true">综合调试串口</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/RSEIYR.jpg" alt="硬件实物图" /><figcaption aria-hidden="true">硬件实物图</figcaption>
</figure>
<h2 id="注意事项">注意事项</h2>
<ol type="1">
<li>4.3寸和7寸屏需要比较大电流,USB供电可能不足,请用外部电源适配器(推荐外接12V 1A电源)。</li>
<li>本例程在LCD_Init函数里面(在ILI93xx.c),用到了printf,如果不初始化串口1,将导致液晶无法显示!!</li>
<li>字库更新时,需自备标准SD卡一张(即大卡,也可以用TF卡+卡套)，并拷贝光盘:SD卡根目录文件里面的所有内容到SD卡根目录,然后将SD卡插到开发板。</li>
<li>对于战舰V3开发板,P8需要用跳线短接:PB10(TX)与GBC_RX，PB11(RX)与GBC_TX。</li>
<li>如果触摸屏不准，请按住KEY0不放，然后按复位，松开复位，进入触摸屏校准。此时松开KEY0，执行校准，即可对屏幕进行校准。</li>
</ol>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>基于STM32的空气质量检测仪</title>
    <url>/posts/56821/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/Maskbugzero/STM32-GP2Y1010AU">Maskbugzero/STM32-GP2Y1010AU</a></p>
<p>一个基于STM32的空气质量检测仪项目</p>
<span id="more"></span>
<h2 id="硬件资源">硬件资源</h2>
<ol type="1">
<li>战舰V332F103开发板</li>
<li>GP2Y1010AU气体检测模块</li>
</ol>
<h2 id="实现功能">实现功能</h2>
<ul>
<li>室外粉尘颗粒数据获取及显示</li>
</ul>
<h2 id="连接方式">连接方式</h2>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/RSYABj.png" alt="电路图" /><figcaption aria-hidden="true">电路图</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/RSYEHs.png" alt="连接方式" /><figcaption aria-hidden="true">连接方式</figcaption>
</figure>
<h2 id="主要代码">主要代码</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	u16 PM = <span class="number">0</span>; </span><br><span class="line">	DHT11_Data_TypeDef DHT11_Data;</span><br><span class="line">	</span><br><span class="line">	delay_init();</span><br><span class="line">	NVIC_Configuration();</span><br><span class="line">	uart_init(<span class="number">115200</span>);</span><br><span class="line">	GP2Y_Adc_Init();  <span class="comment">//ADC初始化     </span></span><br><span class="line">	OLED_Init();</span><br><span class="line">	OLED_ColorTurn(<span class="number">0</span>);<span class="comment">//0正常显示，1 反色显示</span></span><br><span class="line">	OLED_DisplayTurn(<span class="number">0</span>);<span class="comment">//0正常显示 1 屏幕翻转显示</span></span><br><span class="line"></span><br><span class="line">	OLED_Refresh();</span><br><span class="line">	OLED_ShowString(<span class="number">2</span>,<span class="number">2</span>,<span class="string">&quot;PM2.5:&quot;</span>,<span class="number">16</span>); </span><br><span class="line">	OLED_ShowString(<span class="number">12</span>,<span class="number">20</span>,<span class="string">&quot;TEM:&quot;</span>,<span class="number">16</span>); </span><br><span class="line">	OLED_ShowString(<span class="number">12</span>,<span class="number">38</span>,<span class="string">&quot;HUM:&quot;</span>,<span class="number">16</span>); </span><br><span class="line">	</span><br><span class="line">	OLED_ShowString(<span class="number">90</span>,<span class="number">2</span>,<span class="string">&quot;ug/m3&quot;</span>,<span class="number">12</span>); <span class="comment">//PM2.5单位 ug/m3</span></span><br><span class="line">	OLED_ShowChinese(<span class="number">100</span>,<span class="number">20</span>,<span class="number">0</span>,<span class="number">16</span>); <span class="comment">//温度单位 ℃</span></span><br><span class="line">	OLED_ShowChar(<span class="number">100</span>,<span class="number">38</span>,<span class="string">&#x27;%&#x27;</span>,<span class="number">16</span>);  <span class="comment">//湿度单位 %</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* 粉尘传感器获取数据*/</span></span><br><span class="line">		PM = GetGP2YSingleValue();       <span class="comment">//得到pm2.5值 </span></span><br><span class="line">		<span class="keyword">if</span>(PM &lt; <span class="number">10</span>)</span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot; %d &quot;</span>,PM);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(PM &lt; <span class="number">100</span>)</span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot;%d &quot;</span>,PM);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot;%d&quot;</span>,PM);</span><br><span class="line">		OLED_ShowString(<span class="number">60</span>,<span class="number">2</span>,(u8 *)str,<span class="number">16</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/* 温湿度传感器获取数据*/</span></span><br><span class="line">		<span class="keyword">if</span>( Read_DHT11(&amp;DHT11_Data)==SUCCESS)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot;%d.%d ℃ &quot;</span>,DHT11_Data.temp_int,DHT11_Data.temp_deci);</span><br><span class="line">			OLED_ShowString(<span class="number">60</span>,<span class="number">20</span>,(u8 *)str,<span class="number">16</span>);</span><br><span class="line">			<span class="built_in">sprintf</span>(str, <span class="string">&quot;%d.%d&quot;</span>,DHT11_Data.humi_int,DHT11_Data.humi_deci);</span><br><span class="line">			OLED_ShowString(<span class="number">60</span>,<span class="number">38</span>,(u8 *)str,<span class="number">16</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Read DHT11 ERROR!\r\n&quot;</span>);<span class="comment">//读取数据失败，串口打印：Read DHT11 ERROR.</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		OLED_Refresh();</span><br><span class="line">		delay_ms(<span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="实验现象">实验现象</h2>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/RSYZEn.png" alt="实物图" /><figcaption aria-hidden="true">实物图</figcaption>
</figure>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>局域网Emby白嫖教程保姆版</title>
    <url>/posts/35184/</url>
    <content><![CDATA[<h2 id="内容简介">内容简介</h2>
<p>源自timeblog时光轴，不知道大神尊姓大名，想看原教程的点击<a href="https://imrbq.cn/exp/emby_hack.html">这里</a>，非常感谢作者提供这么好的方法。有人说既然都有原创了，为何我还要写一遍，因为大神的原创贴过于精简，不适合小白，很多人看的一头雾水，那么我就做个搬运工吧，转化为大家通俗易懂的教程。好了，废话太多，下面步入正题吧，高手可以绕道，哪里不对欢迎指正。</p>
<span id="more"></span>
<h2 id="前期准备">前期准备</h2>
<p>一台装有群晖的nas（安装好webstation），一台电脑安装好Xshell。</p>
<h2 id="破解原理">破解原理</h2>
<p>在时光轴大佬的原教程中有分析到，emby在联网验证授权时，通过抓包发现emby客户端访问了一个外部站点 mb3admin.com ，会请求一些东西，然后站点返回了一些json信息，从而客户端认为是被授权了。所以这次破解原理就是自己搭建一个伪站点mb3admin.com ，局域网截取客户端的请求信息到伪站点，从而返回json，完成破解。</p>
<h2 id="破解步骤">破解步骤</h2>
<h3 id="安装emby">安装emby</h3>
<p>如何在群晖的第三方源安装emby或者docker安装emby，请大家动动手指百度搜一下，教程很多，在此不再啰嗦。</p>
<h3 id="搭建伪站">搭建伪站</h3>
<p>用的是群晖套件中的webstation，在虚拟主机中新增，具体设置请参考下图，注意认真点，文档根目录其实是证书的目录，建议完全按照图中的目录设置，后面你会发现会省事很多。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251203326.png" alt="目录设置" /><figcaption aria-hidden="true">目录设置</figcaption>
</figure>
<p>创建好之后，是这样的：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251204902.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
<h3 id="设置nginx">设置nginx</h3>
<p>关于nginx是什么请自行百度。具体方法，用xshell端通过ssh登录群晖，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>
<p>回车，输入密码后切换到root账户，如下图</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251205385.png" alt="切换到root账户" /><figcaption aria-hidden="true">切换到root账户</figcaption>
</figure>
<p>接着输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/nginx</span><br></pre></td></tr></table></figure>
<p>进入到nginx目录</p>
<p>输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure>
<p>屏幕会弹出nginx的配置文件内容，如下图</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251206965.png" alt="内容图" /><figcaption aria-hidden="true">内容图</figcaption>
</figure>
<p>按住键盘pagedown键，一直向下翻，找到最后一页的代码，原代码如下图。当然你也可以用winscp登录群晖，找到配置文件下载到本地 ，用editplus等编辑工具进行编辑。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251207662.png" alt="配置文件" /><figcaption aria-hidden="true">配置文件</figcaption>
</figure>
<p>按键盘的i键一次，进入编辑，删掉所有server括号中的代码，替换为以下的代码：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> mb3admin.com;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /volume1/web/mb3admin.com/mb3admin.com.cert.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /volume1/web/mb3admin.com/mb3admin.com.key.pem;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> = /webdefault/images/logo.jpg &#123;</span><br><span class="line">            <span class="attribute">alias</span> /usr/syno/share/nginx/logo.jpg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> @error_page &#123;</span><br><span class="line">            <span class="attribute">root</span> /usr/syno/share/nginx;</span><br><span class="line">            <span class="attribute">rewrite</span> (.*) /error.html <span class="literal">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span><span class="regexp"> ^~</span> /.well-known/acme-challenge &#123;</span><br><span class="line">            <span class="attribute">root</span> /var/lib/letsencrypt;</span><br><span class="line">            <span class="attribute">default_type</span> text/plain;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^</span> / <span class="literal">redirect</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/$</span> &#123;</span><br><span class="line">            <span class="attribute">rewrite</span> / https://$host:5001/ <span class="literal">redirect</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Headers *;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Method *;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /admin/service/registration/validateDevice &#123;</span><br><span class="line">    <span class="attribute">default_type</span> application/json;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;cacheExpirationDays&quot;: 7,&quot;message&quot;: &quot;Device Valid&quot;,&quot;resultCode&quot;: &quot;GOOD&quot;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /admin/service/registration/validate &#123;</span><br><span class="line">    <span class="attribute">default_type</span> application/json;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;featId&quot;:&quot;&quot;,&quot;registered&quot;:true,&quot;expDate&quot;:&quot;2099-01-01&quot;,&quot;key&quot;:&quot;&quot;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /admin/service/registration/getStatus &#123;</span><br><span class="line">    <span class="attribute">default_type</span> application/json;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;deviceStatus&quot;:&quot;&quot;,&quot;planType&quot;:&quot;&quot;,&quot;subscriptions&quot;:&#123;&#125;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>替换完成后按ESC退出，检查一下括号的完整性（还是在editplus中检查方便），这里需要注意的是server括号外面还有半个括号（最后一行的括号），这个是和上面的http{对应的，千万别丢了。没问题的话，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">：wq</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251208055.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
<p>那么以上的操作就定义了证书的位置，和伪站返回的json信息。输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>
<p>检查配置是否有问题，无报错，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>刷新，如图。如果有报错，会提示多少行有错误，可以回去检查编辑，多半是因为括号不完整问题引起的。</p>
<h3 id="申请证书">申请证书</h3>
<p>浏览器进入https://www.gmcert.org/subForm#，申请证书。这里参考时光轴大佬的部分教程，使用在线签发证书比较简单。借用大佬的设置如下：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251209937.png" alt="签发证书" /><figcaption aria-hidden="true">签发证书</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251209332.png" alt="设置内容" /><figcaption aria-hidden="true">设置内容</figcaption>
</figure>
<p>全部检查无误后，点击签发证书，一两秒后，就可以把证书下载到本地了。</p>
<h3 id="修改证书位置">修改证书位置</h3>
<p>回到群晖，把上面申请好的证书拷贝到volume1/web/mb3admin.com下。注意这里我虚拟的群晖只有一个盘，默认就是volume1，如果你有多个盘，请放在volume1中，或者放别的盘也行，对应要返回上面步骤修改代码中对应的证书位置。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251210665.png" alt="证书位置" /><figcaption aria-hidden="true">证书位置</figcaption>
</figure>
<h3 id="修改hosts">修改Hosts</h3>
<p>目的是让客户端访问mb3admin.com网站时，自动跳转到搭建的伪站上。这里建议在路由器上面修改，这样局域网中所有设备请求信息都能跳到伪站。如果你只用这台电脑使用emby，修改主机的hosts也是可以的。</p>
<p>楼主用的是openwrt固件路由，操作方法是用xshell另外新建一个连接，连接到自己的路由器地址，然后输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/myhosts</span><br></pre></td></tr></table></figure>
<p>按i进入编辑，添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.123.5 mb3admin.com www.mb3admin.com</span><br></pre></td></tr></table></figure>
<p>这里的IP是伪站的IP，也就是你群晖的IP地址，添加完后按ESC，输入：wq保存退出</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251212522.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
<p>浏览器打开路由器管理页面，找到网络——DHCP/DNS——HOSTS和解析文件——额外的HOSTS文件，增加/etc/myhosts路径，点击保存&amp;应用,如图</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251212965.png" alt="额外的HOSTS文件" /><figcaption aria-hidden="true">额外的HOSTS文件</figcaption>
</figure>
<p>在群晖中修改hosts。方法：回到xshell客户端（连接群晖的），输入</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251213488.png" alt="修改群晖hosts" /><figcaption aria-hidden="true">修改群晖hosts</figcaption>
</figure>
<p>过程依旧，按i编辑，esc退出，输入 ：wq保存。</p>
<h3 id="添加emby端的证书">添加Emby端的证书</h3>
<p>具体方法，输入以下代码回车</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://static.timewk.cn/mb3active/cert/guomi.cer &gt;&gt; /etc/ssl/certs/ca-certificates.crt</span><br></pre></td></tr></table></figure>
<p>然后，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/packages/EmbyServer/target/mono/bin</span><br></pre></td></tr></table></figure>
<p>回车，注意这里如果您安装的是docker版本的emby，路径可能需要自己找一下，楼主安装的是第三方套件的emby。再输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./cert-sync /etc/ssl/certs/ca-certificates.crt</span><br></pre></td></tr></table></figure>
<p>回车</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251216581.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
<p>然后输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /volume1/web/mb3admin.com</span><br></pre></td></tr></table></figure>
<p>回车，再输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat mb3admin.com.cert.pem &gt;&gt; /etc/ssl/certs/ca-certificates.crt</span><br></pre></td></tr></table></figure>
<p>回车(如果有造成原证书丢失，套件中心无法访问网络情况，请下载原备份证书修复一下,<a href="https://gd.maskbugzero.cf/Documents/ca-certificates.zip">下载地址</a>)</p>
<p>这样基本大功告成。</p>
<p>第九步，浏览器检验伪站是否搭建成功，尝试访问</p>
<p>https://mb3admin.com/admin/service/registration/validateDevice</p>
<p>https://mb3admin.com/admin/service/registration/validateDevice/666</p>
<p>如果都可以返回json值，那么证明成功了，如下图</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251217941.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
<p>到此教程基本就结束了，浏览器去访问emby服务端吧，输入你的账号密码登录，看看是不是破解成功了，感觉赚了800多大洋，有木有？</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251219851.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
<p>因为路由器上修改了hosts，所以局域网中不同的客户端安装证书（mb3admin.com.cert.pem）后都可以自动破解使用。</p>
<p>安卓手机添加证书方法：下载国密证书（https://static.timewk.cn/mb3active/cert/guomi.cer）后，打开设置-&gt;安全-&gt;凭据存储栏目，从SD卡安装，选择到证书文件后，为证书命名，然后选择确定。</p>
<p>IOS手机：下载国密证书（https://static.timewk.cn/mb3active/cert/guomi.cer）后，设置里配置安装证书，然后在设置--通用--关于手机--证书信任设置里，把刚安装的证书完全信任打开，就可以了。</p>
<p>电视盒子，楼主用芝杜z9s测试安装好emby后，都无需添加证书直接打开就能使用。</p>
<h3 id="补充-1">补充-1</h3>
<p>教程里第三步，修改群晖的nginx.conf，发现每次重启后，配置都会被还原为系统自带的，每次重启都得重新配置，非常麻烦。解决办法：</p>
<p>在/etc/nginx/sites-enabled文件夹下新建proxy.conf文件，输入以下代码，这样重启后也不会失效了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server_names_hash_bucket_size 128;       //注意别忘复制这行代码</span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name mb3admin.com;</span><br><span class="line">        ssl_certificate /volume1/web/mb3admin.com/mb3admin.com.cert.pem;</span><br><span class="line">        ssl_certificate_key /volume1/web/mb3admin.com/mb3admin.com.key.pem;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location = /webdefault/images/logo.jpg &#123;</span><br><span class="line">            alias /usr/syno/share/nginx/logo.jpg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location @error_page &#123;</span><br><span class="line">            root /usr/syno/share/nginx;</span><br><span class="line">            rewrite (.*) /error.html break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ^~ /.well-known/acme-challenge &#123;</span><br><span class="line">            root /var/lib/letsencrypt;</span><br><span class="line">            default_type text/plain;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            rewrite ^ / redirect;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ ^/$ &#123;</span><br><span class="line">            rewrite / https://$host:5001/ redirect;</span><br><span class="line">        &#125;</span><br><span class="line">    add_header Access-Control-Allow-Origin *;</span><br><span class="line">    add_header Access-Control-Allow-Headers *;</span><br><span class="line">    add_header Access-Control-Allow-Method *;</span><br><span class="line">    add_header Access-Control-Allow-Credentials true;</span><br><span class="line"></span><br><span class="line">location /admin/service/registration/validateDevice &#123;</span><br><span class="line">    default_type application/json;</span><br><span class="line">  return 200 &#x27;&#123;&quot;cacheExpirationDays&quot;: 7,&quot;message&quot;: &quot;Device Valid&quot;,&quot;resultCode&quot;: &quot;GOOD&quot;&#125;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">location /admin/service/registration/validate &#123;</span><br><span class="line">    default_type application/json;</span><br><span class="line">  return 200 &#x27;&#123;&quot;featId&quot;:&quot;&quot;,&quot;registered&quot;:true,&quot;expDate&quot;:&quot;2099-01-01&quot;,&quot;key&quot;:&quot;&quot;&#125;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">location /admin/service/registration/getStatus &#123;</span><br><span class="line">    default_type application/json;</span><br><span class="line">  return 200 &#x27;&#123;&quot;deviceStatus&quot;:&quot;&quot;,&quot;planType&quot;:&quot;&quot;,&quot;subscriptions&quot;:&#123;&#125;&#125;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="补充-2">补充-2</h3>
<p>添加证书步骤中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp mb3admin.com.cert.pem /etc/ssl/certs/ca-certificates.crt</span><br></pre></td></tr></table></figure>
<p>这一命令会造成群晖所有根证书丢失，建议在修改前备份ca-certificates.crt文件，或使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat mb3admin.com.cert.pem &gt;&gt; /etc/ssl/certs/ca-certificates.crt</span><br></pre></td></tr></table></figure>
<p>设置nginx代理部分可以更改，我按照楼主的教程设置之后发现无法正常访问，后来通过阅读配置文件发现，在Web Station添加新域名之后使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/nginx/app.d/server.webstation-vhost.conf</span><br></pre></td></tr></table></figure>
<p>查看最后一行，例如我自己的就是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include /usr/local/etc/nginx/conf.d/英数混合/user.conf*;</span><br></pre></td></tr></table></figure>
<p>然后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/etc/nginx/conf.d/英数混合</span><br></pre></td></tr></table></figure>
<p>请勿照抄，按照自己的目录修改然后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi user.conf</span><br></pre></td></tr></table></figure>
<p>插入如下代码保存</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line"><span class="attribute">add_header</span> Access-Control-Allow-Headers *;</span><br><span class="line"><span class="attribute">add_header</span> Access-Control-Allow-Method *;</span><br><span class="line"><span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /admin/service/registration/validateDevice &#123;</span><br><span class="line">    <span class="attribute">default_type</span> application/json;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;cacheExpirationDays&quot;: 7,&quot;message&quot;: &quot;Device Valid&quot;,&quot;resultCode&quot;: &quot;GOOD&quot;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /admin/service/registration/validate &#123;</span><br><span class="line">    <span class="attribute">default_type</span> application/json;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;featId&quot;:&quot;&quot;,&quot;registered&quot;:true,&quot;expDate&quot;:&quot;2099-01-01&quot;,&quot;key&quot;:&quot;&quot;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /admin/service/registration/getStatus &#123;</span><br><span class="line">    <span class="attribute">default_type</span> application/json;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;deviceStatus&quot;:&quot;&quot;,&quot;planType&quot;:&quot;&quot;,&quot;subscriptions&quot;:&#123;&#125;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<h2 id="本文来源">本文来源</h2>
<p><a href="https://bbs.nas66.com/thread-10019-1-1.html">矿渣论坛</a></p>
]]></content>
      <categories>
        <category>Emby</category>
        <category>Nas</category>
      </categories>
      <tags>
        <tag>Emby</tag>
        <tag>Nas</tag>
      </tags>
  </entry>
  <entry>
    <title>白嫖微软E5开发者账号</title>
    <url>/posts/25466/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>写在发布之前：其实最后还是发现有一点问题，但是需要亿点时间来解决…就是自动续期控制面版网页的显示问题，如果之前没有添加过是没有问题的，如果已经添加过一个就会导致显示不全无法继续添加（只用手机的话）…解决方法就是在浏览器无障碍里把网页字号调到最小。然而Chrome和Edge浏览器调节了字号都不管用，只有火狐可以。解决这个问题就得把浏览器调换一下，所有相关的的截图也都要重新截…目前实在没精力重做了…总之问题也不是很大，新手的话按着教程走就可以了。如果有遇到这个问题，清空火狐的数据在火狐上操作就行了。</p>
<span id="more"></span>
<p>教程由 酷安@某贼 整理，最后编辑于2021.1.22</p>
<p>整个过程可只需要手机即可完成，也可在PC上完成。</p>
<p>参考了以下文章：</p>
<p><a href="https://www.coolapk.com/feed/18270055?shareKey=MWJkMDYxOGEyZjU5NWVjZTM3NzM~&amp;shareUid=1928697&amp;shareFrom=com.coolapk.market_10.2.1">链接</a> 作者：酷安@Dannyyyyyyyyzjm</p>
<p><a href="https://blog.curlc.com/archives/687.html">链接</a>作者：浅忆</p>
<h2 id="准备工作">准备工作</h2>
<h3 id="安装需要的app">安装需要的APP</h3>
<h3 id="注册微软个人账户">注册微软个人账户</h3>
<p>用火狐浏览器注册一个微软个人账户（已有的略）并登陆</p>
<p>打开<a href="https://account.microsoft.com/account?lang=zh-cn">链接</a>，点击创建Microsoft账户</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fypUSS.jpg" alt="创建Microsoft账户" /><figcaption aria-hidden="true">创建Microsoft账户</figcaption>
</figure>
<p>按提示创建，邮箱用QQ邮箱或其他即可。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fypLlD.jpg" alt="添加姓名" /><figcaption aria-hidden="true">添加姓名</figcaption>
</figure>
<p>创建完成，点击添加姓名（必须添加，不然影响后面注册）</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fypzTI.jpg" alt="添加名字" /><figcaption aria-hidden="true">添加名字</figcaption>
</figure>
<h3 id="注册github账户">注册Github账户</h3>
<p>用Edge浏览器注册一个Github账户（已有的略）并登陆</p>
<p>打开<a href="https://github.com/join?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F&amp;source=header-home">链接</a></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fy9AXQ.jpg" alt="注册Github" /><figcaption aria-hidden="true">注册Github</figcaption>
</figure>
<p>邮箱用QQ邮箱或其他即可。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fy9Vmj.jpg" alt="验证邮箱" /><figcaption aria-hidden="true">验证邮箱</figcaption>
</figure>
<p>查看邮箱有没有验证邮件，点击验证账户。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fy93X4.jpg" alt="登录Github" /><figcaption aria-hidden="true">登录Github</figcaption>
</figure>
<p>登陆一次即可。</p>
<h2 id="申请一个e5账号">申请一个E5账号</h2>
<p>用火狐浏览器（特殊联网状态）打开链接（加载极慢请耐心等待，实在不行换网）：</p>
<p>打开<a href="https://developer.microsoft.com/zh-cn/office/dev-program">链接</a></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fy9BcD.jpg" alt="立即加入" /><figcaption aria-hidden="true">立即加入</figcaption>
</figure>
<p>点击立即加入。进入登陆页面，用你的微软个人账户登录。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fy9yBd.jpg" alt="填写问题" /><figcaption aria-hidden="true">填写问题</figcaption>
</figure>
<p>然后按图填写</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fy9f9f.jpg" alt="下一步" /><figcaption aria-hidden="true">下一步</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fy9XCV.jpg" alt="保存设置" /><figcaption aria-hidden="true">保存设置</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fy9L40.jpg" alt="设置E5订阅" /><figcaption aria-hidden="true">设置E5订阅</figcaption>
</figure>
<p>往下翻</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyCSu4.jpg" alt="选择偏好设置" /><figcaption aria-hidden="true">选择偏好设置</figcaption>
</figure>
<p>展开产品，技术，语言三项，把所有的钩都勾上</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyCiU1.jpg" alt="打勾" /><figcaption aria-hidden="true">打勾</figcaption>
</figure>
<p>点击下方保存，应用。稍后会显示已保存。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyCZvD.jpg" alt="保存设置" /><figcaption aria-hidden="true">保存设置</figcaption>
</figure>
<p>往上翻回到顶部，点击设置E5订阅。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyCmKe.jpg" alt="设置E5订阅" /><figcaption aria-hidden="true">设置E5订阅</figcaption>
</figure>
<p>密码就是今后这个E5账号的密码。用户名和域这里解释一下，E5账户的账号（同时也是一个邮箱地址）格式为<a href="mailto:用户名@域.onmicrosoft.com">用户名@域.onmicrosoft.com</a>，所以你填写的用户名和域决定了你的账号（的一部分）。用户名随便写，但是域不能和其他人重复。填写域之后网站会检查是否重复，如果重复会红字提示你。</p>
<p>填写完毕点击继续。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyCubd.jpg" alt="添加电话号码" /><figcaption aria-hidden="true">添加电话号码</figcaption>
</figure>
<p>如果你的国家填写的不是中国，则需要将第一项修改为China(+86)。不需要开下拉条选择（下拉条划不动），直接点击文字修改为china即可。手机号一定要填写自己的，因为今后修改密码，验证身份等操作都需要这个手机号接收验证码。输入手机号点击发送代码，下面会多出一个填写验证码的输入框。按照原作者的说法，这里如果不特殊上网，则大概率收不到验证码。</p>
<p>验证完手机后，你的个人账户会收到一个微软发来的欢迎邮件，不用管他。至此你已拥有90天试用期的E5账号了。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyCQUI.jpg" alt="设置完成" /><figcaption aria-hidden="true">设置完成</figcaption>
</figure>
<h2 id="设置e5账号自动续订">设置E5账号自动续订</h2>
<h3 id="开通一个子账号">开通一个子账号</h3>
<p>用Chrome浏览器打开<a href="https://admin.microsoft.com/Adminportal/Home#/users">链接</a></p>
<p>打开极慢请耐心等待。用你刚申请的E5账号登录。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyCNrQ.jpg" alt="添加子账号" /><figcaption aria-hidden="true">添加子账号</figcaption>
</figure>
<p>点击添加用户（单一用户）。如果页面过度放大且无法捏合缩放，可以双击页面空白处缩小。如果不行就再双击一次，直到恢复正常。</p>
<p>然后填写相关选项。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyC2qJ.jpg" alt="添加用户信息" /><figcaption aria-hidden="true">添加用户信息</figcaption>
</figure>
<p>姓名用户名随便写，密码选择让我来创建密码，密码要记住。下面两个都不勾选。然后点击最底部的下一步。（如果看不到说明页面还没有缩到最小）</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyCIG6.jpg" alt="分配许可证" /><figcaption aria-hidden="true">分配许可证</figcaption>
</figure>
<p>默认即可，下一步。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyCHMD.jpg" alt="可选设置" /><figcaption aria-hidden="true">可选设置</figcaption>
</figure>
<p>不用填写，直接下一步。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyCqqH.jpg" alt="完成" /><figcaption aria-hidden="true">完成</figcaption>
</figure>
<p>点击添加完毕。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyPSRf.jpg" alt="子账号信息" /><figcaption aria-hidden="true">子账号信息</figcaption>
</figure>
<p>复制用户名（xxx@xxx.onmicrosoft.com）和密码记好备用。</p>
<h3 id="注册自己的api-key">注册自己的API Key</h3>
<p>继续用Chrome浏览器打开<a href="https://portal.azure.com/#home">链接</a>，用E5账号（默认）登录进入azure（打开极慢请耐心等待）。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyPnzT.jpg" alt="出错信息" /><figcaption aria-hidden="true">出错信息</figcaption>
</figure>
<p>如果打开遇到这样的情况，点击Try again不断尝试直到进入为止。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyP1eJ.jpg" alt="Azure" /><figcaption aria-hidden="true">Azure</figcaption>
</figure>
<p>然后展开浏览器菜单，点击勾选桌面版网站。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyPUSK.jpg" alt="桌面版网站" /><figcaption aria-hidden="true">桌面版网站</figcaption>
</figure>
<p>等待重新进入。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyPBeH.jpg" alt="应用注册" /><figcaption aria-hidden="true">应用注册</figcaption>
</figure>
<p>点击上方搜索框，输入“应用注册”。反应可能比较慢，耐心等待，不行就多试几次。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyPx0J.jpg" alt="应用注册" /><figcaption aria-hidden="true">应用注册</figcaption>
</figure>
<p>点击应用注册。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fyiF1K.jpg" alt="注册" /><figcaption aria-hidden="true">注册</figcaption>
</figure>
<p>点击左上方新注册。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124603473.png" alt="新注册" /><figcaption aria-hidden="true">新注册</figcaption>
</figure>
<p>仔细看图，如上图填写。名称随意，受支持的账户类型必须选第三项（任何组织目录中的帐户和个人Microsoft帐户），链接必须写</p>
<p><code>https://e5.qyi.io/outlook/auth2/receive</code></p>
<p>填写完毕，点击最下方注册。耐心等待，直到出现下图页面即为注册成功。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124631255.png" alt="完成图" /><figcaption aria-hidden="true">完成图</figcaption>
</figure>
<p>复制应用程序(客户端)ID备用。</p>
<p>然后点击左侧证书和密码</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124656874.png" alt="复制" /><figcaption aria-hidden="true">复制</figcaption>
</figure>
<p>点击新客户端密码</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124706278.png" alt="新客户端密码" /><figcaption aria-hidden="true">新客户端密码</figcaption>
</figure>
<p>在弹出的窗口中将截止期限改为从不</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124714810.png" alt="永不" /><figcaption aria-hidden="true">永不</figcaption>
</figure>
<p>点击添加。耐心等待添加完毕。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124725243.png" alt="完成" /><figcaption aria-hidden="true">完成</figcaption>
</figure>
<p>复制“值”一项备用。点击右侧复制小按钮即可复制。</p>
<p>然后点击左侧API权限。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124738645.png" alt="API" /><figcaption aria-hidden="true">API</figcaption>
</figure>
<p>点击添加权限</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/clip_image002.jpg" alt="权限" /><figcaption aria-hidden="true">权限</figcaption>
</figure>
<p>点击Microsoft Graph</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124758494.png" alt="Graph" /><figcaption aria-hidden="true">Graph</figcaption>
</figure>
<p>应用程序权限</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124803180.png" alt="权限" /><figcaption aria-hidden="true">权限</figcaption>
</figure>
<p>搜索mail，展开Mail项，勾选前四个，点击最下方添加权限。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124905518.png" alt="添加权限" /><figcaption aria-hidden="true">添加权限</figcaption>
</figure>
<p>等待添加完毕，然后点击“代表管理员同意”。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124915481.png" alt="同意" /><figcaption aria-hidden="true">同意</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124918958.png" alt="添加同意" /><figcaption aria-hidden="true">添加同意</figcaption>
</figure>
<h3 id="添加key到自动续期程序">添加key到自动续期程序</h3>
<p>用Edge浏览器打开<a href="https://e5.qyi.io/login">链接</a></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814124951252.png" alt="续期" /><figcaption aria-hidden="true">续期</figcaption>
</figure>
<p>加载完毕之后点这个猫，同意授权。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814125001382.png" alt="授权" /><figcaption aria-hidden="true">授权</figcaption>
</figure>
<p>登陆成功点击个人设置，并点击下方中部浏览器菜单，选择桌面版网站。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814125011400.png" alt="桌面版" /><figcaption aria-hidden="true">桌面版</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814125015067.png" alt="完成" /><figcaption aria-hidden="true">完成</figcaption>
</figure>
<p>点击新建，命名随意。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814125024871.png" alt="命名" /><figcaption aria-hidden="true">命名</figcaption>
</figure>
<p>新建完成之后点击配置。如果页面排布出问题可以重新切换一下电脑版网站。</p>
<p>在弹出的窗口中输入刚才获取的应用程序(客户端)ID（client_id）、客户端密码（client_secret），下一步。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814125034225.png" alt="填写信息" /><figcaption aria-hidden="true">填写信息</figcaption>
</figure>
<p>默认即可，下一步。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814125042418.png" alt="下一步" /><figcaption aria-hidden="true">下一步</figcaption>
</figure>
<p>点击“去授权”，用之前添加的子帐号登陆，同意授权。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814125054827.png" alt="授权" /><figcaption aria-hidden="true">授权</figcaption>
</figure>
<h2 id="onedrive空间扩容">OneDrive空间扩容</h2>
<p>OneDrive默认空间是1TB，最高可以扩容到5TB。用Chrome浏览器打开<a href="https://admin.onedrive.com/#v=StorageSettings">链接</a>，然后再输入相同的链接再打开一次，直到出现下图页面：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814125130631.png" alt="扩容" /><figcaption aria-hidden="true">扩容</figcaption>
</figure>
<p>在浏览器菜单勾选桌面版网站，等待加载完成。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/image-20210814125140655.png" alt="填写大小" /><figcaption aria-hidden="true">填写大小</figcaption>
</figure>
<p>将空间手动更改为5120（5TB），点击保存。</p>
<h2 id="说明">说明</h2>
<ul>
<li>需要三个浏览器，是因为总共有三个微软账号要登录（个人，E5，子账号），而退登（注销）微软账号又很麻烦，所以为了节省时间，每个账号用一个浏览器，就不用反复登录和退登了。</li>
<li>如果需要再嫖一个，把用到的三个浏览器数据清空即可重新再来。</li>
<li>建议多撸几个账号，并使用 https://app.mover.io/ 及时互相备份以防翻车。备份是离线的，点击开始之后关闭浏览器即可，一般来说最多两三天也就备份完成了。</li>
<li>微软主页：https://www.office.com/?auth=2</li>
<li>微软管理员管理中心：https://admin.microsoft.com/Adminportal/Home#/homepage</li>
<li>Azure：https://portal.azure.com/#home</li>
</ul>
]]></content>
      <categories>
        <category>Microsoft</category>
        <category>E5</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>E5</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖Docker安装CalibreWeb打造全功能书库</title>
    <url>/posts/8897/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://registry.hub.docker.com/r/technosoft2000/calibre-web/">technosoft2000/calibre-web</a></p>
<p>Calibre Web是一个 Web 应用程序，它提供了一个干净的界面，用于使用<strong>现有的 Calibre 数据库</strong>浏览、阅读和下载电子书。</p>
<span id="more"></span>
<h2 id="功能简介">功能简介</h2>
<p>平时喜欢搜集网络上的精品电子书，那么管理成为了一个问题，放在硬盘的一堆电子书文件，想看也不知道看哪本，正好之前安装的黑群晖，了解到 Calibre web 这样的一个开源项目，于是就完成了这样的项目搭建。功能包括：</p>
<ol type="1">
<li>管理自己的电子书，可管理海量书籍，包括书籍的分类、作者、简介等</li>
<li>可在线观看、书籍格式转换、推送到 Kindle 等</li>
<li>可选：通过 frp 等内外穿透工具实现任意地方访问</li>
</ol>
<h2 id="安装步骤">安装步骤</h2>
<h3 id="群晖安装">群晖安装</h3>
<p>首先打开群晖管理界面的 Docker，在注册表里搜索 <code>calibre-web</code>，选择第二个 Docker 映像双击下载。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212146477.png" alt="推荐使用" /><figcaption aria-hidden="true">推荐使用</figcaption>
</figure>
<p>等待下载完成后，在映像中，双击下载好的映像，则可以创建容器。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212149122.png" alt="创建Calibre web容器" /><figcaption aria-hidden="true">创建Calibre web容器</figcaption>
</figure>
<p>因此我们设置一个文件夹映射和端口映射即可。首先打开 File Station，创建一个用于存放电子书的文件夹，我是直接建立了一个 <code>books</code> 共享文件夹，然后再建立了一个 <code>calibre</code> 文件夹用于存放电子书（推荐）。建好之后，回到 Docker 中来。</p>
<p>设置名称为 <code>calibre-web</code>，可根据喜好设置，对应代码中的 <code>--name=calibre-web</code>，然后点击高级设置。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212204993.png" alt="设置好名称" /><figcaption aria-hidden="true">设置好名称</figcaption>
</figure>
<p>勾选启用自动重新启动，对应代码中的 <code>--restart=always</code>，可根据需要设置，若不勾选，则重启群晖则不自动运行此容器。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212150977.png" alt="自动启动" /><figcaption aria-hidden="true">自动启动</figcaption>
</figure>
<p>点击<code>卷</code>，添加文件夹，选择刚刚创建用于存放电子书的文件夹，转载路径为 <code>/books</code>，对应代码中的 <code>-v &lt;your Calibre books folder&gt;:/books</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212204971.png" alt="映射文件夹" /><figcaption aria-hidden="true">映射文件夹</figcaption>
</figure>
<p>然后点击<code>端口映射</code>，设置一个本地端口，不冲突即可，如我的为 25556，那么之后访问即：[http://IP:25556，对应代码中的：<code>-p](http://ip:25556，对应代码中的：</code>-p/) :8083<code>。不推荐使用默认的</code>自动 `，这样每次重启会改变端口，造成访问地址的改变。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212150671.png" alt="端口映射" /><figcaption aria-hidden="true">端口映射</figcaption>
</figure>
<p>点击应用即可，然后启动该容器。</p>
<h3 id="命令行安装">命令行安装</h3>
<p>ssh连接后输入命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull technosoft2000/calibre-web</span><br></pre></td></tr></table></figure>
<p>然后输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker create --name=calibre-web --restart=always \</span><br><span class="line">-v &lt;your Calibre books folder&gt;:/books \</span><br><span class="line">-p &lt;HTTP PORT&gt;:8083 \</span><br><span class="line">technosoft2000/calibre-web</span><br></pre></td></tr></table></figure>
<ul>
<li>--name=calibre-web 容器名称</li>
<li>--restart=always 重启策略</li>
<li>-v <your Calibre books folder>:/books 书籍目录</li>
<li>-p <HTTP PORT>:8083 访问端口</li>
</ul>
<h2 id="网页配置">网页配置</h2>
<p>这里打开群晖 IP: 端口访问，如我的 IP 为 <code>192.168.0.102</code>，可以看到已经可以成功打开。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212154427.png" alt="配置书库" /><figcaption aria-hidden="true">配置书库</figcaption>
</figure>
<p>在书库配置中，设置为 <code>/books</code>，点击保存。</p>
<p>此时会提示<code>数据库路径无效，请输入正确的路径</code>。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212156284.png" alt="报错" /><figcaption aria-hidden="true">报错</figcaption>
</figure>
<p>由于 Calibre-web 是基于 Calibre 这款软件的，书库里会有 <code>metadata.db</code> 的数据库文件，而我们创建的文件夹是没有任何文件。</p>
<p>因此我们电脑中安装 <a href="https://www.zhyong.cn/posts/59a8/">Calibre</a>，然后用电脑挂载群晖，在此位置建立一个空白书库（注意：群晖需要安装 WebDAV Server）。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212154909.png" alt="创建书库" /><figcaption aria-hidden="true">创建书库</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212154803.png" alt="创建书库" /><figcaption aria-hidden="true">创建书库</figcaption>
</figure>
<p>完成后，就会在该位置生成一个 <code>metadata.db</code> 的文件。然后重试，提示配置已经更新。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212154802.png" alt="配置" /><figcaption aria-hidden="true">配置</figcaption>
</figure>
<blockquote>
<p>若仍出现问题，则在 File Station 中设置一下该文件夹的权限，设置为 <code>Everyone</code> 为读取、写入。</p>
</blockquote>
<p>点击登录，用户名：admin 密码：admin123</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212157361.png" alt="登录" /><figcaption aria-hidden="true">登录</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212154832.png" alt="终于成功" /><figcaption aria-hidden="true">终于成功</figcaption>
</figure>
<h2 id="高级设置">高级设置</h2>
<h3 id="设置中文">设置中文</h3>
<p>默认为英文界面，在 admin——language 设置即可。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212158619.png" alt="设置中文" /><figcaption aria-hidden="true">设置中文</figcaption>
</figure>
<h3 id="开启网页上传">开启网页上传</h3>
<p>少量书籍上传非常实用</p>
<p>在管理权限 —— 编辑基本配置 —— 功能配置中，其它功能也可在此开启。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212158940.png" alt="启用上传" /><figcaption aria-hidden="true">启用上传</figcaption>
</figure>
<p>刷新一下页面，在右上角则出现<code>上传书籍</code>。</p>
<p>测试上传书籍报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库错误：(sqlite3.OperationalError) attempt to write a readonly database [SQL: INSERT INTO authors (name, sort, link) VALUES (?, ?, ?)] [parameters: (u&#x27;\u672a\u77e5&#x27;, u&#x27;\u672a\u77e5&#x27;, u&#x27;&#x27;)] (Background on this error at: http://sqlalche.me/e/e3q8)。</span><br></pre></td></tr></table></figure>
<p>原因在于无写入权限，将创建的文件夹设置为完全控制（读取、写入应该就可以了），然后重启容器，即可解决此问题。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212159848.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>成功在 Web 上传。</p>
<p>上传或编辑书籍时，可点击最下面的获取元数据，即可获得作者、解决、封面图片等各类信息，这是我非常喜欢的一个功能，很强大。获取后保存即可，封面更改有时会迟一点生效。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212200556.png" alt="获取元数据" /><figcaption aria-hidden="true">获取元数据</figcaption>
</figure>
<h3 id="转换格式">转换格式</h3>
<p>此程序可以在线观看 TXT、pdf 和 epub 格式，epub 格式是一个通用的电子书格式，因此将其它书籍转换为此格式从而在线阅读。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212200518.png" alt="编辑书籍" /><figcaption aria-hidden="true">编辑书籍</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212201866.png" alt="转换为epub格式" /><figcaption aria-hidden="true">转换为epub格式</figcaption>
</figure>
<p>这样就可以在线阅读了，有目录导航，可以添加书签，全屏阅读等，并且可以记住阅读位置，下一次打开接着阅读（不可跨设备，书签可以跨设备），体验非常棒。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212201407.png" alt="在线阅读" /><figcaption aria-hidden="true">在线阅读</figcaption>
</figure>
<h3 id="设置-kindle-推送">设置 Kindle 推送</h3>
<p>Kindle 推送稍微复杂点，首先必须有一个亚马逊账号，登录 Kindle（Kindle 软件或设备都可以）后，会有一个个人文档邮箱，然后在 Kindle 设备或 APP 或登录亚马逊账号都可以查看，以 <code>@kindle.cn</code> 结尾的邮箱。</p>
<p>第一步，到 Calibre web 中，填写 Kindle 邮箱；</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212202210.png" alt="Kindle邮箱" /><figcaption aria-hidden="true">Kindle邮箱</figcaption>
</figure>
<p>第二步，配置邮件发送服务器；</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212202297.png" alt="配置邮件服务器" /><figcaption aria-hidden="true">配置邮件服务器</figcaption>
</figure>
<p>这里推荐使用 163 邮箱，主机名为 <code>smtp.163.com</code>，配置如下：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212203601.png" alt="邮箱配置" /><figcaption aria-hidden="true">邮箱配置</figcaption>
</figure>
<p>登录 163 邮箱，开启 smtp 服务，然后生成一个授权码：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212202078.png" alt="开启smtp" /><figcaption aria-hidden="true">开启smtp</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212202695.png" alt="授权码生成" /><figcaption aria-hidden="true">授权码生成</figcaption>
</figure>
<p>然后将授权码填入到 SMTP 密码一栏。</p>
<p>第三步，将配置的发送邮件服务器添加到 Kindle 已认可邮箱列表</p>
<p>在设置中，首选项 —— 个人文档设置 —— 已认可的发件人电子邮箱列表，添加该邮箱即可。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108212202572.png" alt="添加认可的电子邮件" /><figcaption aria-hidden="true">添加认可的电子邮件</figcaption>
</figure>
<p>全部完成后，即可一键发送电子书到 Kindle 设备了。</p>
<h3 id="批量上传电子书">批量上传电子书</h3>
<p>那么如果有大量电子书该如何上传呢？思路还是一样，直接用电脑挂载群晖的文件夹，使用 Calibre 打开该书库，然后就可以批量上传、管理了。</p>
<h2 id="总结">总结</h2>
<p>总之，搭建过程还是较为麻烦，涉及的方面较多，需要了解相关的基础知识，但是此篇教程我写的较为详细，相信只要耐心都能搭建成功，毕竟我使用这个有一段时间了，有的需要注意的地方我都写出来了，Docker 映像也选择好了，注意文件夹的权限是一个大坑，搭建不成功很大方面是这个原因。</p>
<p>另外内外穿透方面，这涉及的更多了，提供这一种思路，有能力自行折腾了。</p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Nas</category>
        <category>Synology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nas</tag>
        <tag>群晖</tag>
        <tag>Synology</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖Docker安装网心云容器魔方</title>
    <url>/posts/47006/</url>
    <content><![CDATA[<h2 id="环境要求">环境要求</h2>
<h3 id="网络要求">网络要求</h3>
<ol type="1">
<li><p>（pppoe拨号或者静态公网IP的可以忽略跳过）局域网网络的环境，必须要支持dhcp自动获取IP，容器魔方会从路由器申请多个IP（MAC地址前缀是c0:e7:3e），请不要禁用这些IP，并开启upnp，DMZ只能映射到其中一个申请的IP。</p></li>
<li><p>挂有旁路由的设备，请将容器魔方申请的IP网关指向主路由，减少旁路由的影响，提高跑量。</p></li>
<li><p>容器魔方仅支持docker的host（推荐）和macvlan网络模式。 <span id="more"></span> ### 磁盘要求</p></li>
<li><p>分配最小磁盘空间&gt;50G，分配的空间越大越有助于提升跑量，可参考容器魔方的配置推荐。</p></li>
<li><p>容器魔方会尽量使用完挂载的分区，建议同一块分区上不要存放其他数据。</p></li>
<li><p>容器魔方不会主动格式化磁盘，使用前请自行格式化，推荐extxfs、btrfs等主流文件系统，不支持裸盘、vfat、exfat、ntfs。</p></li>
<li><p>app显示磁盘空间比物理磁盘空间小时，请检查文件系统是否有设置预留空间。</p></li>
</ol>
<h2 id="安装容器">安装容器</h2>
<ol type="1">
<li>在包管理中心“套件中心/package center”下载Docker”，并打开“Docker”：</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/11620637615352.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/21620637619955.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="2" type="1">
<li>打开docker，并在<code>"注册表/Registry"</code>选项中新增注册表项。 – 若已进行过此配置，可略过。</li>
</ol>
<p>注册表名称填写“Docker Hub”，注册表URL中填写“<a href="https://registry.hudocker.com/">https://registry.hudocker.com</a>”，点击“确认”</p>
<p><img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/31620637630440.png" alt="img" />新增完成后，在“注册表/Registry”页搜索栏中搜索 “wxedge”，选择“onething1/wxedge”，右键“下载此映像/Download this Image”</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/41620637635692.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="4" type="1">
<li>在“映像/Image”页，选中下载的映像“onething1/wxedge”，点击 “启动/Launch ”创建容器</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/51620637641826.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="5" type="1">
<li><p>配置容器名称，勾选“使用高权限执行容器 /Execute container using high privilege”后，点击“高级配置/Advanced Settings”，进行自动启动、卷/Volume、网络/Network等配置</p></li>
<li><p>勾选“使用高权限执行容器”时若提示“这将给容器在DSM的根用户权限。是否确定继续？”，选择“是”。</p></li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/61620637647781.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="7" type="1">
<li>勾选“启用自动重新启动”</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/71620637653085.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="8" type="1">
<li>点击“卷/Volume” ，点击“新建文件夹/Add Folder”，在目录docker下新建文件夹命名为“wxedge_storage”挂载到/storage，并点击“确定”</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/81620637658427.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="9" type="1">
<li>可看到已成功创建的文件夹：</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/91620637664082.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="10" type="1">
<li>点击“网络/Network”，勾选"使用与Docker Host相同的网络 /use the same network as Docker Host"后，点击"应用/Apply"</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/101620637669452.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="11" type="1">
<li>点击“下一步/Next”确认“摘要/Summary”，与刚刚配置的内容无误后，点击“应用/Apply”</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/111620637674917.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<ol start="12" type="1">
<li>在“容器/Container”页，就可查看到创建的容器</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/121620637680365.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="绑定设备">绑定设备</h2>
<h3 id="设备初始化">设备初始化</h3>
<p>打开浏览器（推荐谷歌浏览器），输入局域网<code>ip:18888（群晖的ip）</code>，比如192.168.10.179:18888（一般30秒内都能初始化成功，失败即点击“重试”按钮，多次失败请反馈错误码联系客服反馈）。</p>
<p>初始化成功后，就会自动进入下图的设置页面：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/131620637687300.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h3 id="绑定设备-1">绑定设备</h3>
<p>将设备绑定到网心云APP，可时时看收益，周周提现金。</p>
<p>1）扫描下方“①”处二维码，下载网心云APP;</p>
<p>2）绑定设备：打开网心云APP【<code>右上角“+”-扫一扫</code>】，<code>扫描下图“②”处二维码</code>，即可将设备绑定到网心云APP，即可时时看收益，周周提现金。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/141620637694552.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>至此，绑定成功，可通过网心云APP时时看收益，周周提现金。</p>
<h3 id="换盘迁移">换盘迁移</h3>
<p>容器启动成功后，会在挂载目录/docker/wxedge_storage生成一个wxnode的文件，该文件是设备的唯一标识与账号绑定，请务必做好备份，换盘或者更换挂载目录时，要将wxnode迁移至新的挂载目录下。</p>
<h2 id="升级容器">升级容器</h2>
<p>注：暂不支持自升级，需要手动执行容器的停止及删除后重新拉取镜像并创建启动容器来实现升级。</p>
<p>具体步骤如下：</p>
<h3 id="停止并删除容器">停止并删除容器</h3>
<p>停止容器：选中容器，单击右侧开关，停止选中的容器。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/151620637702024.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>删除容器：选中容器，依次选择“操作-删除”，删除选中的容器。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/161620637707529.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h3 id="删除镜像">删除镜像</h3>
<p>在映像页，选中镜像，点击“删除”，以删除选中的镜像。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/171620637714270.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h3 id="重新下载最新的映像配置并启动容器">重新下载最新的映像，配置并启动容器</h3>
<p>重新下载最新的映像，配置并启动容器，具体操作详见（一）中的第3-12步骤。</p>
<p>注意：在（一）中的步骤8中，挂载的目录要一致。</p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Nas</category>
        <category>Synology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nas</tag>
        <tag>群晖</tag>
        <tag>Synology</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖Docker安装Flexget实现自动订阅自动下载</title>
    <url>/posts/18894/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/wiserain/docker-flexget">wiserain/Flexget</a></p>
<p>FlexGet 是适用于所有媒体的多用途自动化工具支持种子文件、nzbs、播客、漫画、电视、电影、RSS、HTML、CSV 等。</p>
<span id="more"></span>
<h2 id="功能简介">功能简介</h2>
<p>综合来说，群晖上有多种方式可以安装Flexget，用于订阅PT站的新种，配合QB、TR等工具可以实现自动订阅自动下载。原理就是flexget订阅下载指定站点的种子，然后推送到下载器开始下载。</p>
<h2 id="安装教程">安装教程</h2>
<h3 id="安装docker套件">安装Docker套件</h3>
<p>在群辉套件中搜索docker并安装，安装很简单，选择存储空间之后等待安装结束即可。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221009419.png" alt="安装Docker套件" /><figcaption aria-hidden="true">安装Docker套件</figcaption>
</figure>
<h3 id="安装flexget容器">安装Flexget容器</h3>
<h4 id="下载flexget映像">下载Flexget映像</h4>
<p>打开docker，点左边的注册表，然后在上方的搜索框搜索Flexget，得到所有Flexget映像。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221010693.png" alt="搜索Flexget" /><figcaption aria-hidden="true">搜索Flexget</figcaption>
</figure>
<p>双击右边的第一个<code>wiserain/Flexget</code>进行下载，下载完成后会在群晖通知中心提示，文件约170M 左右，下载所需时长以当前网络情况而定。下载好之后，点击<code>映像</code>可以看到下载好的Flexget映像。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221010218.png" alt="Flexget映像" /><figcaption aria-hidden="true">Flexget映像</figcaption>
</figure>
<h4 id="准备文件夹环境">准备文件夹环境</h4>
<p>下载期间可以新建好Docker中Flexget需要的文件夹。</p>
<p>在File Station中Docker共享文件夹下，建立一个Flexget的文件夹，用于存放Flexget相关的文件。Flexget下面分别建立data和config的文件夹，前者用于存放数据，后者用于存放配置，在创建Flexget容器的时候，需要将这两个文件夹映射到Docker容器中。建好后效果如下：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221011715.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221011674.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
<p>选择<code>高级设置</code>选项卡，勾选<code>启用自动重新启动</code>，这样每次群晖重启之后，容器会自动启动，免去了手动启动的麻烦。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221012477.png" alt="启用自动重新启动" /><figcaption aria-hidden="true">启用自动重新启动</figcaption>
</figure>
<p>选择<code>卷</code>选项卡，按下图所示映射文件夹，将Docker中的路径映射到之前在群晖中新建好的路径。这样Flexget容器在Docker产生的数据都会存在群晖指定的文件夹中，方便备份恢复。</p>
<p>左边是刚刚建立的文件夹路径，右边是容器的路径（在容器中使用右边的路径，实际上是对应左边的路径）</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221012409.png" alt="映射" /><figcaption aria-hidden="true">映射</figcaption>
</figure>
<p>选择<code>端口</code>选项卡，添加一个3539的端口映射。本地端口是指在群晖中使用的端口。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221012969.png" alt="端口映射" /><figcaption aria-hidden="true">端口映射</figcaption>
</figure>
<p>选择<code>环境</code>选项卡，添加如下几个环境变量</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221013984.png" alt="添加环境变量" /><figcaption aria-hidden="true">添加环境变量</figcaption>
</figure>
<p>各参数作用及其值如下，直接复制下表中变量名和变量值即可：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">变量名</th>
<th style="text-align: center;">变量值</th>
<th style="text-align: center;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">TZ</td>
<td style="text-align: center;">Asia/Shanghai</td>
<td style="text-align: center;">用于指定时区，固定值。</td>
</tr>
<tr class="even">
<td style="text-align: center;">PGID</td>
<td style="text-align: center;">1001</td>
<td style="text-align: center;">可以随意4位数字，不要太大，不要和PUID重复</td>
</tr>
<tr class="odd">
<td style="text-align: center;">PUID</td>
<td style="text-align: center;">1002</td>
<td style="text-align: center;">可以随意4位数字，不要太大，不要和PGID重复</td>
</tr>
<tr class="even">
<td style="text-align: center;">FG_LOG_LEVEL</td>
<td style="text-align: center;">info</td>
<td style="text-align: center;">记录日志的级别，使用info即可</td>
</tr>
<tr class="odd">
<td style="text-align: center;">FG_WEB_PASSWD</td>
<td style="text-align: center;">你的密码</td>
<td style="text-align: center;">网页登录的密码，需要设置复杂密码，否则会启动失败。</td>
</tr>
</tbody>
</table>
<p>然后点应用，接着就一直下一步中可以看到刚才添加的所有配置参数，确认无误就可以点击应用创建容器了。创建好的容器会自动启动，效果如下：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221013461.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
<h3 id="访问flexget管理页面并配置">访问Flexget管理页面并配置</h3>
<h4 id="登录flexget">登录Flexget</h4>
<p>容器启动好之后，就可以通过<code>http://群晖ip:3539</code>访问Flexget应用，在登录界面输入用户名、密码登录。</p>
<blockquote>
<p>用户名：flexget</p>
<p>密码：在创建容器时环境选项卡配置的FG_WEB_PASSWD的值</p>
</blockquote>
<p>登录进去之后，点击左侧<code>config</code>菜单，开始配置站点订阅信息和下载器信息。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221014036.png" alt="点击左侧config菜单" /><figcaption aria-hidden="true">点击左侧config菜单</figcaption>
</figure>
<h4 id="配置注意事项">配置注意事项</h4>
<ol type="1">
<li>详细查看各项配置的说明</li>
<li>容易出问题的点1：flexget使用的是yml格式的配置，使用tab（制表符）缩进控制每行配置的层级关系。千万不能使用空格代替，否则会造成配置错误无法保存生效</li>
<li>容易出问题的2：配置中下载种子、文件的路径、其他各项参数只要出现错误，就会出现保存失败的提示。路径错误包括但不仅限于配置了一个还没创建好的路径。</li>
<li>配置好之后，点击③即可保存配置。</li>
<li>点击保存后注意观察右下角提示，如果提示保存成功，即可正常订阅并下载；提示保存失败，请挨个检查上述注意点。</li>
</ol>
<h4 id="配置模板">配置模板</h4>
<p>鉴于该配置文件容易出错，所以我准备了一个配置好的模块，复制之后把<code>站点及其passkey</code>、过滤信息、种子下载路径、下载器信息、文件下载路径等信息替换成自己的即可使用。模板如下，拿走不谢：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">web_server:</span></span><br><span class="line">  <span class="attr">bind:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3539</span>        <span class="comment">#web-ui的监听端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="attr">HDH:</span></span><br><span class="line">    <span class="attr">rss:</span> <span class="string">http://hdhome.org/torrentrss.php?rows=20&amp;linktype=dl&amp;passkey=b6ea527127b22890996f7a420a8ccc7a</span></span><br><span class="line">    <span class="attr">accept_all:</span> <span class="literal">no</span>                  <span class="comment">#是否全部下载，不想过滤就yes然后把downlod之前的全删了</span></span><br><span class="line">    <span class="attr">if:</span>                             <span class="comment">#启用 if 条件过滤</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&#x27;HDH&#x27; in title&quot;</span><span class="string">:</span> <span class="string">accept</span>   <span class="comment">#这里可以多行，指定不同的规则</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&#x27;@HDHome&#x27; in title&quot;</span><span class="string">:</span> <span class="string">accept</span>   <span class="comment">#这里可以多行，指定不同的规则</span></span><br><span class="line">      <span class="comment">#- &quot;&#x27;DEF&#x27; in title&quot;: reject   #标题含有 DEF 就不下载</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">download:</span> <span class="string">/volume3/Download/PT/Torrent_Monitor/HDH/</span>    <span class="comment">#种子下载路径</span></span><br><span class="line">    <span class="attr">qbittorrent:</span>    <span class="comment">#qb服务器信息</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.4</span><span class="number">.99</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">yyyy</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">xxxxx</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/volume3/Download/PT/Common/Up/HDH/</span> <span class="comment">#文件下载路径</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">PTer:</span></span><br><span class="line">    <span class="attr">rss:</span> <span class="string">https://pterclub.com/torrentrss.php?rows=20&amp;linktype=dl&amp;passkey=xxxxxxxx</span></span><br><span class="line">    <span class="attr">accept_all:</span> <span class="literal">no</span>                  <span class="comment">#是否全部下载，不想过滤就yes然后把downlod之前的全删了</span></span><br><span class="line">    <span class="attr">if:</span>                             <span class="comment">#启用 if 条件过滤</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&#x27;PTer&#x27; in title&quot;</span><span class="string">:</span> <span class="string">accept</span>   <span class="comment">#这里可以多行，指定不同的规则</span></span><br><span class="line">      <span class="comment">#- &quot;&#x27;DEF&#x27; in title&quot;: reject   #标题含有 DEF 就不下载</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">download:</span> <span class="string">/volume3/Download/PT/Torrent_Monitor/Pter/</span>   <span class="comment">#种子下载路径，即qb监视路径</span></span><br><span class="line">    <span class="attr">qbittorrent:</span>    <span class="comment">#qb服务器信息</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">xxxx</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">yyyyy</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/volume3/Download/PT/Common/Up/Pter/</span> <span class="comment">#文件下载路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#schedules: no</span></span><br><span class="line"><span class="attr">schedules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">tasks:</span> [<span class="string">PTer</span>,<span class="string">HDH</span>]     <span class="comment">#多个任务这样写[Pter,HDH]</span></span><br><span class="line">    <span class="attr">interval:</span></span><br><span class="line">      <span class="attr">minutes:</span> <span class="number">5</span>    <span class="comment">#任务执行时间间隔，单位分钟</span></span><br></pre></td></tr></table></figure>
<h3 id="效果检测">效果检测</h3>
<p>运行几分钟后，如果配置没有问题，就可以看到下载器中已经自动添加了任务，flexget历史记录中也有了数据。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108221015381.png" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Nas</category>
        <category>Synology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nas</tag>
        <tag>群晖</tag>
        <tag>Synology</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖Docker配置阿里云国际域名DDNS实现外网访问</title>
    <url>/posts/1798/</url>
    <content><![CDATA[<h2 id="前置条件">前置条件</h2>
<ol type="1">
<li>域名是在阿里云购买的，或者域名托管在阿里云 （我的域名本身就是阿里云买的，其他的域名我没有测试过）</li>
<li>地址必须是公网地址，不然加了解析也没有用 （这个不用多加解释了），同适用于IPV6地址</li>
</ol>
<span id="more"></span>
<h2 id="设置域名解析">设置域名解析</h2>
<p>登录阿里云控制台域名服务，设置域名解析，添加一个A记录到任意IP</p>
<p>例如：设置 A 记录 nas.youdomain.com 到 8.8.8.8</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-00-1024x237.jpg" alt="设置 A 记录" /><figcaption aria-hidden="true">设置 A 记录</figcaption>
</figure>
<h2 id="创建accesskey">创建AccessKey</h2>
<p>在阿里云控制台右上角头像下拉框找到 AccessKey 管理</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-01.jpg" alt="AccessKey 管理" /><figcaption aria-hidden="true">AccessKey 管理</figcaption>
</figure>
<p>创建 AccessKey，建议使用子用户创建</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-02.jpg" alt="子用户创建" /><figcaption aria-hidden="true">子用户创建</figcaption>
</figure>
<p>授予子用户管理DNS的权限，只需要添加这一项权限即可，请及时复制保存 AccessKey 的信息</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-03.jpg" alt="保存 AccessKey 的信息" /><figcaption aria-hidden="true">保存 AccessKey 的信息</figcaption>
</figure>
<h2 id="docker镜像下载">Docker镜像下载</h2>
<p>打开Docker的注册表，搜索aliyun。下载 chenhw2/aliyun-ddns-cli</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-04-1024x544.jpg" alt="下载" /><figcaption aria-hidden="true">下载</figcaption>
</figure>
<p>在映像中查看已完成的下载</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-05-1024x547.jpg" alt="下载" /><figcaption aria-hidden="true">下载</figcaption>
</figure>
<h2 id="创建容器">创建容器</h2>
<p>选择刚刚下载的映像，选择启动，进入高级设置</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-06-1024x545.jpg" alt="进入高级设置" /><figcaption aria-hidden="true">进入高级设置</figcaption>
</figure>
<p>在高级设置 &gt; 环境中修改以下内容，并点击应用保存</p>
<blockquote>
<p>AKID 填写刚刚创建的 AccessKeyID AKSCT 填写刚刚创建的 AccessKeySecret DOMAIN 填写你解析的域名 REDO 填写 600 其他保持默认</p>
</blockquote>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-07.jpg" alt="点击应用保存" /><figcaption aria-hidden="true">点击应用保存</figcaption>
</figure>
<p>再次核对信息，应用即创建容器</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-08.jpg" alt="创建容器" /><figcaption aria-hidden="true">创建容器</figcaption>
</figure>
<p>点击容器页面，可看到容器已启动成功</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-09-1024x354.jpg" alt="点击容器页面" /><figcaption aria-hidden="true">点击容器页面</figcaption>
</figure>
<p>查看详情，在日志中可看到已解析成功</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-10.jpg" alt="查看日志" /><figcaption aria-hidden="true">查看日志</figcaption>
</figure>
<h2 id="设置路由器">设置路由器</h2>
<h3 id="方法一upnp方式">方法一：UPnP方式</h3>
<p>第一种方法是通过UPnP方式，在群晖DSM界面完成对路由器端口转发的配置。这种方式并不稳定，路由器重启之后端口转发规则就丢失了。</p>
<p>在群晖DSM控制面板 &gt; 外部访问 &gt; 路由器配置，设置路由器，在设置之前将自动检测当前的路由器兼容性，检测完成后点击下一步应用即可。</p>
<p><a href="https://www.synology.cn/zh-cn/compatibility?search_by=category&amp;category=routers&amp;p=1">点击查询群晖NAS对应型号兼容的路由器型号</a></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-11.jpg" alt="设置路由器" /><figcaption aria-hidden="true">设置路由器</figcaption>
</figure>
<p>新增端口转发，将odoo的端口映射到路由器端口</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-12.jpg" alt="映射端口" /><figcaption aria-hidden="true">映射端口</figcaption>
</figure>
<h3 id="方法二路由器端配置端口转发">方法二：路由器端配置端口转发</h3>
<p>第二种方法是在路由器端配置端口转发，路由器的UPnP功能最好将其关闭。这种方法需要对NAS网路配置固定的内网IP地址，如果使用自动获取，在重启NAS后可能导致IP改变，端口转发设置也就失效了。</p>
<p>在路由器管理界面 &gt; 高级功能 &gt; 虚拟服务器，添加端口转发，保存即可。不同型号的路由器管理界面会有所差别，找到虚拟服务器设置转发规则即可。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-15-1024x415.jpg" alt="配置端口转发" /><figcaption aria-hidden="true">配置端口转发</figcaption>
</figure>
<p>以上两种路由器端口转发方法皆有优劣，大家根据实际情况任选其一。</p>
<p>如果使用了两条网线注意网络优先顺序，否则将影响转发的路由器线路。</p>
<h2 id="结语">结语</h2>
<p>至此在群晖NAS中配置阿里云域名服务商的DDNS动态域名解析服务已经完成，可通过【域名:端口号】实现群晖DSM和其他系统的外网访问。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-14-1024x517.jpg" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/DNS-aliyun-13-1024x517.jpg" alt="效果图" /><figcaption aria-hidden="true">效果图</figcaption>
</figure>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Nas</category>
        <category>Synology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nas</tag>
        <tag>群晖</tag>
        <tag>Synology</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云函数实现Freenom域名自动续期</title>
    <url>/posts/25610/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/luolongfei/freenom">luolongfei/freenom</a></p>
<p>Freenom域名自动续期。Freenom domain name renews automatically.</p>
<span id="more"></span>
<h2 id="使用方法">使用方法</h2>
<ol type="1">
<li>下载 SCF 版本的压缩包</li>
</ol>
<p>此版本为特别版，支持通过腾讯云函数部署，与主分支版本不兼容，版本号为<code>v0.3_scf</code></p>
<p>下载地址： https://github.com/luolongfei/freenom/archive/refs/tags/v0.3_scf.zip</p>
<p>下载后解压到你能找到的任意目录，你将得到一个文件夹，后期将通过文件夹的形式上传到腾讯云函数。</p>
<ol start="2" type="1">
<li>创建腾讯云函数</li>
</ol>
<p>直接访问腾讯云函数控制台创建云函数： https://console.cloud.tencent.com/scf/list-create ， 按照下图所示的说明进行创建：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/2nKCF0.png" alt="创建步骤" /><figcaption aria-hidden="true">创建步骤</figcaption>
</figure>
<ol start="3" type="1">
<li>查看输出结果</li>
</ol>
<p>按照上图所示部署完成后，可以点击云函数的名称进入云函数管理画面，管理画面往下翻可看到<code>部署</code>与<code>测试</code>按钮，点击<code>测试</code>，稍等几秒钟，即可看到输出日志， 根据输出日志判断配置以及部署是否正确。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/2nGZ3q.png" alt="输出日志" /><figcaption aria-hidden="true">输出日志</figcaption>
</figure>
<h2 id="配置项含义">配置项含义</h2>
<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 24%" />
<col style="width: 4%" />
<col style="width: 6%" />
<col style="width: 48%" />
</colgroup>
<thead>
<tr class="header">
<th>变量名</th>
<th>含义</th>
<th>默认值</th>
<th>是否必须</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>FREENOM_USERNAME</td>
<td>Freenom 账户</td>
<td>-</td>
<td>是</td>
<td>只支持邮箱账户，如果你是使用第三方社交账户登录的用户，请在 Freenom 管理页面绑定邮箱，绑定后即可使用邮箱账户登录</td>
</tr>
<tr class="even">
<td>FREENOM_PASSWORD</td>
<td>Freenom 密码</td>
<td>-</td>
<td>是</td>
<td>某些特殊字符可能需要转义，详见<code>.env</code>文件内注释</td>
</tr>
<tr class="odd">
<td>MULTIPLE_ACCOUNTS</td>
<td>多账户支持</td>
<td>-</td>
<td>否</td>
<td>多个账户和密码的格式必须是“<code>&lt;账户1&gt;@&lt;密码1&gt;|&lt;账户2&gt;@&lt;密码2&gt;|&lt;账户3&gt;@&lt;密码3&gt;</code>”，注意不要省略“&lt;&gt;”符号，否则无法正确匹配。如果设置了多账户，上面的<code>FREENOM_USERNAME</code>和<code>FREENOM_PASSWORD</code>可不设置</td>
</tr>
<tr class="even">
<td>MAIL_USERNAME</td>
<td>机器人邮箱账户</td>
<td>-</td>
<td>是</td>
<td>支持<code>Gmail</code>、<code>QQ邮箱</code>以及<code>163邮箱</code>，尽可能使用<code>163邮箱</code>或者<code>QQ邮箱</code>而非<code>Gmail</code>。因为谷歌的安全机制，每次在新设备登录 <code>Gmail</code> 都会先被限制，需要手动解除限制才行。具体的配置方法参考「 <a href="https://github.com/luolongfei/freenom#--配置发信邮箱">配置发信邮箱</a> 」</td>
</tr>
<tr class="odd">
<td>MAIL_PASSWORD</td>
<td>机器人邮箱密码</td>
<td>-</td>
<td>是</td>
<td><code>Gmail</code>填密码，<code>QQ邮箱</code>或<code>163邮箱</code>填授权码</td>
</tr>
<tr class="even">
<td>TO</td>
<td>接收通知的邮箱</td>
<td>-</td>
<td>是</td>
<td>你自己最常用的邮箱，推荐使用<code>QQ邮箱</code>，用来接收机器人邮箱发出的域名相关邮件</td>
</tr>
<tr class="odd">
<td>MAIL_ENABLE</td>
<td>是否启用邮件推送功能</td>
<td>true</td>
<td>否</td>
<td><code>true</code>：启用 <code>false</code>：不启用 默认启用，如果设为<code>false</code>，不启用邮件推送功能，则上面的<code>MAIL_USERNAME</code>、<code>MAIL_PASSWORD</code>、<code>TO</code>变量变为非必须，可不设置</td>
</tr>
<tr class="even">
<td>TELEGRAM_CHAT_ID</td>
<td>你的<code>chat_id</code></td>
<td>-</td>
<td>否</td>
<td>通过发送<code>/start</code>给<code>@userinfobot</code>可以获取自己的<code>id</code></td>
</tr>
<tr class="odd">
<td>TELEGRAM_BOT_TOKEN</td>
<td>你的<code>Telegram bot</code>的<code>token</code></td>
<td>-</td>
<td>否</td>
<td></td>
</tr>
<tr class="even">
<td>TELEGRAM_BOT_ENABLE</td>
<td>是否启用<code>Telegram Bot</code>推送功能</td>
<td>false</td>
<td>否</td>
<td><code>true</code>：启用 <code>false</code>：不启用 默认不启用，如果设为<code>true</code>，则必须设置上面的<code>TELEGRAM_CHAT_ID</code>和<code>TELEGRAM_BOT_TOKEN</code>变量</td>
</tr>
<tr class="odd">
<td>NOTICE_FREQ</td>
<td>通知频率</td>
<td>1</td>
<td>否</td>
<td><code>0</code>：仅当有续期操作的时候 <code>1</code>：每次执行</td>
</tr>
</tbody>
</table>
<p>更多配置项含义，请参考<a href="https://github.com/luolongfei/freenom/blob/master/.env.example"><code>.env</code>文件</a>中的注释。</p>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>SCF</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>腾讯云函数</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云函数实现机场每日自动签到领流量</title>
    <url>/posts/3894/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/icrons/ssp-sign">icrons/ssp-sign</a></p>
<p>腾讯云函数机场签到、sspanel自动签到脚本，支持各种推送通知。</p>
<span id="more"></span>
<h2 id="使用方法">使用方法</h2>
<ol type="1">
<li><p>登录<a href="https://console.cloud.tencent.com/scf/list">腾讯云函数</a>，选择<code>函数服务</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYm1aT.jpg" alt="函数服务" /><figcaption aria-hidden="true">函数服务</figcaption>
</figure></li>
<li><p>选择区域<code>中国香港</code>，点击<code>新建</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYmMq0.jpg" alt="区域" /><figcaption aria-hidden="true">区域</figcaption>
</figure></li>
<li><p>选择<code>自定义创建</code>，函数类型选择<code>事件函数</code>，函数名称自定义编辑，地域选择<code>中国香港</code>，避免机场网站被墙，运行环境选择<code>Python3.6</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYmJG4.jpg" alt="自定义创建" /><figcaption aria-hidden="true">自定义创建</figcaption>
</figure></li>
<li><p>编辑器内粘贴<a href="https://raw.githubusercontent.com/icrons/ssp-sign/main/main.py">main.py</a>内的代码，修改相关代码</p></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SspanelQd</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 机场地址</span></span><br><span class="line">        self.base_url = <span class="string">&#x27;http://****&#x27;</span></span><br><span class="line">        <span class="comment"># 登录信息</span></span><br><span class="line">        self.email = <span class="string">&#x27;*******@qq.com&#x27;</span></span><br><span class="line">        self.password = <span class="string">&#x27;x******&#x27;</span></span><br><span class="line">        <span class="comment"># 酷推qq推送</span></span><br><span class="line">        self.ktkey = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># ServerTurbo推送</span></span><br><span class="line">        self.SendKey = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># Qmsg私聊推送</span></span><br><span class="line">        self.QmsgKey = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYm3IU.jpg" alt="粘贴代码" /><figcaption aria-hidden="true">粘贴代码</figcaption>
</figure>
<ol start="5" type="1">
<li><p>高级配置中，执行超时时间输入<code>900</code>秒</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYmKrq.jpg" alt="执行超时时间" /><figcaption aria-hidden="true">执行超时时间</figcaption>
</figure></li>
<li><p>触发器配置中，创建触发器选择<code>自定义创建</code>，触发周期选择<code>自定义触发周期</code>，Cron表达式输入<code>0 0 10 * * * *</code>，表示在每天上午10点触发</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYm0Z6.jpg" alt="创建触发器" /><figcaption aria-hidden="true">创建触发器</figcaption>
</figure></li>
<li><p>最后选择完成</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYmas1.jpg" alt="选择完成" /><figcaption aria-hidden="true">选择完成</figcaption>
</figure></li>
</ol>
<h2 id="python代码">Python代码</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2021/3/21 12:01</span></span><br><span class="line"><span class="string">@Auth ： Icrons</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SspanelQd</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 机场地址</span></span><br><span class="line">        self.base_url = <span class="string">&#x27;http://****&#x27;</span></span><br><span class="line">        <span class="comment"># 登录信息</span></span><br><span class="line">        self.email = <span class="string">&#x27;*******@qq.com&#x27;</span></span><br><span class="line">        self.password = <span class="string">&#x27;x******&#x27;</span></span><br><span class="line">        <span class="comment"># 酷推qq推送</span></span><br><span class="line">        self.ktkey = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># ServerTurbo推送</span></span><br><span class="line">        self.SendKey = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># Qmsg私聊推送</span></span><br><span class="line">        self.QmsgKey = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkin</span>(<span class="params">self</span>):</span></span><br><span class="line">        email = self.email.split(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        email = email[<span class="number">0</span>] + <span class="string">&#x27;%40&#x27;</span> + email[<span class="number">1</span>]</span><br><span class="line">        password = self.password</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            session = requests.session()</span><br><span class="line">            session.get(self.base_url, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">            login_url = self.base_url + <span class="string">&#x27;/auth/login&#x27;</span></span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            post_data = <span class="string">&#x27;email=&#x27;</span> + email + <span class="string">&#x27;&amp;passwd=&#x27;</span> + password + <span class="string">&#x27;&amp;code=&#x27;</span></span><br><span class="line">            post_data = post_data.encode()</span><br><span class="line">            session.post(login_url, post_data, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Referer&#x27;</span>: self.base_url + <span class="string">&#x27;/user&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            response = session.post(self.base_url + <span class="string">&#x27;/user/checkin&#x27;</span>, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">            <span class="comment"># print(response.text)</span></span><br><span class="line">            msg = (response.json()).get(<span class="string">&#x27;msg&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        info_url = self.base_url + <span class="string">&#x27;/user&#x27;</span></span><br><span class="line">        response = session.get(info_url, verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        以下只适配了editXY主题</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            level = re.findall(<span class="string">r&#x27;\[&quot;Class&quot;, &quot;(.*?)&quot;],&#x27;</span>, response.text)[<span class="number">0</span>]</span><br><span class="line">            day = re.findall(<span class="string">r&#x27;\[&quot;Class_Expire&quot;, &quot;(.*)&quot;],&#x27;</span>, response.text)[<span class="number">0</span>]</span><br><span class="line">            rest = re.findall(<span class="string">r&#x27;\[&quot;Unused_Traffic&quot;, &quot;(.*?)&quot;]&#x27;</span>, response.text)[<span class="number">0</span>]</span><br><span class="line">            msg = <span class="string">&quot;- 今日签到信息：&quot;</span> + <span class="built_in">str</span>(msg) + <span class="string">&quot;\n- 用户等级：&quot;</span> + <span class="built_in">str</span>(level) + <span class="string">&quot;\n- 到期时间：&quot;</span> + <span class="built_in">str</span>(day) + <span class="string">&quot;\n- 剩余流量：&quot;</span> + <span class="built_in">str</span>(rest)</span><br><span class="line">            <span class="built_in">print</span>(msg)</span><br><span class="line">            <span class="keyword">return</span> msg</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Qmsg私聊推送</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Qmsg_send</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.QmsgKey == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        qmsg_url = <span class="string">&#x27;https://qmsg.zendee.cn/send/&#x27;</span> + <span class="built_in">str</span>(self.QmsgKey)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span>: msg,</span><br><span class="line">        &#125;</span><br><span class="line">        requests.post(qmsg_url, data=data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Server酱推送</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_send</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.SendKey == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        server_url = <span class="string">&quot;https://sctapi.ftqq.com/&quot;</span> + <span class="built_in">str</span>(self.SendKey) + <span class="string">&quot;.send&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;text&#x27;</span>: <span class="string">&quot;今日的流量白嫖到啦！&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;desp&#x27;</span>: msg</span><br><span class="line">        &#125;</span><br><span class="line">        requests.post(server_url, data=data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 酷推QQ推送</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kt_send</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.ktkey == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        kt_url = <span class="string">&#x27;https://push.xuthus.cc/send/&#x27;</span> + <span class="built_in">str</span>(self.ktkey)</span><br><span class="line">        data = (<span class="string">&#x27;签到完成，点击查看详细信息~\n&#x27;</span> + <span class="built_in">str</span>(msg)).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        requests.post(kt_url, data=data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>):</span></span><br><span class="line">        msg = self.checkin()</span><br><span class="line">        <span class="keyword">if</span> msg == <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;网址不正确或网站禁止访问。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.server_send(msg)</span><br><span class="line">            self.kt_send(msg)</span><br><span class="line">            self.serverTurbo_send(msg)</span><br><span class="line">            self.Qmsg_send(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 云函数入口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line">    run = SspanelQd()</span><br><span class="line">    run.main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run = SspanelQd()</span><br><span class="line">    run.main()</span><br></pre></td></tr></table></figure>
<h2 id="cron-表达式">Cron 表达式</h2>
<p>创建定时触发器时，用户能够使用标准的 Cron 表达式的形式自定义何时触发。定时触发器现已推出秒级触发功能，为了兼容老的定时触发器，因此 Cron 表达式有两种写法。</p>
<h3 id="cron-表达式语法一推荐">Cron 表达式语法一（推荐）</h3>
<p>Cron 表达式有七个必需字段，按空格分隔。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">第一位</th>
<th style="text-align: left;">第二位</th>
<th style="text-align: left;">第三位</th>
<th style="text-align: left;">第四位</th>
<th style="text-align: left;">第五位</th>
<th style="text-align: left;">第六位</th>
<th style="text-align: left;">第七位</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">秒</td>
<td style="text-align: left;">分钟</td>
<td style="text-align: left;">小时</td>
<td style="text-align: left;">日</td>
<td style="text-align: left;">月</td>
<td style="text-align: left;">星期</td>
<td style="text-align: left;">年</td>
</tr>
</tbody>
</table>
<p>其中，每个字段都有相应的取值范围：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">字段</th>
<th style="text-align: left;">值</th>
<th style="text-align: left;">通配符</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">秒</td>
<td style="text-align: left;">0 - 59的整数</td>
<td style="text-align: left;">, - * /</td>
</tr>
<tr class="even">
<td style="text-align: left;">分钟</td>
<td style="text-align: left;">0 - 59的整数</td>
<td style="text-align: left;">, - * /</td>
</tr>
<tr class="odd">
<td style="text-align: left;">小时</td>
<td style="text-align: left;">0 - 23的整数</td>
<td style="text-align: left;">, - * /</td>
</tr>
<tr class="even">
<td style="text-align: left;">日</td>
<td style="text-align: left;">1 - 31的整数（需要考虑月的天数）</td>
<td style="text-align: left;">, - * /</td>
</tr>
<tr class="odd">
<td style="text-align: left;">月</td>
<td style="text-align: left;">1 - 12的整数或 JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC</td>
<td style="text-align: left;">, - * /</td>
</tr>
<tr class="even">
<td style="text-align: left;">星期</td>
<td style="text-align: left;">0 - 6的整数或 SUN,MON,TUE,WED,THU,FRI,SAT。其中0指星期日，1指星期一，以此类推</td>
<td style="text-align: left;">, - * /</td>
</tr>
<tr class="odd">
<td style="text-align: left;">年</td>
<td style="text-align: left;">1970 - 2099的整数</td>
<td style="text-align: left;">, - * /</td>
</tr>
</tbody>
</table>
<h3 id="cron-表达式语法二不推荐">Cron 表达式语法二（不推荐）</h3>
<p>Cron 表达式有五个必需字段，按空格分隔。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">第一位</th>
<th style="text-align: left;">第二位</th>
<th style="text-align: left;">第三位</th>
<th style="text-align: left;">第四位</th>
<th style="text-align: left;">第五位</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">分钟</td>
<td style="text-align: left;">小时</td>
<td style="text-align: left;">日</td>
<td style="text-align: left;">月</td>
<td style="text-align: left;">星期</td>
</tr>
</tbody>
</table>
<p>其中，每个字段都有相应的取值范围：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">字段</th>
<th style="text-align: left;">值</th>
<th style="text-align: left;">通配符</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">分钟</td>
<td style="text-align: left;">0 - 59的整数</td>
<td style="text-align: left;">, - * /</td>
</tr>
<tr class="even">
<td style="text-align: left;">小时</td>
<td style="text-align: left;">0 - 23的整数</td>
<td style="text-align: left;">, - * /</td>
</tr>
<tr class="odd">
<td style="text-align: left;">日</td>
<td style="text-align: left;">1 - 31的整数（需要考虑月的天数）</td>
<td style="text-align: left;">, - * /</td>
</tr>
<tr class="even">
<td style="text-align: left;">月</td>
<td style="text-align: left;">1 - 12的整数或 JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC</td>
<td style="text-align: left;">, - * /</td>
</tr>
<tr class="odd">
<td style="text-align: left;">星期</td>
<td style="text-align: left;">0 - 6的整数或 SUN,MON,TUE,WED,THU,FRI,SAT。其中0指星期日，1指星期一，以此类推</td>
<td style="text-align: left;">, - * /</td>
</tr>
</tbody>
</table>
<h3 id="通配符">通配符</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">通配符</th>
<th style="text-align: left;">含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">,（逗号）</td>
<td style="text-align: left;">代表取用逗号隔开的字符的并集。例如：在“小时”字段中 1,2,3 表示1点、2点和3点</td>
</tr>
<tr class="even">
<td style="text-align: left;">-（破折号）</td>
<td style="text-align: left;">包含指定范围的所有值。例如：在“日”字段中，1 - 15包含指定月份的1号到15号</td>
</tr>
<tr class="odd">
<td style="text-align: left;">* （星号）</td>
<td style="text-align: left;">表示所有值。在“小时”字段中，* 表示每个小时</td>
</tr>
<tr class="even">
<td style="text-align: left;">/ （正斜杠）</td>
<td style="text-align: left;">指定增量。在“分钟”字段中，输入1/10以指定从第一分钟开始的每隔十分钟重复。例如，第11分钟、第21分钟和第31分钟，以此类推</td>
</tr>
</tbody>
</table>
<h3 id="注意事项">注意事项</h3>
<p>在 Cron 表达式中的“日”和“星期”字段同时指定值时，两者为“或”关系，即两者的条件分别均生效。</p>
<h3 id="示例">示例</h3>
<p>下面展示了一些 Cron 表达式和相关含义的示例：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">表达式</th>
<th style="text-align: left;">相关含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>*/5 * * * * * *</code></td>
<td style="text-align: left;">表示每5秒触发一次</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>0 15 10 1 * * *</code></td>
<td style="text-align: left;">表示在每月的1日的上午10:15触发</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>0 15 10 * * MON-FRI *</code></td>
<td style="text-align: left;">表示在周一到周五每天上午10:15触发</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>0 0 10,14,16 * * * *</code></td>
<td style="text-align: left;">表示在每天上午10点，下午2点，4点触发</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>0 */30 9-17 * * * *</code></td>
<td style="text-align: left;">表示在每天上午9点到下午5点每半小时触发</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>0 0 12 * * WED *</code></td>
<td style="text-align: left;">表示在每个星期三中午12点触发</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>SCF</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>腾讯云函数</tag>
      </tags>
  </entry>
  <entry>
    <title>解决TMDb刮削失败无法识别影片</title>
    <url>/posts/44854/</url>
    <content><![CDATA[<h2 id="内容简介">内容简介</h2>
<p>装好EMBY后，发现用TMDb刮削不到图片，而豆瓣插件只能用于影片，无法检测tv剧集。后来发现原来TMDb的Api接口被GFW墙了，但TMDb的官网是可以正常连接的。本文将解决TMDb 刮削失败 无法识别影片支持EMBY、PLEX、KODI。</p>
<span id="more"></span>
<h2 id="解决步骤">解决步骤</h2>
<h3 id="多地ping检测可用ip">多地ping检测可用ip</h3>
<p>既然知道了原因就好办了，上站长之家多地ping一下TMDb的接口网址。</p>
<p>点击进入<a href="https://ping.chinaz.com/">站长之家</a> ，输入TMDB API接口地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">api.themoviedb.org</span><br><span class="line">image.tmdb.org</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Emby破解和刮削相关域名</span></span><br><span class="line">mb3admin.com #负责激活服务端与客户端</span><br><span class="line">www.mb3admin.com #插件服务器加速(仅服务端)</span><br><span class="line">embydata.com #Emby下载服务器加速(仅服务端)</span><br><span class="line">api.themoviedb.org #加速TMDB的刮削(仅服务端)</span><br><span class="line">image.tmdb.org #加速TMDB的图片获取(仅服务端)</span><br><span class="line">assets.fanart.tv #加速FanArt资源(仅服务端)</span><br><span class="line">webservice.fanart.tv #加速FanArt刮削(仅服务端)</span><br><span class="line">api.opensubtitles.org #加速OpenSubtitles获取(仅服务端)</span><br></pre></td></tr></table></figure>
<p>可以看到国内一片红，我们需要的是海外ping的连接ip信息。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108242009277.jpeg" alt="ip信息" /><figcaption aria-hidden="true">ip信息</figcaption>
</figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108242009829.jpeg" alt="详情" /><figcaption aria-hidden="true">详情</figcaption>
</figure>
<h3 id="本地ping检测">本地ping检测</h3>
<p><strong>以win10为例，用CMD测试上述海外ip地址是否能ping通，挑个连接比较快的。</strong></p>
<p>我这里使用13.225.103.110，各位可尝试别的。</p>
<h3 id="替换hosts或重定向">替换hosts或重定向</h3>
<p>直接修改路由器就不用每台电脑或者nas里设置了。</p>
<p>以老毛子路由器为例，</p>
<p>方法一</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">依次打开 高级设置 - 内部网络（LAN） -DHCP服务器 - 高级设置 - 自定义配置文件“hosts”</span><br></pre></td></tr></table></figure>
<p>按格式加插一行，然后应用本页面设置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">13.225.103.110 api.themoviedb.org</span><br></pre></td></tr></table></figure>
<p>方法二</p>
<p>由于我开了Adguard home去广告软件，其实在这里面设置也很方便。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">依次打开 过滤器- 自定义过滤规则 - 加上  13.225.103.110 api.themoviedb.org  - 应用</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108242010708.jpeg" alt="域名重写" /><figcaption aria-hidden="true">域名重写</figcaption>
</figure>
<h3 id="检测刮削情况">检测刮削情况</h3>
<p>回到EMBY刷新元数据，或者点开某部片点击识别，刮削正常，能识别影片和下载图片。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108242011076.jpeg" alt="刮削正常" /><figcaption aria-hidden="true">刮削正常</figcaption>
</figure>
]]></content>
      <categories>
        <category>Nas</category>
      </categories>
      <tags>
        <tag>Nas</tag>
        <tag>群晖</tag>
        <tag>TMDb</tag>
      </tags>
  </entry>
  <entry>
    <title>局域网Emby白嫖教程含原理</title>
    <url>/posts/36025/</url>
    <content><![CDATA[<p>前不久，我搭建了一个 Emby 服务器使用，使用体验是真好，但是其客户端除 Web 版都受到了不同程度的限制，最为影响的便是只能播放一分钟了吧... 虽然 Web 界面的体验可以说是非常完整，不必客户端差到哪里去，但是一旦涉及到播放之类的体验，Web 客户端显得很弱鸡。</p>
<span id="more"></span>
<blockquote>
<p>我使用搭载 iOS13.3 的 iPhoneXR，在 Safari 与 AppStore 下载到的 Emby 客户端同时播放一份 4K H264 的视频，根据播放统计信息，Web 客户端居然因为分辨率不匹配导致转码了 (这里的转码可都是在服务器上的) 并且 ASS 字幕也很卡。而客户端就丝滑如 defu。</p>
</blockquote>
<p>那为什么不用客户端呢？客户端全家桶要钱的啊！！而且还不便宜，我为什么不去开大会员呢？？？由此想对客户端下手。</p>
<blockquote>
<p>1 月 19 日更新：已经修正了多处问题，并且已经测试 iOS 客户端可正常使用 2 月 13 日更新：由于顺带给朋友整了一下，稍微弄了一个适合小白的引导页，当然了，没有自己服务器 / 不会 / 懒的，也可以让我喝杯奶茶然后我帮你直接用我服务器上的。 你也可以另外让我帮你搭建，这样你可以直接在局域网内享受。 但同时暂时没条件测试长久不连接服务器多久会掉激活的问题，目前一直稳定。 4 月 4 日更新：补上了几处 api 端口，现在我敢说完美激活！包括转码，电视直播，转换，下载功能在内均可使用。 这篇文章也由<code>白嫖一下Emby的客户端们</code>可以改为<code>白嫖一下Emby了</code>，测试版本 <code>4.4.1.0</code> 4 月 21 日更新：经过一段时间的调试，我已经将其做成公开服务向公众提供服务 <a href="https://mba.mvnas.com/">https://mba.mvnas.com</a> 该教程仍然接受维护。</p>
</blockquote>
<h2 id="分析">分析</h2>
<p>使用工具抓包，发现 Emby 客户端访问了一个外部站点 <code>mb3admin.com</code> 会请求一些东西，然后返回了:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;message&quot; : &quot;Device Not Registered&quot;,</span><br><span class="line">  &quot;cacheExpirationDays&quot; : 7,</span><br><span class="line">  &quot;resultCode&quot; : &quot;NOTREG&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里应该就是判断客户端是否被授权的响应了。值得注意的是，客户端的请求带上了服务器 ID、客户端 ID 等其他客户端信息。这令我想起了之前参阅 Emby Premiere 规则时看到的，单个 Key 至多支持 25 台设备，我之前看到网上有不少 Emby 合车的人，但是他们都是 10 人车，我还纳闷为啥不 25 人车？(顺便一提，Emby Premiere 永久价格大概是 815 块大洋。) 如果是按照客户端来计算激活设备的话，并且还要算上服务器激活一台的话，那么 10 人车每个人只能享受 2 台设备的样子？(一台服务器，一个手机) 那客户端发过去的设备 ID 是随机的，我刷个机或者怎么样就变一个 id，这 25 台设备还不是一下自就造完了...</p>
<p>回到正题，后来查阅资料，也着手分析了一下 Emby 的 Windows 版本 (是个 Electron 应用)，我们只需要让客户端请求后得到如下返回：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;cacheExpirationDays&quot;: 7,</span><br><span class="line">    &quot;message&quot;: &quot;Device Valid&quot;,</span><br><span class="line">    &quot;resultCode&quot;: &quot;GOOD&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即可。既然不方便对客户端下手，那我们来搭建一个伪站吧。 据自己测试，客户端会缓存授权信息，猜测应该和 <code>cacheExpirationDays</code> 有关，也许和 KMS 一样的操作，我现在设置成 365 了。。。不过经测试，激活一次后使用流量可正常使用：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251144044.png" alt="转换" /><figcaption aria-hidden="true">转换</figcaption>
</figure>
<p>经过整理，emby 每次激活会访问：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/admin/service/registration/validate</span><br><span class="line">/admin/service/registration/getStatus</span><br><span class="line">/admin/service/registration/validateDevice</span><br></pre></td></tr></table></figure>
<h2 id="搭建伪站">搭建伪站</h2>
<h3 id="一些准备">一些准备</h3>
<ul>
<li>你只需要一个能访问的 Web 服务器就行，本文使用 Nginx</li>
<li>一个装有 OpenSSL 的设备，当然你也可以不用</li>
<li>Emby 客户端，其实这个你不要也可以</li>
</ul>
<h3 id="建立一个站点">建立一个站点</h3>
<p>新建一个域名为 <code>mb3admin.com</code> 的站点就行，你的服务端，客户端都要能够正常访问伪站。</p>
<p>然后只需要配置伪静态。Apache 服务器请自行寻找相关资料，目的就是直接让 Nginx 返回我们需要的 JSON</p>
<p>这里我提供我写的伪静态，如果你有更好的...</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">location /admin/service/registration/validateDevice &#123;</span><br><span class="line">    default_type application/json;</span><br><span class="line">  return 200 &#x27;&#123;&quot;cacheExpirationDays&quot;: 7,&quot;message&quot;: &quot;Device Valid&quot;,&quot;resultCode&quot;: &quot;GOOD&quot;&#125;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">location /admin/service/registration/validate &#123;</span><br><span class="line">    default_type application/json;</span><br><span class="line">  return 200 &#x27;&#123;&quot;featId&quot;:&quot;&quot;,&quot;registered&quot;:true,&quot;expDate&quot;:&quot;2099-01-01&quot;,&quot;key&quot;:&quot;&quot;&#125;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">location /admin/service/registration/getStatus &#123;</span><br><span class="line">    default_type application/json;</span><br><span class="line">  return 200 &#x27;&#123;&quot;deviceStatus&quot;:&quot;&quot;,&quot;planType&quot;:&quot;&quot;,&quot;subscriptions&quot;:&#123;&#125;&#125;&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存后，到浏览器内测试访问一下 <code>https://mb3admin.com/admin/service/registration/validateDevice</code></p>
<p>正常返回我们要的 json 即成功。</p>
<h3 id="签发证书">签发证书</h3>
<blockquote>
<p>这里我会详细介绍如何签发自己的证书，当然你可以跳过这一步，直接到文件末尾下载我生成好的证书。 这里我提供三种方法，前一种是自己动手，第二种是超级省事，翻到文章末尾是粘贴复制 (逃</p>
</blockquote>
<h4 id="使用-openssl-进行签发">使用 OpenSSL 进行签发</h4>
<h4 id="生成-ca-请求并签名">生成 CA 请求并签名</h4>
<p>使用命令 <code>openssl req -x509 -new -nodes -key ca.key -days 3650 -subj "/C=JP/ST=Japan/L=Japan/O=Emby/CN=mb3admin.com" -out ca.pem</code> 一步到位。 这样就会在当前路径下签出一张 CA 证书与 CA 密钥，如果懂一点点的话可以按需要修改其中的参数。</p>
<h5 id="请求服务器证书">请求服务器证书</h5>
<p>使用命令 <code>openssl req -newkey rsa:2048 -days 824 -nodes -keyout ssl.key -subj "/C=JP/ST=Japan/L=Japan/O=Emby/CN=mb3admin.com" -out ssl.csr</code> 然后</p>
<h5 id="构建-ca-机构结构">构建 CA 机构结构</h5>
<p>使用命令 <code>mkdir -p /etc/pki/CA;mkdir -p /etc/pki/CA/newcerts;touch /etc/pki/CA/index.txt;mkdir /etc/pki/CA/private;echo 01 &gt; /etc/pki/CA/serial</code> 即可一键构建好 CA 机构，然后将 CA 的证书和密钥添加到机构中： <code>cp ca.pem /etc/pki/CA/cacert.pem;cp ca.key /etc/pki/CA/private/cakey.pem</code></p>
<h5 id="自定义证书用途">自定义证书用途</h5>
<p>此时如果直接签发，会发现不仅没有 DNS 备选名称而且证书用途是<code>无</code>这样会导致 Chrome 以及大部分现代浏览器不信任。 新建一个 <code>http.ext</code> 文件，里头写上:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line">extendedKeyUsage = serverAuth, clientAuth</span><br><span class="line">subjectAltName=@SubjectAlternativeName</span><br><span class="line"> </span><br><span class="line">[ SubjectAlternativeName ]</span><br><span class="line">DNS.1=mb3admin.com</span><br><span class="line">DNS.2=*.mb3admin.com</span><br></pre></td></tr></table></figure>
<h5 id="签发证书-1">签发证书！</h5>
<p>执行 <code>openssl ca -extfile http.ext -in ssl.csr -out ssl.pem</code> 回答两个 <code>y</code> 即可发现当前目录下已经签出了 <code>ssl.pem</code></p>
<h3 id="使用网上的工具一键签发">使用网上的工具一键签发</h3>
<p>因为对 OpenSSL 了解不深，一些自定义项根本不知道写啥，为此搜索了一圈，发现了这个宝藏站点：<a href="https://www.gmcert.org/subForm">国密线上证书签发</a> 打开后，按照这样填写：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251147005.png" alt="填写方式" /><figcaption aria-hidden="true">填写方式</figcaption>
</figure>
<p>一个是加密算法选 <code>RSA</code>, 密钥长度至少选 <code>2048</code>, 然后除主题名称要按我这个写之外其他的按照规则随意填写。点开高级选项：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251147779.png" alt="点开高级选项" /><figcaption aria-hidden="true">点开高级选项</figcaption>
</figure>
<p>主题备用名称照我这样填写，记得 <code>DNS</code> 与数字直接有一个<code>.</code>。按照图这样勾选两处用途。然后勾选<code>自动包含CA证书链</code>，最后是证书有效天数，写 824 天即可。</p>
<h3 id="配置证书">配置证书</h3>
<p>在 Web 服务器中为站点部署好 <code>ssl.key</code> 与 <code>ssl.pem</code> 作为密钥与 SSL 证书即可。如果是国密生成出来的就是 <code>mb3admin.com.key.pem</code> 和 <code>mb3admin.com.cert.pem</code>。</p>
<p>国密证书请下载刚刚生成页面中提到的<code>根证书</code>也可以前往本文最后获取国密的 CA 证书，然后按照下面的方法使用。如果你是 OpenSSL 命令生成的： 把 <code>ca.pem</code> 中的内容写入到本地计算机新建的一个 <code>ca.crt</code> 文件中，双击打开：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251148212.png" alt="双击打开" /><figcaption aria-hidden="true">双击打开</figcaption>
</figure>
<p>选择安装证书，根据需求选择安装位置，然后第三步，</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251148369.png" alt="选择安装位置" /><figcaption aria-hidden="true">选择安装位置</figcaption>
</figure>
<p>选择<code>将所有证书都放入下列存储</code>，单击浏览，选择<code>受信任的根证书颁发机构</code>然后下一步下一步</p>
<p>导入完成后，我们在浏览器中访问 <code>https://mb3admin.com/admin/service/registration/666</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251148243.png" alt="查看证书" /> It's works! 如果还是报错，尝试重启浏览器，清理缓存等步骤。</p>
<h3 id="添加头部">添加头部</h3>
<p>Nginx 服务器请直接在网站的配置文件中加入：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line"><span class="attribute">add_header</span> Access-Control-Allow-Headers *;</span><br><span class="line"><span class="attribute">add_header</span> Access-Control-Allow-Method *;</span><br><span class="line"><span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>避免部分地方有跨域的问题。</p>
<h3 id="尝试一下">尝试一下</h3>
<p>打开 Emby Windows 客户端，</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/202108251150170.png" alt="打开客户端" /><figcaption aria-hidden="true">打开客户端</figcaption>
</figure>
<p>能使用<code>下载到</code>功能，并且能直接修改主题</p>
<p>并且播放也正常。iOS 设备也全部正常！</p>
<h3 id="在-linux-下配置证书">在 Linux 下配置证书</h3>
<p>经测试，共两处需要配置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/opt/emby-server/etc/ssl/certs/ca-certificates.crt</span><br><span class="line">/etc/pki/tls/certs/ca-bundle.crt</span><br></pre></td></tr></table></figure>
<p>第一处是 emby 的 c# 环境自带的信任列表，这个我找了很久。第二处是 linux 系统的信任列表。本来是没打算写的，因为在我服务器上</p>
<p>修改系统的信任列表直接可用 (CentOS8) 但是多方测试发现在 CentOS7 下会出现证书信任问题，但是 curl 可以正常请求。就考虑到是 C# 类似 java 一样，本身有信任列表。</p>
<p>在 emby 的目录翻找，运气好找到了这个文件。只需要把根证书添加在结尾即可。</p>
<p>Windows 下可以不用管，是直接跟系统信任的。</p>
<h3 id="为什么是-824-天">为什么是 824 天？‌﻿‌﻿‌﻿﻿‌﻿﻿﻿﻿﻿﻿‌﻿‌﻿﻿‌﻿﻿‍﻿﻿‌﻿﻿‌﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‌﻿‌﻿﻿‌﻿﻿‍﻿﻿‌﻿﻿﻿‌﻿﻿﻿﻿‌﻿﻿﻿﻿‌﻿‌﻿﻿‍﻿﻿﻿‌﻿‌﻿﻿﻿﻿‌﻿﻿﻿‌﻿‌﻿﻿‌﻿﻿‍﻿﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿﻿﻿﻿﻿‌﻿﻿‌﻿﻿‌﻿‍﻿‌﻿﻿‌﻿﻿‌﻿﻿‌﻿‌﻿‍﻿‌﻿﻿﻿‌﻿﻿‌﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿‌﻿﻿‌﻿﻿‍﻿‌﻿﻿‌﻿‌﻿‌﻿‌﻿﻿‌﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿‌﻿‌﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿﻿﻿‍﻿‌﻿﻿﻿‌﻿‌﻿﻿﻿﻿‍﻿﻿﻿‌﻿‌﻿﻿‌﻿﻿﻿﻿﻿﻿‌﻿﻿﻿‌﻿‍﻿﻿‌﻿﻿‌﻿‌﻿‌﻿﻿‌﻿﻿‌﻿‌﻿﻿‌﻿‌﻿﻿‍﻿﻿‌﻿‌﻿‌﻿﻿﻿﻿﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿‌﻿‍﻿﻿﻿﻿﻿﻿﻿﻿﻿‌﻿‌﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‍﻿﻿‌﻿﻿‌﻿‌﻿﻿﻿﻿‌﻿‌﻿﻿﻿﻿﻿﻿‍﻿﻿﻿‌﻿﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿﻿﻿﻿‍﻿﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‌﻿﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‌﻿‍﻿﻿‌﻿‌﻿﻿﻿﻿‌﻿‌﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿‍﻿﻿﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‍﻿﻿﻿﻿‌﻿﻿﻿‌﻿‌﻿﻿﻿﻿﻿﻿‌﻿﻿‍﻿﻿‌﻿﻿﻿‌﻿﻿‌﻿﻿﻿‌﻿﻿‌﻿﻿﻿‌﻿‍﻿﻿‌﻿‌﻿﻿﻿﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿﻿‌﻿‌﻿﻿﻿﻿‌﻿‌﻿‌﻿‌﻿‌﻿﻿‌﻿﻿﻿‍﻿‌﻿﻿‌﻿‌﻿‌﻿﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿‌﻿‌﻿﻿‌﻿‍﻿‌﻿﻿﻿﻿﻿‌﻿‌﻿﻿‍﻿﻿﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿﻿﻿‌﻿﻿‍﻿﻿﻿﻿﻿﻿﻿﻿﻿‌﻿‌﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‍﻿﻿﻿﻿‌﻿﻿‌﻿﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿﻿﻿‍﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿﻿‍﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿‌﻿‍﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿‌﻿‍﻿‌﻿﻿﻿‌﻿﻿‌﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿‌﻿﻿‌﻿﻿‍﻿﻿‌﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿‌﻿‌﻿﻿﻿﻿‌﻿‍﻿‌﻿‌﻿﻿﻿‌﻿‌﻿﻿‌﻿‍﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿‌﻿﻿﻿‌﻿‌﻿﻿‌﻿‍﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿‌﻿﻿‌﻿﻿﻿‌﻿﻿‍﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‌﻿﻿‍﻿‌﻿‌﻿﻿‌﻿﻿﻿‌﻿﻿‍﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‌﻿﻿‍﻿‌﻿‌﻿﻿﻿﻿‌﻿‌﻿‌﻿‍﻿﻿﻿‌﻿‌﻿‌﻿﻿‌﻿‌﻿﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿﻿‌﻿﻿‌﻿‌﻿‌﻿﻿﻿‌﻿‌﻿﻿﻿‌﻿‌﻿﻿‍﻿﻿﻿﻿﻿﻿﻿﻿﻿‌﻿‌﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‍﻿﻿‌﻿﻿‌﻿‌﻿﻿﻿﻿‌﻿‌﻿﻿﻿﻿﻿﻿‍﻿﻿﻿‌﻿‌﻿﻿‌﻿﻿﻿‌﻿‌﻿‌﻿‌﻿﻿﻿﻿‍﻿﻿‌﻿﻿‌﻿﻿﻿﻿‌﻿‌﻿﻿﻿‌﻿‌﻿‌﻿‌﻿‍﻿﻿‌﻿﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿﻿﻿﻿﻿﻿﻿﻿﻿‌﻿‌﻿‌﻿﻿﻿‌﻿﻿‌﻿‍﻿‌﻿﻿﻿‌﻿﻿‌﻿‌﻿‌﻿‍﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿‌﻿‍﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿‌﻿‍﻿‌﻿﻿﻿﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿﻿﻿﻿‌﻿‌﻿﻿﻿‍﻿‌﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿‍﻿‌﻿﻿‌﻿﻿﻿﻿‌﻿‌﻿‍﻿‌﻿﻿‌﻿﻿﻿﻿‌﻿‌﻿‍﻿‌﻿﻿﻿‌﻿﻿‌﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿‌﻿﻿‍﻿‌﻿﻿﻿﻿‌﻿‌﻿﻿‌﻿‍﻿‌﻿﻿﻿‌﻿‌﻿‌﻿﻿‌﻿‍﻿‌﻿﻿﻿﻿‌﻿‌﻿‌﻿﻿‍﻿‌﻿‌﻿﻿‌﻿﻿﻿﻿‌﻿‍﻿‌﻿﻿﻿‌﻿‌﻿‌﻿﻿﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿﻿‌﻿‍﻿‌﻿﻿‌﻿﻿﻿﻿‌﻿‌﻿‍﻿‌﻿﻿﻿‌﻿‌﻿﻿‌﻿﻿‍﻿‌﻿﻿﻿﻿﻿‌﻿‌﻿‌﻿‍﻿‌﻿﻿﻿﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿﻿‌﻿﻿﻿﻿‌﻿‌﻿‍﻿‌﻿﻿﻿‌﻿‌﻿﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿‌﻿‌﻿﻿‌﻿‍﻿‌﻿﻿﻿﻿﻿‌﻿‌﻿﻿‍﻿‌﻿﻿‌﻿﻿﻿﻿﻿﻿‍﻿‌﻿﻿﻿‌﻿﻿‌﻿‌﻿‌﻿‍﻿‌﻿﻿﻿‌﻿‌﻿‌﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿‌﻿‌﻿﻿﻿‍﻿‌﻿﻿﻿‌﻿﻿‌﻿﻿﻿‍﻿‌﻿‌﻿﻿‌﻿﻿﻿﻿‌﻿‍﻿‌﻿﻿﻿‌﻿﻿‌﻿‌﻿‌﻿‍﻿‌﻿﻿﻿﻿‌﻿﻿‌﻿‌﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿‌﻿﻿‍﻿‌﻿﻿﻿‌﻿﻿﻿‌﻿‌</h3>
<p>可能有人注意到了，为什么服务器证书只能写 824 天？</p>
<p>这里要感谢 <a href="https://www.v2ex.com/t/639019#reply1">V2ex 的网友</a>。之前证书在 Windows 完全正常，但是在 iOS 设备上就是提示<code>非私人链接</code>，逐询问万能的网友。这里了解了一份<a href="https://support.apple.com/zh-cn/HT210176">苹果官方文件</a>感兴趣的可以点开看看，对证书做了一些要求，故保全，使用 825-1 天。</p>
<h2 id="相关文件">相关文件</h2>
<h3 id="国密-ca-证书">国密 CA 证书</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDsDCCApigAwIBAgIJAMjrH5w5KmnFMA0GCSqGSIb3DQEBCwUAMGgxCzAJBgNV</span><br><span class="line">BAYTAkNOMRAwDgYDVQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdIYWlEaWFuMRMwEQYD</span><br><span class="line">VQQKDApHTUNlcnQub3JnMSAwHgYDVQQDDBdHTUNlcnQgUlNBIFJvb3QgQ0EgLSAw</span><br><span class="line">MTAeFw0xOTEwMjQxMjM3NDRaFw0zOTA3MTExMjM3NDRaMGgxCzAJBgNVBAYTAkNO</span><br><span class="line">MRAwDgYDVQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdIYWlEaWFuMRMwEQYDVQQKDApH</span><br><span class="line">TUNlcnQub3JnMSAwHgYDVQQDDBdHTUNlcnQgUlNBIFJvb3QgQ0EgLSAwMTCCASIw</span><br><span class="line">DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANCpZk/j4CIM2o2IiZHTsQA10LTN</span><br><span class="line">fD/dV//kyn9QXQwpRpcgTLuYassucaDSvkS56+p7jRKMgD9ZnE4QNf3Ay/UEACYG</span><br><span class="line">UH7OubZtigxJpLjS69dHfy3yqt8GSOKsfFu6VZ//QphFGw4NkkCYngOuxhmV7WU0</span><br><span class="line">xNasollGGuzjBmp46/bev8aomkI33OxSXWna3oCn3BSScgkoyWJTNN1+EwCZANO3</span><br><span class="line">FeKUyPMGOhi49QlV4OyUgCfGlFqhAGZAT/PMo8oPwwmyHrlyn+jqin7+qKVF9loc</span><br><span class="line">Nle9YyBi7eZkDbSoAUOg2WFaDDRrPhUnNU+l2TqCP+uCgyxU74Lphj00v00CAwEA</span><br><span class="line">AaNdMFswHQYDVR0OBBYEFJon65yAk8sN6cM90Wp6HOKxnzjpMB8GA1UdIwQYMBaA</span><br><span class="line">FJon65yAk8sN6cM90Wp6HOKxnzjpMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG</span><br><span class="line">MA0GCSqGSIb3DQEBCwUAA4IBAQBcoJlabv5wgUj6tgbb3gUVYHKlQWr2aaPWg1Vs</span><br><span class="line">ru5ExyPcEhyQ2XM5AdnOMjKiTikyPYwk1/K1tJSNN5AmCfdofWr4m074s+Rf/i+h</span><br><span class="line">dBuh2vjZee9L/NV2ZRcxpwp9e561+JBXoHvZ0JHDBGQ0WYsJ+m9fRxCR12oIVWWv</span><br><span class="line">SAjbyetRRO+oTvi3dX2OQUgJhflS4/cxQblYxgL5nMIa+MVamXUNNfwEk3TZh4K/</span><br><span class="line">NgtQY5KraEUU7bCkbbKdX2r+njobTQpbBV8uZ/JwsNghx4gfB+3QrteVfceQ+ip+</span><br><span class="line">CpEU9X3JD9WkxEVFKBa0Q+TllSny07of0cWmRuwZlLUruBJD</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure>
<h3 id="有效期至-2022-4-27-日的证书">有效期至 2022-4-27 日的证书</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIEJjCCAw6gAwIBAgIJAL0OjFdDMG1wMA0GCSqGSIb3DQEBCwUAMGgxCzAJBgNV</span><br><span class="line">BAYTAkNOMRAwDgYDVQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdIYWlEaWFuMRMwEQYD</span><br><span class="line">VQQKDApHTUNlcnQub3JnMSAwHgYDVQQDDBdHTUNlcnQgUlNBIFJvb3QgQ0EgLSAw</span><br><span class="line">MTAeFw0yMDAxMTkwMjM4MTZaFw0yMjA0MjIwMjM4MTZaMGYxCzAJBgNVBAYTAlVT</span><br><span class="line">MRAwDgYDVQQIDAdOZXdZb3JrMRAwDgYDVQQHDAdOZXdZb3JrMQ0wCwYDVQQKDARF</span><br><span class="line">bWJ5MQ0wCwYDVQQLDARFbWJ5MRUwEwYDVQQDDAxtYjNhZG1pbi5jb20wggEiMA0G</span><br><span class="line">CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDL6gFZqwRuFBWNyoKUhJg1x5XedQ6Q</span><br><span class="line">Z9sF6Yaw08o8Ggsa9bz6cz7wdrAGZy6DBrBjpgakXoeuISokXBTKb4qvDA3khXzJ</span><br><span class="line">saqTI48tgSP5eNklvW33Fc2Cib4dh70IyS6coEbMkVcGQ+wvmh9gzU5puvoKeJMj</span><br><span class="line">bt8ENGumuxeyJjss7KwzytJxrUO25cbLb7g4ai93f/08rsumbO4WSs/SD8jA2zs1</span><br><span class="line">iHqYnRfdBEQfWqxquyp7npKTa6ahRDeV8FsE/iXod9OEcauNaQiFOUI1lq7aRniA</span><br><span class="line">9Wuyn329OY7cOiqlVVL9COAm5qx42jOg4EnoblrzDXBk+9TkNuMjpVPdAgMBAAGj</span><br><span class="line">gdQwgdEwDAYDVR0TAQH/BAIwADALBgNVHQ8EBAMCBLAwHQYDVR0lBBYwFAYIKwYB</span><br><span class="line">BQUHAwEGCCsGAQUFBwMCMCwGCWCGSAGG+EIBDQQfFh1HTUNlcnQub3JnIFNpZ25l</span><br><span class="line">ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUcWmpD/64Jwv/b0MXdNG8Sr50NFAwHwYD</span><br><span class="line">VR0jBBgwFoAUmifrnICTyw3pwz3Ranoc4rGfOOkwJwYDVR0RBCAwHoIMbWIzYWRt</span><br><span class="line">aW4uY29tgg4qLm1iM2FkbWluLmNvbTANBgkqhkiG9w0BAQsFAAOCAQEAbvBR5CLd</span><br><span class="line">AhoLh2J1P1Jo5Z/rSXoWTmNZ/652NZFe52FTwsSmQNN2+5F01Dm2QL4t5en8tzrB</span><br><span class="line">klfFpWVvAj4McZBWh2J3zyFTeEbvPacEkljsYvYA7I0saYhcvusyZ5ATATxi0GB9</span><br><span class="line">e9WrtWJ6gt5Beb9E3VhNi/V65pvYxImfUN0z9EKNgz8ZQXNZvgTnUOY63iGEoGhq</span><br><span class="line">YuxAFU9ddOEacrCGxwSZNT6rxX9EPyqQ53lI2iAuE7GTQkO1n4WqoZ07f+1z2JHP</span><br><span class="line">VoLvrXmuELAweXfyxJ8qp3L0AjB+FYmjOUCLWoNkRrWyRioW2WXtei58kpnp+mfB</span><br><span class="line">bOt7M57SS/HV9Q==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDsDCCApigAwIBAgIJAMjrH5w5KmnFMA0GCSqGSIb3DQEBCwUAMGgxCzAJBgNV</span><br><span class="line">BAYTAkNOMRAwDgYDVQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdIYWlEaWFuMRMwEQYD</span><br><span class="line">VQQKDApHTUNlcnQub3JnMSAwHgYDVQQDDBdHTUNlcnQgUlNBIFJvb3QgQ0EgLSAw</span><br><span class="line">MTAeFw0xOTEwMjQxMjM3NDRaFw0zOTA3MTExMjM3NDRaMGgxCzAJBgNVBAYTAkNO</span><br><span class="line">MRAwDgYDVQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdIYWlEaWFuMRMwEQYDVQQKDApH</span><br><span class="line">TUNlcnQub3JnMSAwHgYDVQQDDBdHTUNlcnQgUlNBIFJvb3QgQ0EgLSAwMTCCASIw</span><br><span class="line">DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANCpZk/j4CIM2o2IiZHTsQA10LTN</span><br><span class="line">fD/dV//kyn9QXQwpRpcgTLuYassucaDSvkS56+p7jRKMgD9ZnE4QNf3Ay/UEACYG</span><br><span class="line">UH7OubZtigxJpLjS69dHfy3yqt8GSOKsfFu6VZ//QphFGw4NkkCYngOuxhmV7WU0</span><br><span class="line">xNasollGGuzjBmp46/bev8aomkI33OxSXWna3oCn3BSScgkoyWJTNN1+EwCZANO3</span><br><span class="line">FeKUyPMGOhi49QlV4OyUgCfGlFqhAGZAT/PMo8oPwwmyHrlyn+jqin7+qKVF9loc</span><br><span class="line">Nle9YyBi7eZkDbSoAUOg2WFaDDRrPhUnNU+l2TqCP+uCgyxU74Lphj00v00CAwEA</span><br><span class="line">AaNdMFswHQYDVR0OBBYEFJon65yAk8sN6cM90Wp6HOKxnzjpMB8GA1UdIwQYMBaA</span><br><span class="line">FJon65yAk8sN6cM90Wp6HOKxnzjpMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG</span><br><span class="line">MA0GCSqGSIb3DQEBCwUAA4IBAQBcoJlabv5wgUj6tgbb3gUVYHKlQWr2aaPWg1Vs</span><br><span class="line">ru5ExyPcEhyQ2XM5AdnOMjKiTikyPYwk1/K1tJSNN5AmCfdofWr4m074s+Rf/i+h</span><br><span class="line">dBuh2vjZee9L/NV2ZRcxpwp9e561+JBXoHvZ0JHDBGQ0WYsJ+m9fRxCR12oIVWWv</span><br><span class="line">SAjbyetRRO+oTvi3dX2OQUgJhflS4/cxQblYxgL5nMIa+MVamXUNNfwEk3TZh4K/</span><br><span class="line">NgtQY5KraEUU7bCkbbKdX2r+njobTQpbBV8uZ/JwsNghx4gfB+3QrteVfceQ+ip+</span><br><span class="line">CpEU9X3JD9WkxEVFKBa0Q+TllSny07of0cWmRuwZlLUruBJD</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure>
<h2 id="对应密钥">对应密钥</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEAy+oBWasEbhQVjcqClISYNceV3nUOkGfbBemGsNPKPBoLGvW8</span><br><span class="line">+nM+8HawBmcugwawY6YGpF6HriEqJFwUym+KrwwN5IV8ybGqkyOPLYEj+XjZJb1t</span><br><span class="line">9xXNgom+HYe9CMkunKBGzJFXBkPsL5ofYM1Oabr6CniTI27fBDRrprsXsiY7LOys</span><br><span class="line">M8rSca1DtuXGy2+4OGovd3/9PK7LpmzuFkrP0g/IwNs7NYh6mJ0X3QREH1qsarsq</span><br><span class="line">e56Sk2umoUQ3lfBbBP4l6HfThHGrjWkIhTlCNZau2kZ4gPVrsp99vTmO3DoqpVVS</span><br><span class="line">/QjgJuaseNozoOBJ6G5a8w1wZPvU5DbjI6VT3QIDAQABAoIBAQCQm2ZRvKHrnnqa</span><br><span class="line">jx6DTHTUzrFNjR3C8qO0UaOfCtLERIPTnqlhwxDDXqf+InYtnTTBth/HuPHnXsWP</span><br><span class="line">+20TEn77HEVN5gxUzJX2uqTy1D460KTNysSNEP0osZ4NOxGnhWR01oTe1cMtQkXg</span><br><span class="line">jB/seiw9dseTXWabHikxxisBlnR7dLQ3jn9Wrb4ynSW8IdebUxOl9+jCJpSwZ3zE</span><br><span class="line">TmPiLamOQYiVHBwROI/0ooXi8XgcfHZ5k0o7CaYYGJBMvePTUPA0B7eCM7FJnlpn</span><br><span class="line">pKi4Z7nllhn+1GOEnCcY+BNymrugSPfFF9amOdsZWODlf1s4aX6nmY1FFcoROqKw</span><br><span class="line">UKq3QBvRAoGBAPdMxXJqwFt4PgFL06k9c/A91/UsCWLN9nS6EIvTyjGIPVm/cAe3</span><br><span class="line">a8qm/jTuqJnYQjnUC1sVgF/Gl+fTMLEJR3GH0Ht/P1U142Q8BstNdphC3NrhQQZQ</span><br><span class="line">O1PWoBmY61J4LNY3L/yF25BC2l3HeyyMTs5tdNYSbAMhk2hBU/tnzsJPAoGBANMW</span><br><span class="line">fk5E+EhlF0IaTPHVwHltAyzdi38u9LmnW8mzdNquUahone+2UICLZX+7Iprum7mn</span><br><span class="line">y+zYEppYUx1+vvAwwahavc6qpARCcI5c6X848p3jkTlGV/I9a2/8FQDNhzNc3bdp</span><br><span class="line">oZrHMpe47gs8tKpeBZ9ul1BQhMnqvmWoWqMfspgTAoGAWPhbyNAzKDVYSWsYWTjs</span><br><span class="line">ry/wtBoFvnBPDKusLEIj6jITsGg5S+1ncF8n8a8zJTYyjU+GTlyr9Mkj+Zl3WRn3</span><br><span class="line">hBbSoLuk82kRyAv4fcf+tMTJZE3J8RWIYp9CtjLX5rGpn9/2+ajG113V5gtQezR3</span><br><span class="line">XbjvYdz60x2PRODL8BTmw+0CgYAoFYRknoo7TR8OiWoFHl8Pb9kDgwqDW0pTmuk+</span><br><span class="line">MxrEkAenoD4lkAxXbKEYkVOv8hGWPrvlvN5DevRFjJT7jXao3ppejV7aBDfVgOVC</span><br><span class="line">KHFB9D3Wj3oR4QHu4QKoBV9gLIlZ0/BBMQR1dUOW1K9GDtaogNqxAKlGopIHQeH8</span><br><span class="line">Sf+jCwKBgFAchqkHN46JPnMu2yogPVPC6loIL2TVxHpD4SUIpB8M6fL82F8pyXJD</span><br><span class="line">bLHYF5DtOIBJ/vB3IiDkgw4SBCROTFyYNiC+Y3ZV4Xd6abCy9q+uB70j125zF7l/</span><br><span class="line">uWuf0rneucrmFfMd14+Gjgd+jfYlLOp8D9vwQHJQ8UEVlnA9Sarl</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>Enjoy it~</p>
<p>原文地址：<a href="https://imrbq.cn/exp/emby_hack.html">请点击</a></p>
]]></content>
      <categories>
        <category>Emby</category>
        <category>Nas</category>
      </categories>
      <tags>
        <tag>Emby</tag>
        <tag>Nas</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云函数实现每日签到脚本（支持多账号使用）</title>
    <url>/posts/7508/</url>
    <content><![CDATA[<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/Sitoi/dailycheckin">Sitoi/dailycheckin</a></p>
<p>可基于【腾讯云函数】/【Docker】的每日签到脚本（支持多账号使用）签到列表: ｜爱奇艺｜全民K歌｜腾讯视频｜有道云笔记｜网易云音乐｜一加手机社区官方论坛｜百度贴吧｜Bilibili｜V2EX｜咔叽网单｜什么值得买｜AcFun｜天翼云盘｜WPS｜吾爱破解｜芒果TV｜联通营业厅｜Fa米家｜喜马拉雅极速版｜小米运动｜百度搜索资源平台｜每日天气预报｜每日一句｜哔咔漫画｜</p>
<span id="more"></span>
<h2 id="使用方法">使用方法</h2>
<h3 id="创建云函数">创建云函数</h3>
<ol type="1">
<li><p>登录<a href="https://console.cloud.tencent.com/scf/list">腾讯云函数</a>，选择<code>函数服务</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYm1aT.jpg" alt="函数服务" /><figcaption aria-hidden="true">函数服务</figcaption>
</figure></li>
<li><p>选择区域<code>中国香港</code>，点击<code>新建</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYmMq0.jpg" alt="区域" /><figcaption aria-hidden="true">区域</figcaption>
</figure></li>
<li><p>选择<code>自定义创建</code>，函数类型选择<code>事件函数</code>，函数名称自定义编辑，地域选择<code>中国香港</code>，避免机场网站被墙，运行环境选择<code>Python3.6</code></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYmJG4.jpg" alt="自定义创建" /><figcaption aria-hidden="true">自定义创建</figcaption>
</figure></li>
<li><p>编辑器内粘贴代码</p></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> dailycheckin.main <span class="keyword">import</span> checkin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line">    checkin()</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYILm8.jpg" alt="粘贴代码" /><figcaption aria-hidden="true">粘贴代码</figcaption>
</figure>
<ol start="5" type="1">
<li><p>高级配置中，执行超时时间输入<code>900</code>秒</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYmKrq.jpg" alt="执行超时时间" /><figcaption aria-hidden="true">执行超时时间</figcaption>
</figure></li>
<li><p>触发器配置中，创建触发器选择<code>自定义创建</code>，触发周期选择<code>自定义触发周期</code>，Cron表达式输入<code>0 0 10 * * * *</code>，表示在每天上午10点触发</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYm0Z6.jpg" alt="创建触发器" /><figcaption aria-hidden="true">创建触发器</figcaption>
</figure></li>
<li><p>最后选择完成</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYmas1.jpg" alt="选择完成" /><figcaption aria-hidden="true">选择完成</figcaption>
</figure></li>
</ol>
<h3 id="安装依赖包">安装依赖包</h3>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYTl2n.jpg" alt="安装依赖包" /><figcaption aria-hidden="true">安装依赖包</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd src</span><br><span class="line">pip3 install dailycheckin --upgrade -t .</span><br></pre></td></tr></table></figure>
<h3 id="添加配置文件">添加配置文件</h3>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYTvzn.png" alt="配置文件" /><figcaption aria-hidden="true">配置文件</figcaption>
</figure>
<h3 id="部署测试">部署测试</h3>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYTjRs.png" alt="部署测试" /><figcaption aria-hidden="true">部署测试</figcaption>
</figure>
<h2 id="配置说明">配置说明</h2>
<h3 id="参数说明">参数说明</h3>
<blockquote>
<p>⚠️️ <strong><em>斜体加粗大写英文字母</em></strong> 表示 GitHub Actions Secrets 环境变量名称，内容直接复制 <strong><em>斜体加粗大写英文字母 key</em></strong> 对应的 value 是 List 格式的直接复制全部 List 内容</p>
</blockquote>
<h4 id="推送配置">推送配置</h4>
<table>
<colgroup>
<col style="width: 24%" />
<col style="width: 18%" />
<col style="width: 3%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>归属</th>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong><em>DINGTALK_SECRET</em></strong></td>
<td>钉钉推送</td>
<td>推送</td>
<td>钉钉推送<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a> 密钥，机器人安全设置页面，加签一栏下面显示的 <code>SEC</code> 开头的字符串, 注:填写了 <code>DD_BOT_TOKEN</code> 和 <code>DD_BOT_SECRET</code>，钉钉机器人安全设置只需勾选<code>加签</code>即可，其他选项不要勾选</td>
</tr>
<tr class="even">
<td><strong><em>DINGTALK_ACCESS_TOKEN</em></strong></td>
<td>钉钉推送</td>
<td>推送</td>
<td>钉钉推送<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a> ,只需 <code>https://oapi.dingtalk.com/robot/send?access_token=XXX</code> 等于符号后面的 <code>XXX</code></td>
</tr>
<tr class="odd">
<td><strong><em>SCKEY</em></strong></td>
<td>server 酱推送</td>
<td>推送</td>
<td>server 酱推送<a href="https://sc.ftqq.com/3.version">官方文档</a> ,填写 <code>SCKEY</code> 代码即可</td>
</tr>
<tr class="even">
<td><strong><em>SENDKEY</em></strong></td>
<td>server 酱 TURBO 推送</td>
<td>推送</td>
<td>server 酱 TURBO 推送<a href="https://sct.ftqq.com/sendkey">官方文档</a> ,填写 <code>SENDKEY</code> 代码即可</td>
</tr>
<tr class="odd">
<td><strong><em>BARK_URL</em></strong></td>
<td>BARK 推送</td>
<td>推送</td>
<td>BARK 推送<a href="https://github.com/Sitoi/dailycheckin/issues/29">使用</a> ,填写 <code>BARK_URL</code> 即可，例如: <code>https://api.day.app/DxHcxxxxxRxxxxxxcm/</code></td>
</tr>
<tr class="even">
<td><strong><em>QMSG_KEY</em></strong></td>
<td>qmsg 酱推送</td>
<td>推送</td>
<td>qmsg 酱推送<a href="https://qmsg.zendee.cn/index.html">官方文档</a> ,填写 <code>KEY</code> 代码即可</td>
</tr>
<tr class="odd">
<td><strong><em>QMSG_TYPE</em></strong></td>
<td>qmsg 酱推送</td>
<td>推送</td>
<td>qmsg 酱推送<a href="https://qmsg.zendee.cn/index.html">官方文档</a> ,如果需要推送到群填写 <code>group</code>,其他的都推送到 QQ</td>
</tr>
<tr class="even">
<td><strong><em>TG_BOT_TOKEN</em></strong></td>
<td>telegram 推送</td>
<td>推送</td>
<td>telegram 推送 <code>TG_BOT_TOKEN</code></td>
</tr>
<tr class="odd">
<td><strong><em>TG_USER_ID</em></strong></td>
<td>telegram 推送</td>
<td>推送</td>
<td>telegram 推送 <code>TG_USER_ID</code></td>
</tr>
<tr class="even">
<td><strong><em>TG_API_HOST</em></strong></td>
<td>telegram 推送</td>
<td>推送</td>
<td>Telegram api 自建的反向代理地址 例子：反向代理地址 http://aaa.bbb.ccc 则填写 aaa.bbb.ccc <a href="https://shimo.im/docs/JD38CJDQtYy3yTd8/read">简略搭建教程</a></td>
</tr>
<tr class="odd">
<td><strong><em>TG_PROXY</em></strong></td>
<td>telegram 推送</td>
<td>推送</td>
<td>Telegram 代理的信息，无密码例子: http://127.0.0.1:1080 有密码例子: http://username:password@127.0.0.1:1080</td>
</tr>
<tr class="even">
<td><strong><em>COOLPUSHSKEY</em></strong></td>
<td>Cool Push 推送</td>
<td>推送</td>
<td><a href="https://cp.xuthus.cc/">Cool Push</a> 推送的 <code>SKEY</code></td>
</tr>
<tr class="odd">
<td><strong><em>COOLPUSHQQ</em></strong></td>
<td>Cool Push 推送</td>
<td>推送</td>
<td><a href="https://cp.xuthus.cc/">Cool Push</a> 是否开启 QQ 推送，默认开启</td>
</tr>
<tr class="even">
<td><strong><em>COOLPUSHWX</em></strong></td>
<td>Cool Push 推送</td>
<td>推送</td>
<td><a href="https://cp.xuthus.cc/">Cool Push</a> 是否开启 微信 推送，默认关闭</td>
</tr>
<tr class="odd">
<td><strong><em>COOLPUSHEMAIL</em></strong></td>
<td>Cool Push 推送</td>
<td>推送</td>
<td><a href="https://cp.xuthus.cc/">Cool Push</a> 是否开启 邮件 推送，默认关闭</td>
</tr>
<tr class="even">
<td><strong><em>QYWX_KEY</em></strong></td>
<td>企业微信群机器人推送</td>
<td>推送</td>
<td>密钥，企业微信推送 <code>webhook</code> 后面的 <code>key</code> 详见<a href="https://work.weixin.qq.com/api/doc/90000/90136/91770">官方说明文档</a></td>
</tr>
<tr class="odd">
<td><strong><em>QYWX_CORPID</em></strong></td>
<td>企业微信应用消息推送</td>
<td>推送</td>
<td>corpid <a href="https://note.youdao.com/ynoteshare1/index.html?id=351e08a72378206f9dd64d2281e9b83b&amp;type=note">参考文档1</a> <a href="https://note.youdao.com/ynoteshare1/index.html?id=1a0c8aff284ad28cbd011b29b3ad0191&amp;type=note">参考文档2</a></td>
</tr>
<tr class="even">
<td><strong><em>QYWX_AGENTID</em></strong></td>
<td>企业微信应用消息推送</td>
<td>推送</td>
<td>agentid <a href="https://note.youdao.com/ynoteshare1/index.html?id=351e08a72378206f9dd64d2281e9b83b&amp;type=note">参考文档1</a> <a href="https://note.youdao.com/ynoteshare1/index.html?id=1a0c8aff284ad28cbd011b29b3ad0191&amp;type=note">参考文档2</a></td>
</tr>
<tr class="odd">
<td><strong><em>QYWX_CORPSECRET</em></strong></td>
<td>企业微信应用消息推送</td>
<td>推送</td>
<td>corpsecret <a href="https://note.youdao.com/ynoteshare1/index.html?id=351e08a72378206f9dd64d2281e9b83b&amp;type=note">参考文档1</a> <a href="https://note.youdao.com/ynoteshare1/index.html?id=1a0c8aff284ad28cbd011b29b3ad0191&amp;type=note">参考文档2</a></td>
</tr>
<tr class="even">
<td><strong><em>QYWX_TOUSER</em></strong></td>
<td>企业微信应用消息推送</td>
<td>推送</td>
<td>touser <a href="https://note.youdao.com/ynoteshare1/index.html?id=351e08a72378206f9dd64d2281e9b83b&amp;type=note">参考文档1</a> <a href="https://note.youdao.com/ynoteshare1/index.html?id=1a0c8aff284ad28cbd011b29b3ad0191&amp;type=note">参考文档2</a></td>
</tr>
<tr class="odd">
<td><strong><em>PUSHPLUS_TOKEN</em></strong></td>
<td>pushplus 推送</td>
<td>推送</td>
<td>用户令牌，可直接加到请求地址后，如：http://www.pushplus.plus/send/{token} <a href="https://www.pushplus.plus/doc/">官方文档</a></td>
</tr>
<tr class="even">
<td><strong><em>PUSHPLUS_TOPIC</em></strong></td>
<td>pushplus 推送</td>
<td>推送</td>
<td>群组编码，不填仅发送给自己 <a href="https://www.pushplus.plus/doc/">官方文档</a></td>
</tr>
</tbody>
</table>
<h4 id="web-签到配置">Web 签到配置</h4>
<table>
<colgroup>
<col style="width: 28%" />
<col style="width: 31%" />
<col style="width: 2%" />
<col style="width: 37%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>归属</th>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong><em>IQIYI_COOKIE_LIST</em></strong>.iqiyi_cookie</td>
<td><a href="https://www.iqiyi.com/">爱奇艺</a></td>
<td>Web</td>
<td>爱奇艺 帐号的 cookie 信息</td>
</tr>
<tr class="even">
<td><strong><em>KGQQ_COOKIE_LIST</em></strong>.kgqq_cookie</td>
<td><a href="https://kg.qq.com/index-pc.html">全民K歌</a></td>
<td>Web</td>
<td>全民K歌 帐号的 cookie 信息</td>
</tr>
<tr class="odd">
<td><strong><em>VQQ_COOKIE_LIST</em></strong>.auth_refresh</td>
<td><a href="https://v.qq.com/">腾讯视频</a></td>
<td>Web</td>
<td>腾讯视频 搜索 带有 <code>auth_refresh</code> 的 url，填写其完整的 URL</td>
</tr>
<tr class="even">
<td><strong><em>VQQ_COOKIE_LIST</em></strong>.vqq_cookie</td>
<td><a href="https://v.qq.com/">腾讯视频</a></td>
<td>Web</td>
<td>腾讯视频 搜索 带有 <code>auth_refresh</code> 的 url，填写其对应的 cookie</td>
</tr>
<tr class="odd">
<td><strong><em>YOUDAO_COOKIE_LIST</em></strong>.youdao_cookie</td>
<td><a href="https://note.youdao.com/web/">有道云笔记</a></td>
<td>Web</td>
<td>有道云笔记 帐号的 cookie 信息</td>
</tr>
<tr class="even">
<td><strong><em>MUSIC163_ACCOUNT_LIST</em></strong>.music163_phone</td>
<td><a href="https://music.163.com/">网易云音乐</a></td>
<td>账号</td>
<td>网易云音乐 帐号的手机号</td>
</tr>
<tr class="odd">
<td><strong><em>MUSIC163_ACCOUNT_LIST</em></strong>.music163_password</td>
<td><a href="https://music.163.com/">网易云音乐</a></td>
<td>账号</td>
<td>网易云音乐 帐号的密码</td>
</tr>
<tr class="even">
<td><strong><em>ONEPLUSBBS_COOKIE_LIST</em></strong>.oneplusbbs_cookie</td>
<td><a href="https://www.oneplusbbs.com/">一加手机社区官方论坛</a></td>
<td>Web</td>
<td>一加手机社区官方论坛 账户的 cookie</td>
</tr>
<tr class="odd">
<td><strong><em>TIEBA_COOKIE_LIST</em></strong>.tieba_cookie</td>
<td><a href="https://tieba.baidu.com/index.html">百度贴吧</a></td>
<td>Web</td>
<td>百度贴吧 cookie</td>
</tr>
<tr class="even">
<td><strong><em>BILIBILI_COOKIE_LIST</em></strong>.bilibili_cookie</td>
<td><a href="https://www.bilibili.com/">Bilibili</a></td>
<td>Web</td>
<td>Bilibili cookie</td>
</tr>
<tr class="odd">
<td><strong><em>BILIBILI_COOKIE_LIST</em></strong>.coin_num</td>
<td><a href="https://www.bilibili.com/">Bilibili</a></td>
<td>Web</td>
<td>Bilibili 每日投币数量</td>
</tr>
<tr class="even">
<td><strong><em>BILIBILI_COOKIE_LIST</em></strong>.coin_type</td>
<td><a href="https://www.bilibili.com/">Bilibili</a></td>
<td>Web</td>
<td>Bilibili 投币方式 默认为 0 ；1: 为关注用户列表视频投币 0: 为随机投币。如果关注用户发布的视频不足配置的投币数，则剩余部分使用随机投币</td>
</tr>
<tr class="odd">
<td><strong><em>BILIBILI_COOKIE_LIST</em></strong>.silver2coin</td>
<td><a href="https://www.bilibili.com/">Bilibili</a></td>
<td>Web</td>
<td>Bilibili 是否开启银瓜子换硬币，默认为 True 开启</td>
</tr>
<tr class="even">
<td><strong><em>V2EX_COOKIE_LIST</em></strong>.v2ex_cookie</td>
<td><a href="https://www.v2ex.com/">V2EX</a></td>
<td>Web</td>
<td>V2EX 每日签到</td>
</tr>
<tr class="odd">
<td><strong><em>V2EX_COOKIE_LIST</em></strong>.v2ex_proxy</td>
<td><a href="https://www.v2ex.com/">V2EX</a></td>
<td>Web</td>
<td>V2EX 代理的信息，无密码例子: http://127.0.0.1:1080 有密码例子: http://username:password@127.0.0.1:1080</td>
</tr>
<tr class="even">
<td><strong><em>WWW2NZZ_COOKIE_LIST</em></strong>.www2nzz_cookie</td>
<td><a href="https://www.2nzz.com/">咔叽网单</a></td>
<td>Web</td>
<td>咔叽网单 每日签到</td>
</tr>
<tr class="odd">
<td><strong><em>SMZDM_COOKIE_LIST</em></strong>.smzdm_cookie</td>
<td><a href="https://www.smzdm.com/">什么值得买</a></td>
<td>Web</td>
<td>什么值得买 每日签到</td>
</tr>
<tr class="even">
<td><strong><em>CLOUD189_ACCOUNT_LIST</em></strong>.cloud189_phone</td>
<td><a href="https://cloud.189.cn/">天翼云盘</a></td>
<td>Web</td>
<td>天翼云盘 手机号</td>
</tr>
<tr class="odd">
<td><strong><em>CLOUD189_ACCOUNT_LIST</em></strong>.cloud189_password</td>
<td><a href="https://cloud.189.cn/">天翼云盘</a></td>
<td>Web</td>
<td>天翼云盘 手机号对应的密码</td>
</tr>
<tr class="even">
<td><strong><em>POJIE_COOKIE_LIST</em></strong>.pojie_cookie</td>
<td><a href="https://www.52pojie.cn/index.php">吾爱破解</a></td>
<td>Web</td>
<td>吾爱破解 cookie</td>
</tr>
<tr class="odd">
<td><strong><em>MEIZU_COOKIE_LIST</em></strong>.meizu_cookie</td>
<td><a href="https://bbs.meizu.cn/">MEIZU 社区</a></td>
<td>Web</td>
<td>MEIZU 社区 cookie</td>
</tr>
<tr class="even">
<td><strong><em>MEIZU_COOKIE_LIST</em></strong>.draw_count</td>
<td><a href="https://bbs.meizu.cn/">MEIZU 社区</a></td>
<td>Web</td>
<td>MEIZU 社区 抽奖次数</td>
</tr>
<tr class="odd">
<td><strong><em>ZHIYOO_COOKIE_LIST</em></strong>.zhiyoo_cookie</td>
<td><a href="http://zhizhiyoo.net/">智友邦</a></td>
<td>Web</td>
<td>智友邦 WEB Cookie</td>
</tr>
<tr class="even">
<td><strong><em>CSDN_COOKIE_LIST</em></strong>.csdn_cookie</td>
<td><a href="https://www.csdn.net/">CSDN</a></td>
<td>Web</td>
<td>CSDN Cookie</td>
</tr>
</tbody>
</table>
<h4 id="公众号签到配置">公众号签到配置</h4>
<table>
<colgroup>
<col style="width: 29%" />
<col style="width: 9%" />
<col style="width: 5%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>归属</th>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong><em>WOMAIL_URL_LIST</em></strong>.womail_url</td>
<td>联通沃邮箱</td>
<td>公众号</td>
<td>联通沃邮箱 公众号 <code>https://nyan.mail.wo.cn/cn/sign/index/index?mobile</code> 开头的 URL</td>
</tr>
</tbody>
</table>
<h4 id="app-签到配置">APP 签到配置</h4>
<table style="width:100%;">
<colgroup>
<col style="width: 31%" />
<col style="width: 25%" />
<col style="width: 2%" />
<col style="width: 40%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>归属</th>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong><em>FMAPP_ACCOUNT_LIST</em></strong>.fmapp_token</td>
<td>Fa米家</td>
<td>APP</td>
<td>Fa米家 APP headers 中的 token</td>
</tr>
<tr class="even">
<td><strong><em>FMAPP_ACCOUNT_LIST</em></strong>.fmapp_cookie</td>
<td>Fa米家</td>
<td>APP</td>
<td>Fa米家 APP headers 中的 cookie</td>
</tr>
<tr class="odd">
<td><strong><em>FMAPP_ACCOUNT_LIST</em></strong>.fmapp_blackbox</td>
<td>Fa米家</td>
<td>APP</td>
<td>Fa米家 APP headers 中的 blackBox</td>
</tr>
<tr class="even">
<td><strong><em>FMAPP_ACCOUNT_LIST</em></strong>.fmapp_device_id</td>
<td>Fa米家</td>
<td>APP</td>
<td>Fa米家 APP headers 中的 deviceId</td>
</tr>
<tr class="odd">
<td><strong><em>FMAPP_ACCOUNT_LIST</em></strong>.fmapp_fmversion</td>
<td>Fa米家</td>
<td>APP</td>
<td>Fa米家 APP headers 中的 fmVersion</td>
</tr>
<tr class="even">
<td><strong><em>FMAPP_ACCOUNT_LIST</em></strong>.fmapp_os</td>
<td>Fa米家</td>
<td>APP</td>
<td>Fa米家 APP headers 中的 os</td>
</tr>
<tr class="odd">
<td><strong><em>FMAPP_ACCOUNT_LIST</em></strong>.fmapp_useragent</td>
<td>Fa米家</td>
<td>APP</td>
<td>Fa米家 APP headers 中的 User-Agent</td>
</tr>
<tr class="even">
<td><strong><em>ACFUN_ACCOUNT_LIST</em></strong>.acfun_phone</td>
<td><a href="https://www.acfun.cn/">AcFun</a></td>
<td>APP</td>
<td>AcFun 手机账号</td>
</tr>
<tr class="odd">
<td><strong><em>ACFUN_ACCOUNT_LIST</em></strong>.acfun_password</td>
<td><a href="https://www.acfun.cn/">AcFun</a></td>
<td>APP</td>
<td>AcFun 账号密码</td>
</tr>
<tr class="even">
<td><strong><em>MGTV_PARAMS_LIST</em></strong>.mgtv_params</td>
<td>芒果 TV</td>
<td>APP</td>
<td>芒果 TV 请求参数</td>
</tr>
<tr class="odd">
<td><strong><em>PICACOMIC_ACCOUNT_LIST</em></strong>.picacomic_email</td>
<td><a href="https://www.picacomic.com/">哔咔漫画</a></td>
<td>APP</td>
<td>哔咔漫画 账号</td>
</tr>
<tr class="even">
<td><strong><em>PICACOMIC_ACCOUNT_LIST</em></strong>.picacomic_password</td>
<td><a href="https://www.picacomic.com/">哔咔漫画</a></td>
<td>APP</td>
<td>哔咔漫画 密码</td>
</tr>
<tr class="odd">
<td><strong><em>WEIBO_COOKIE_LIST</em></strong>.weibo_show_url</td>
<td>微博</td>
<td>APP</td>
<td>抓取开头为 <code>https://api.weibo.cn/2/users/show?</code> 的整个 url 填入即可</td>
</tr>
<tr class="even">
<td><strong><em>DUOKAN_COOKIE_LIST</em></strong>.duokan_cookie</td>
<td>多看阅读</td>
<td>APP</td>
<td>多看阅读 cookie， 抓取开头为 <code>https://www.duokan.com</code> 下的 cookie 即可</td>
</tr>
<tr class="odd">
<td><strong><em>WZYD_DATA_LIST</em></strong>.wzyd_data</td>
<td>王者营地</td>
<td>APP</td>
<td>王者营地 请求体中的 data， 抓包 APP 中域名为 <code>https://ssl.kohsocial.qq.com</code> 请求内容的全部参数</td>
</tr>
</tbody>
</table>
<h4 id="其他任务配置">其他任务配置</h4>
<table>
<thead>
<tr class="header">
<th>Name</th>
<th>归属</th>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong><em>MIMOTION_ACCOUNT_LIST</em></strong>.mimotion_phone</td>
<td>小米运动</td>
<td>其他</td>
<td>小米运动刷步数的手机账号</td>
</tr>
<tr class="even">
<td><strong><em>MIMOTION_ACCOUNT_LIST</em></strong>.mimotion_password</td>
<td>小米运动</td>
<td>其他</td>
<td>小米运动刷步数的手机账号密码</td>
</tr>
<tr class="odd">
<td><strong><em>MIMOTION_ACCOUNT_LIST</em></strong>.mimotion_min_step</td>
<td>小米运动</td>
<td>其他</td>
<td>小米运动刷步数的最小步数</td>
</tr>
<tr class="even">
<td><strong><em>MIMOTION_ACCOUNT_LIST</em></strong>.mimotion_max_step</td>
<td>小米运动</td>
<td>其他</td>
<td>小米运动刷步数的最大步数</td>
</tr>
<tr class="odd">
<td><strong><em>BAIDU_URL_SUBMIT_LIST</em></strong>.data_url</td>
<td><a href="https://ziyuan.baidu.com/site/index#/">百度搜索资源平台</a></td>
<td>其他</td>
<td>提交网站的 URL 链接</td>
</tr>
<tr class="even">
<td><strong><em>BAIDU_URL_SUBMIT_LIST</em></strong>.submit_url</td>
<td><a href="https://ziyuan.baidu.com/site/index#/">百度搜索资源平台</a></td>
<td>其他</td>
<td>百度搜索资源平台 提交百度网站的目标 URL</td>
</tr>
<tr class="odd">
<td><strong><em>BAIDU_URL_SUBMIT_LIST</em></strong>.times</td>
<td><a href="https://ziyuan.baidu.com/site/index#/">百度搜索资源平台</a></td>
<td>其他</td>
<td>每日对同一个网站提交次数</td>
</tr>
<tr class="even">
<td><strong><em>CITY_NAME_LIST</em></strong></td>
<td>每日天气</td>
<td>其他</td>
<td>填写城市名称，点击查看<a href="https://cdn.jsdelivr.net/gh/Sitoi/dailycheckin/weather/city.json">城市名称列表</a></td>
</tr>
<tr class="odd">
<td><strong><em>MOTTO</em></strong></td>
<td>每日一句</td>
<td>其他</td>
<td>是否开启默认为 false</td>
</tr>
</tbody>
</table>
<h3 id="参数获取方法">参数获取方法</h3>
<h4 id="网页-cookie-获取">网页 Cookie 获取</h4>
<p>获取 Cookie 教程（以爱奇艺为例）</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYHYh4.png" alt="获取 cookie 教程" /><figcaption aria-hidden="true">获取 cookie 教程</figcaption>
</figure>
<ol type="1">
<li>进入<a href="https://www.iqiyi.com/">爱奇艺官网</a></li>
<li>按 <code>F12</code> 打开开发者工具，刷新页面</li>
<li>点击 <code>Network</code> 标签</li>
<li>选择 <code>Doc</code> 标签</li>
<li>选中 <code>www.iqiyi.com</code></li>
<li>下滑找到 <code>cookie</code> 全选复制即可</li>
</ol>
<h4 id="app-抓包">APP 抓包</h4>
<h5 id="芒果-tv-请求参数">芒果 TV 请求参数</h5>
<p>抓包 APP 中获取 url 关键词 <code>credits.bz.mgtv.com/user/creditsTake</code>，提取 <code>?</code> 后所有参数</p>
<p><strong>示例</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;mgtv_params&quot;</span>: <span class="string">&quot;uuid=xxx&amp;uid=xxx&amp;ticket=xxx&amp;token=xxx&amp;device=iPhone&amp;did=xxx&amp;deviceId=xxx&amp;appVersion=6.8.2&amp;osType=ios&amp;platform=iphone&amp;abroad=0&amp;aid=xxx&amp;nonce=xxx&amp;timestamp=1614595550&amp;appid=xxx&amp;type=1&amp;sign=xxx&amp;callback=__jp18&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h5 id="王者营地-data-参数获取">王者营地 data 参数获取</h5>
<p>抓包 APP 中域名为 <code>https://ssl.kohsocial.qq.com</code> 请求内容的全部参数</p>
<h5 id="fa米家-cookie-等参数获取">Fa米家 Cookie 等参数获取</h5>
<p>抓包 APP 的请求中的 <code>headers</code> 信息中提取 <code>token</code>、<code>deviceId</code>、<code>cookie</code> 即可</p>
<h5 id="联通营业厅参数获取">联通营业厅参数获取</h5>
<ol type="1">
<li>退出手机营业厅登录，然后开启抓包软件，登录手机营业厅</li>
</ol>
<p>查找网址为 <code>https://m.client.10010.com/mobileService/login.htm</code> 的记录，找到请求内容，将 <code>simCount</code> 开始到最后的内容按要求填入 <code>config/config.json</code> 文件。</p>
<p><strong>样例</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;LIANTONG_ACCOUNT_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;simCount=1&amp;version=iphone_c@8.0100&amp;mobile=xxxxxx&amp;netWay=wifi&amp;isRemberPwd=false&amp;appId=xxxxxx&amp;deviceId=xxxxxx&amp;pip=192.168.1.1&amp;password=xxxxxx&amp;deviceOS=14.3&amp;deviceBrand=iphone&amp;deviceModel=iPhone&amp;remark4=&amp;keyVersion=2&amp;deviceCode=xxxxxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="其他参数">其他参数</h4>
<h5 id="百度站点提交参数获取">百度站点提交参数获取</h5>
<p><a href="https://ziyuan.baidu.com/site/index#/">百度搜索资源平台</a></p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/VivianWestwood/image01/img/fYHsAO.png" alt="获取百度云提交链接教程" /><figcaption aria-hidden="true">获取百度云提交链接教程</figcaption>
</figure>
<ul>
<li><strong><em>BAIDU_URL_SUBMIT_LIST</em></strong>.data_url: 提交网站的 URL 链接</li>
<li><strong><em>BAIDU_URL_SUBMIT_LIST</em></strong>.submit_url: 提交百度网站的目标 URL，参考格式：<code>http://data.zz.baidu.com/urls?site=https://sitoi.cn&amp;token=xxxxx</code></li>
<li><strong><em>BAIDU_URL_SUBMIT_LIST</em></strong>.times: 单次任务执行对同一个网站提交次数</li>
</ul>
<h5 id="每日一句-是否开启">每日一句 是否开启</h5>
<p>默认为 false。false: 表示关闭；true: 表示开启</p>
<h2 id="示例">示例</h2>
<blockquote>
<p>⚠️ 请务必到 <a href="http://www.json.cn/">http://www.json.cn</a> 网站检查 <code>config.json</code> 文件格式是否正确！</p>
</blockquote>
<p>配置文件：<code>config/config.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;DINGTALK_SECRET&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;DINGTALK_ACCESS_TOKEN&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SCKEY&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SENDKEY&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;BARK_URL&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;QMSG_KEY&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;QMSG_TYPE&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;TG_BOT_TOKEN&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;TG_USER_ID&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;TG_API_HOST&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;TG_PROXY&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;COOLPUSHSKEY&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;COOLPUSHQQ&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;COOLPUSHWX&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;COOLPUSHEMAIL&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;QYWX_KEY&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;QYWX_CORPID&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;QYWX_AGENTID&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;QYWX_CORPSECRET&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;QYWX_TOUSER&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;PUSHPLUS_TOKEN&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;PUSHPLUS_TOPIC&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;CITY_NAME_LIST&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;上海&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;MOTTO&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;IQIYI_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;iqiyi_cookie&quot;</span>: <span class="string">&quot;__dfp=xxxxxx; QP0013=xxxxxx; QP0022=xxxxxx; QYABEX=xxxxxx; P00001=xxxxxx; P00002=xxxxxx; P00003=xxxxxx; P00007=xxxxxx; QC163=xxxxxx; QC175=xxxxxx; QC179=xxxxxx; QC170=xxxxxx; P00010=xxxxxx; P00PRU=xxxxxx; P01010=xxxxxx; QC173=xxxxxx; QC180=xxxxxx; P00004=xxxxxx; QP0030=xxxxxx; QC006=xxxxxx; QC007=xxxxxx; QC008=xxxxxx; QC010=xxxxxx; nu=xxxxxx; __uuid=xxxxxx; QC005=xxxxxx;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;iqiyi_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;VQQ_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;auth_refresh&quot;</span>: <span class="string">&quot;https://access.video.qq.com/user/auth_refresh?vappid=xxxxxx&amp;vsecret=xxxxxx&amp;type=qq&amp;g_tk=&amp;g_vstk=xxxxxx&amp;g_actk=xxxxxx&amp;callback=xxxxxx&amp;_=xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;vqq_cookie&quot;</span>: <span class="string">&quot;pgv_pvid=xxxxxx; pac_uid=xxxxxx; RK=xxxxxx; ptcz=xxxxxx; tvfe_boss_uuid=xxxxxx; video_guid=xxxxxx; video_platform=xxxxxx; pgv_info=xxxxxx; main_login=xxxxxx; vqq_access_token=xxxxxx; vqq_appid=xxxxxx; vqq_openid=xxxxxx; vqq_vuserid=xxxxxx; vqq_refresh_token=xxxxxx; login_time_init=xxxxxx; uid=xxxxxx; vqq_vusession=xxxxxx; vqq_next_refresh_time=xxxxxx; vqq_login_time_init=xxxxxx; login_time_last=xxxxxx;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;auth_refresh&quot;</span>: <span class="string">&quot;多账号 refresh url，请参考上面，以实际获取为准&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;vqq_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;YOUDAO_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;youdao_cookie&quot;</span>: <span class="string">&quot;JSESSIONID=xxxxxx; __yadk_uid=xxxxxx; OUTFOX_SEARCH_USER_ID_NCOO=xxxxxx; YNOTE_SESS=xxxxxx; YNOTE_PERS=xxxxxx; YNOTE_LOGIN=xxxxxx; YNOTE_CSTK=xxxxxx; _ga=xxxxxx; _gid=xxxxxx; _gat=xxxxxx; PUBLIC_SHARE_18a9dde3de846b6a69e24431764270c4=xxxxxx;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;youdao_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;KGQQ_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;kgqq_cookie&quot;</span>: <span class="string">&quot;muid=xxxxxx; uid=xxxxxx; userlevel=xxxxxx; openid=xxxxxx; openkey=xxxxxx; opentype=xxxxxx; qrsig=xxxxxx; pgv_pvid=xxxxxx;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;kgqq_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;MUSIC163_ACCOUNT_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;music163_phone&quot;</span>: <span class="string">&quot;18888xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;music163_password&quot;</span>: <span class="string">&quot;Sitoi&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;music163_phone&quot;</span>: <span class="string">&quot;多账号 手机号&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;music163_password&quot;</span>: <span class="string">&quot;多账号 密码&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;ONEPLUSBBS_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;oneplusbbs_cookie&quot;</span>: <span class="string">&quot;acw_tc=xxxxxx; qKc3_0e8d_saltkey=xxxxxx; qKc3_0e8d_lastvisit=xxxxxx; bbs_avatar=xxxxxx; qKc3_0e8d_sendmail=xxxxxx; opcid=xxxxxx; opcct=xxxxxx; oppt=xxxxxx; opsid=xxxxxx; opsct=xxxxxx; opbct=xxxxxx; UM_distinctid=xxxxxx; CNZZDATA1277373783=xxxxxx; www_clear=xxxxxx; ONEPLUSID=xxxxxx; qKc3_0e8d_sid=xxxxxx; bbs_uid=xxxxxx; bbs_uname=xxxxxx; bbs_grouptitle=xxxxxx; opuserid=xxxxxx; bbs_sign=xxxxxx; bbs_formhash=xxxxxx; qKc3_0e8d_ulastactivity=xxxxxx; opsertime=xxxxxx; qKc3_0e8d_lastact=xxxxxx; qKc3_0e8d_checkpm=xxxxxx; qKc3_0e8d_noticeTitle=xxxxxx; optime_browser=xxxxxx; opnt=xxxxxx; opstep=xxxxxx; opstep_event=xxxxxx; fp=xxxxxx;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;oneplusbbs_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;BAIDU_URL_SUBMIT_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;data_url&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/Sitoi/Sitoi.github.io/baidu_urls.txt&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;submit_url&quot;</span>: <span class="string">&quot;http://data.zz.baidu.com/urls?site=https://sitoi.cn&amp;token=xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;times&quot;</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;data_url&quot;</span>: <span class="string">&quot;多账号 data_url 链接地址，以实际获取为准&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;submit_url&quot;</span>: <span class="string">&quot;多账号 submit_url 链接地址，以实际获取为准&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;times&quot;</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;FMAPP_ACCOUNT_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;fmapp_token&quot;</span>: <span class="string">&quot;xxxxxx.xxxxxx-xxxxxx-xxxxxx.xxxxxx-xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_cookie&quot;</span>: <span class="string">&quot;sensorsdata2015jssdkcross=xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_blackbox&quot;</span>: <span class="string">&quot;eyJlcnJxxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_device_id&quot;</span>: <span class="string">&quot;xxxxxx-xxxx-xxxx-xxxx-xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_fmversion&quot;</span>: <span class="string">&quot;xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_os&quot;</span>: <span class="string">&quot;xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_useragent&quot;</span>: <span class="string">&quot;xxxxxx&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;fmapp_token&quot;</span>: <span class="string">&quot;多账号 token 填写，请参考上面，以实际获取为准&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_blackbox&quot;</span>: <span class="string">&quot;多账号 blackbox 填写，请参考上面，blackbox 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_device_id&quot;</span>: <span class="string">&quot;多账号 device_id 填写，请参考上面，以实际获取为准&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_fmversion&quot;</span>: <span class="string">&quot;多账号 fmVersion 填写，请参考上面，以实际获取为准&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_os&quot;</span>: <span class="string">&quot;多账号 os 填写，请参考上面，以实际获取为准&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fmapp_useragent&quot;</span>: <span class="string">&quot;多账号 User-Agent 填写，请参考上面，以实际获取为准&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;TIEBA_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;tieba_cookie&quot;</span>: <span class="string">&quot;BIDUPSID=xxxxxx; PSTM=xxxxxx; BAIDUID=xxxxxx; BAIDUID_BFESS=xxxxxx; delPer=xxxxxx; PSINO=xxxxxx; H_PS_PSSID=xxxxxx; BA_HECTOR=xxxxxx; BDORZ=xxxxxx; TIEBA_USERTYPE=xxxxxx; st_key_id=xxxxxx; BDUSS=xxxxxx; BDUSS_BFESS=xxxxxx; STOKEN=xxxxxx; TIEBAUID=xxxxxx; ab_sr=xxxxxx; st_data=xxxxxx; st_sign=xxxxxx;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;tieba_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;BILIBILI_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;bilibili_cookie&quot;</span>: <span class="string">&quot;_uuid=xxxxxx; rpdid=xxxxxx; LIVE_BUVID=xxxxxx; PVID=xxxxxx; blackside_state=xxxxxx; CURRENT_FNVAL=xxxxxx; buvid3=xxxxxx; fingerprint3=xxxxxx; fingerprint=xxxxxx; buivd_fp=xxxxxx; buvid_fp_plain=xxxxxx; DedeUserID=xxxxxx; DedeUserID__ckMd5=xxxxxx; SESSDATA=xxxxxx; bili_jct=xxxxxx; bsource=xxxxxx; finger=xxxxxx; fingerprint_s=xxxxxx;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;coin_num&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;coin_type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;silver2coin&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;bilibili_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;coin_num&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;coin_type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;silver2coin&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;V2EX_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;v2ex_cookie&quot;</span>: <span class="string">&quot;_ga=xxxxxx; __cfduid=xxxxxx; PB3_SESSION=xxxxxx; A2=xxxxxx; V2EXSETTINGS=xxxxxx; V2EX_REFERRER=xxxxxx; V2EX_LANG=xxxxxx; _gid=xxxxxx; V2EX_TAB=xxxxxx;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;v2ex_proxy&quot;</span>: <span class="string">&quot;使用代理的信息，无密码例子: http://127.0.0.1:1080 有密码例子: http://username:password@127.0.0.1:1080&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;v2ex_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;v2ex_proxy&quot;</span>: <span class="string">&quot;使用代理的信息，无密码例子: http://127.0.0.1:1080 有密码例子: http://username:password@127.0.0.1:1080&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;WWW2NZZ_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;www2nzz_cookie&quot;</span>: <span class="string">&quot;YPx9_2132_saltkey=xxxxxx; YPx9_2132_lastvisit=xxxxxx; YPx9_2132_sendmail=xxxxxx; YPx9_2132_con_request_uri=xxxxxx; YPx9_2132_sid=xxxxxx; YPx9_2132_client_created=xxxxxx; YPx9_2132_client_token=xxxxxx; YPx9_2132_ulastactivity=xxxxxx; YPx9_2132_auth=xxxxxx; YPx9_2132_connect_login=xxxxxx; YPx9_2132_connect_is_bind=xxxxxx; YPx9_2132_connect_uin=xxxxxx; YPx9_2132_stats_qc_login=xxxxxx; YPx9_2132_checkpm=xxxxxx; YPx9_2132_noticeTitle=xxxxxx; YPx9_2132_nofavfid=xxxxxx; YPx9_2132_lastact=xxxxxx;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;www2nzz_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;SMZDM_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;smzdm_cookie&quot;</span>: <span class="string">&quot;__jsluid_s=xxxxxx; __ckguid=xxxxxx; device_id=xxxxxx; homepage_sug=xxxxxx; r_sort_type=xxxxxx; _zdmA.vid=xxxxxx; sajssdk_2015_cross_new_user=xxxxxx; sensorsdata2015jssdkcross=xxxxxx; footer_floating_layer=xxxxxx; ad_date=xxxxxx; ad_json_feed=xxxxxx; zdm_qd=xxxxxx; sess=xxxxxx; user=xxxxxx; _zdmA.uid=xxxxxx; smzdm_id=xxxxxx; userId=xxxxxx; bannerCounter=xxxxxx; _zdmA.time=xxxxxx;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;smzdm_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;MIMOTION_ACCOUNT_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;mimotion_phone&quot;</span>: <span class="string">&quot;18888xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;mimotion_password&quot;</span>: <span class="string">&quot;Sitoi&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;mimotion_min_step&quot;</span>: <span class="string">&quot;10000&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;mimotion_max_step&quot;</span>: <span class="string">&quot;20000&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;mimotion_phone&quot;</span>: <span class="string">&quot;多账号 手机号填写，请参考上面&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;mimotion_password&quot;</span>: <span class="string">&quot;多账号 密码填写，请参考上面&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;mimotion_min_step&quot;</span>: <span class="string">&quot;多账号 最小步数填写，请参考上面&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;mimotion_max_step&quot;</span>: <span class="string">&quot;多账号 最大步数填写，请参考上面&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;ACFUN_ACCOUNT_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;acfun_phone&quot;</span>: <span class="string">&quot;18888xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;acfun_password&quot;</span>: <span class="string">&quot;Sitoi&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;acfun_phone&quot;</span>: <span class="string">&quot;多账号 手机号填写，请参考上面&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;acfun_password&quot;</span>: <span class="string">&quot;多账号 密码填写，请参考上面&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;CLOUD189_ACCOUNT_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;cloud189_phone&quot;</span>: <span class="string">&quot;18888xxxxxx&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cloud189_password&quot;</span>: <span class="string">&quot;Sitoi&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;cloud189_phone&quot;</span>: <span class="string">&quot;多账号 手机号填写，请参考上面&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cloud189_password&quot;</span>: <span class="string">&quot;多账号 密码填写，请参考上面&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;POJIE_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;pojie_cookie&quot;</span>: <span class="string">&quot;htVD_2132_client_token=xxxxxx; htVD_2132_connect_is_bind=xxxxxx; htVD_2132_connect_uin=xxxxxx; htVD_2132_nofavfid=xxxxxx; htVD_2132_smile=xxxxxx; Hm_lvt_46d556462595ed05e05f009cdafff31a=xxxxxx; htVD_2132_saltkey=xxxxxx; htVD_2132_lastvisit=xxxxxx; htVD_2132_client_created=xxxxxx; htVD_2132_auth=xxxxxx; htVD_2132_connect_login=xxxxxx; htVD_2132_home_diymode=xxxxxx; htVD_2132_visitedfid=xxxxxx; htVD_2132_viewid=xxxxxx; KF4=xxxxxx; htVD_2132_st_p=xxxxxx; htVD_2132_lastcheckfeed=xxxxxx; htVD_2132_sid=xxxxxx; htVD_2132_ulastactivity=xxxxxx; htVD_2132_noticeTitle=xxxxxx;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;pojie_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;MGTV_PARAMS_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;mgtv_params&quot;</span>: <span class="string">&quot;uuid=xxxxxx&amp;uid=xxxxxx&amp;ticket=xxxxxx&amp;token=xxxxxx&amp;device=iPhone&amp;did=xxxxxx&amp;deviceId=xxxxxx&amp;appVersion=6.8.2&amp;osType=ios&amp;platform=iphone&amp;abroad=0&amp;aid=xxxxxx&amp;nonce=xxxxxx&amp;timestamp=xxxxxx&amp;appid=xxxxxx&amp;type=1&amp;sign=xxxxxx&amp;callback=xxxxxx&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;mgtv_params&quot;</span>: <span class="string">&quot;多账号 请求参数填写，请参考上面&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;PICACOMIC_ACCOUNT_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;picacomic_email&quot;</span>: <span class="string">&quot;Sitoi&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;picacomic_password&quot;</span>: <span class="string">&quot;xxxxxx&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;picacomic_email&quot;</span>: <span class="string">&quot;多账号 账号填写，请参考上面&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;picacomic_password&quot;</span>: <span class="string">&quot;多账号 密码填写，请参考上面&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;MEIZU_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;meizu_cookie&quot;</span>: <span class="string">&quot;aliyungf_tc=xxxxxx; logined_uid=xxxxxx; acw_tc=xxxxxx; LT=xxxxxx; MZBBS_2132_saltkey=xxxxxx; MZBBS_2132_lastvisit=xxxxxx; MZBBSUC_2132_auth=xxxxxx; MZBBSUC_2132_loginmember=xxxxxx; MZBBSUC_2132_ticket=xxxxxx; MZBBS_2132_sid=xxxxxx; MZBBS_2132_ulastactivity=xxxxxx; MZBBS_2132_auth=xxxxxx; MZBBS_2132_loginmember=xxxxxx; MZBBS_2132_lastcheckfeed=xxxxxx; MZBBS_2132_checkfollow=xxxxxx; MZBBS_2132_lastact=xxxxxx;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;draw_count&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;meizu_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;draw_count&quot;</span>: <span class="string">&quot;多账号 抽奖次数设置&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;ZHIYOO_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;zhiyoo_cookie&quot;</span>: <span class="string">&quot;ikdQ_9242_saltkey=xxxxxx; ikdQ_9242_lastvisit=xxxxxx; ikdQ_9242_onlineusernum=xxxxxx; ikdQ_9242_sendmail=1; ikdQ_9242_seccode=xxxxxx; ikdQ_9242_ulastactivity=xxxxxx; ikdQ_9242_auth=xxxxxx; ikdQ_9242_connect_is_bind=xxxxxx; ikdQ_9242_nofavfid=xxxxxx; ikdQ_9242_checkpm=xxxxxx; ikdQ_9242_noticeTitle=1; ikdQ_9242_sid=xxxxxx; ikdQ_9242_lip=xxxxxx; ikdQ_9242_lastact=xxxxxx&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;zhiyoo_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;WEIBO_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;weibo_show_url&quot;</span>: <span class="string">&quot;https://api.weibo.cn/2/users/show?wm=xxxxxx&amp;launchid=xxxxxx&amp;b=xxxxxx&amp;from=xxxxxx&amp;c=xxxxxx&amp;networktype=xxxxxx&amp;v_p=xxxxxx&amp;skin=xxxxxx&amp;v_f=xxxxxx&amp;lang=xxxxxx&amp;sflag=xxxxxx&amp;ua=xxxxxx&amp;ft=xxxxxx&amp;aid=xxxxxx&amp;has_extend=xxxxxx&amp;uid=xxxxxx&amp;gsid=xxxxxx&amp;sourcetype=&amp;get_teenager=xxxxxx&amp;s=xxxxxx&amp;has_profile=xxxxxx&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;weibo_show_url&quot;</span>: <span class="string">&quot;多账号 show_url 填写，请参考上面，show_url 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;DUOKAN_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;duokan_cookie&quot;</span>: <span class="string">&quot;user_id=xxxxxx; token=xxxxxx; user_gender=xxxxxx; device_id=xxxxxx; app_id=xxxxxx; build=xxxxxx; short_version=xxxxxx&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;duokan_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;CSDN_COOKIE_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;csdn_cookie&quot;</span>: <span class="string">&quot;uuid_tt_dd=xxxxxx; _ga=xxxxxx; UserName=xxxxxx; UserInfo=xxxxxx; UserToken=xxxxxx; UserNick=xxxxxx; AU=768; UN=xxxxxx; BT=xxxxxx; p_uid=xxxxxx; Hm_up_6bcd52f51e9b3dce32bec4a3997715ac=xxxxxx; Hm_ct_6bcd52f51e9b3dce32bec4a3997715ac=xxxxxx; Hm_lvt_6bcd52f51e9b3dce32bec4a3997715ac=xxxxxx dc_sid=xxxxxx; c_segment=xxxxxx; dc_session_id=xxxxxx; csrfToken=xxxxxx; c_first_ref=xxxxxx; c_first_page=xxxxxx; c_page_id=xxxxxx; announcement-new=xxxxxx; log_Id_click=xxxxxx; c_pref=xxxxxx; c_ref=xxxxxx; dc_tos=xxxxxx; log_Id_pv=xxxxxx; log_Id_view=xxxxxx&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;csdn_cookie&quot;</span>: <span class="string">&quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;WZYD_DATA_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;wzyd_data&quot;</span>: <span class="string">&quot;areaId=xxxxxx&amp;roleId=xxxxxx&amp;gameId=xxxxxx&amp;serverId=xxxxxx&amp;gameOpenid=xxxxxx&amp;userId=xxxxxx&amp;appVersion=xxxxxx&amp;cClientVersionName=xxxxxx&amp;platid=xxxxxx&amp;source=xxxxxx&amp;algorithm=xxxxxx&amp;version=xxxxxx&amp;timestamp=xxxxxx&amp;appid=xxxxxx&amp;openid=xxxxxx&amp;sig=xxxxxx&amp;encode=2&amp;msdkEncodeParam=xxxxxx&amp;cSystem=xxxxxx&amp;h5Get=xxxxxx&amp;msdkToken=&amp;appOpenid=xxxxxx&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;wzyd_data&quot;</span>: <span class="string">&quot;多账号 data 填写，请参考上面，data 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;WOMAIL_URL_LIST&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;womail_url&quot;</span>: <span class="string">&quot;https://nyan.mail.wo.cn/cn/sign/index/index?mobile=xxxxxx&amp;userName=&amp;openId=xxxxxx&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;womail_url&quot;</span>: <span class="string">&quot;多账号 url 填写，请参考上面，url 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Serverless</category>
        <category>SCF</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>腾讯云函数</tag>
      </tags>
  </entry>
</search>
